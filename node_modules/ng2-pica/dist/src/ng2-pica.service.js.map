{"version":3,"file":"ng2-pica.service.js","sources":["ng2-pica.service.js"],"names":[],"mappingskCAAS;AACT;AACA;AACA;AACA","sourcesContent":["import { Injectable, Inject, forwardRef } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport pica from 'pica/dist/pica';\r\nimport { ImgExifService } from './img-exif.service';\r\nvar Ng2PicaService = /** @class */ (function () {\r\n    function Ng2PicaService(imageExifService) {\r\n        this.imageExifService = imageExifService;\r\n    }\r\n    Ng2PicaService.prototype.resize = function (files, width, height, keepAspectRatio) {\r\n        if (keepAspectRatio === void 0) { keepAspectRatio = false; }\r\n        var resizedFile = new Subject();\r\n        for (var i = 0; i < files.length; i++) {\r\n            this.resizeFile(files[i], width, height, keepAspectRatio).then(function (returnedFile) {\r\n                resizedFile.next(returnedFile);\r\n            }).catch(function (error) {\r\n                resizedFile.error(error);\r\n            });\r\n        }\r\n        return resizedFile.asObservable();\r\n    };\r\n    Ng2PicaService.prototype.resizeCanvas = function (from, to, options) {\r\n        var result = new Promise(function (resolve, reject) {\r\n            var curPica = new pica();\r\n            if (!curPica || !curPica.resize) {\r\n                curPica = new window.pica();\r\n            }\r\n            curPica.resize(from, to, options)\r\n                .then(function (response) {\r\n                resolve(response);\r\n            }, function (error) {\r\n                reject(error);\r\n            });\r\n        });\r\n        return result;\r\n    };\r\n    Ng2PicaService.prototype.resizeBuffer = function (options) {\r\n        var result = new Promise(function (resolve, reject) {\r\n            var curPica = new pica();\r\n            if (!curPica || !curPica.resizeBuffer) {\r\n                curPica = new window.pica();\r\n            }\r\n            curPica.resizeBuffer(options)\r\n                .then(function (response) {\r\n                resolve(response);\r\n            }, function (error) {\r\n                reject(error);\r\n            });\r\n        });\r\n        return result;\r\n    };\r\n    Ng2PicaService.prototype.resizeFile = function (file, width, height, keepAspectRatio) {\r\n        var _this = this;\r\n        if (keepAspectRatio === void 0) { keepAspectRatio = false; }\r\n        var result = new Promise(function (resolve, reject) {\r\n            var fromCanvas = document.createElement('canvas');\r\n            var ctx = fromCanvas.getContext('2d');\r\n            var img = new Image();\r\n            img.onload = function () {\r\n                _this.imageExifService.getOrientedImage(img).then(function (orientedImg) {\r\n                    window.URL.revokeObjectURL(img.src);\r\n                    fromCanvas.width = orientedImg.width;\r\n                    fromCanvas.height = orientedImg.height;\r\n                    ctx.drawImage(orientedImg, 0, 0);\r\n                    var imageData = ctx.getImageData(0, 0, orientedImg.width, orientedImg.height);\r\n                    if (keepAspectRatio) {\r\n                        var ratio = Math.min(width / imageData.width, height / imageData.height);\r\n                        width = Math.round(imageData.width * ratio);\r\n                        height = Math.round(imageData.height * ratio);\r\n                    }\r\n                    var useAlpha = true;\r\n                    if (file.type === \"image/jpeg\" || (file.type === \"image/png\" && !_this.isImgUsingAlpha(imageData))) {\r\n                        //image without alpha\r\n                        useAlpha = false;\r\n                        ctx = fromCanvas.getContext('2d', { 'alpha': false });\r\n                        ctx.drawImage(orientedImg, 0, 0);\r\n                    }\r\n                    var toCanvas = document.createElement('canvas');\r\n                    toCanvas.width = width;\r\n                    toCanvas.height = height;\r\n                    _this.resizeCanvas(fromCanvas, toCanvas, { 'alpha': useAlpha })\r\n                        .then(function (resizedCanvas) {\r\n                        resizedCanvas.toBlob(function (blob) {\r\n                            var newFile = _this.generateResultFile(blob, file.name, file.type, new Date().getTime());\r\n                            resolve(newFile);\r\n                        }, file.type);\r\n                    })\r\n                        .catch(function (error) {\r\n                        reject(error);\r\n                    });\r\n                });\r\n            };\r\n            img.src = window.URL.createObjectURL(file);\r\n        });\r\n        return result;\r\n    };\r\n    Ng2PicaService.prototype.isImgUsingAlpha = function (imageData) {\r\n        for (var i = 0; i < imageData.data.length; i += 4) {\r\n            if (imageData.data[i + 3] !== 255) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Ng2PicaService.prototype.generateResultFile = function (blob, name, type, lastModified) {\r\n        var resultFile = new Blob([blob], { type: type });\r\n        return this.blobToFile(resultFile, name, lastModified);\r\n    };\r\n    Ng2PicaService.prototype.blobToFile = function (blob, name, lastModified) {\r\n        var file = blob;\r\n        file.name = name;\r\n        file.lastModified = lastModified;\r\n        //Cast to a File() type\r\n        return file;\r\n    };\r\n    Ng2PicaService.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    Ng2PicaService.ctorParameters = function () { return [\r\n        { type: ImgExifService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgExifService; }),] }] }\r\n    ]; };\r\n    return Ng2PicaService;\r\n}());\r\nexport { Ng2PicaService };\r\n"]}