import { Directive, ElementRef, EventEmitter, Input, NgZone, Output, } from '@angular/core';
import { ngbRunTransition } from '../util/transition/ngbTransition';
import { ngbCollapsingTransition } from '../util/transition/ngbCollapseTransition';
import { NgbCollapseConfig } from './collapse-config';
/**
 * A directive to provide a simple way of hiding and showing elements on the page.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './collapse-config';
export class NgbCollapse {
    constructor(_element, config, _zone) {
        this._element = _element;
        this._zone = _zone;
        /**
         * If `true`, will collapse the element or show it otherwise.
         */
        this.collapsed = false;
        this.ngbCollapseChange = new EventEmitter();
        /**
         * An event emitted when the collapse element is shown, after the transition. It has no payload.
         *
         * @since 8.0.0
         */
        this.shown = new EventEmitter();
        /**
         * An event emitted when the collapse element is hidden, after the transition. It has no payload.
         *
         * @since 8.0.0
         */
        this.hidden = new EventEmitter();
        this.animation = config.animation;
    }
    ngOnInit() { this._runTransition(this.collapsed, false); }
    ngOnChanges({ collapsed }) {
        if (!collapsed.firstChange) {
            this._runTransitionWithEvents(this.collapsed, this.animation);
        }
    }
    /**
     * Triggers collapsing programmatically.
     *
     * If there is a collapsing transition running already, it will be reversed.
     * If the animations are turned off this happens synchronously.
     *
     * @since 8.0.0
     */
    toggle(open = this.collapsed) {
        this.collapsed = !open;
        this.ngbCollapseChange.next(this.collapsed);
        this._runTransitionWithEvents(this.collapsed, this.animation);
    }
    _runTransition(collapsed, animation) {
        return ngbRunTransition(this._zone, this._element.nativeElement, ngbCollapsingTransition, { animation, runningTransition: 'stop', context: { direction: collapsed ? 'hide' : 'show' } });
    }
    _runTransitionWithEvents(collapsed, animation) {
        this._runTransition(collapsed, animation).subscribe(() => {
            if (collapsed) {
                this.hidden.emit();
            }
            else {
                this.shown.emit();
            }
        });
    }
}
NgbCollapse.ɵfac = function NgbCollapse_Factory(t) { return new (t || NgbCollapse)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgbCollapseConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
NgbCollapse.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgbCollapse, selectors: [["", "ngbCollapse", ""]], inputs: { collapsed: ["ngbCollapse", "collapsed"], animation: "animation" }, outputs: { ngbCollapseChange: "ngbCollapseChange", shown: "shown", hidden: "hidden" }, exportAs: ["ngbCollapse"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
NgbCollapse.ctorParameters = () => [
    { type: ElementRef },
    { type: NgbCollapseConfig },
    { type: NgZone }
];
NgbCollapse.propDecorators = {
    animation: [{ type: Input }],
    collapsed: [{ type: Input, args: ['ngbCollapse',] }],
    ngbCollapseChange: [{ type: Output }],
    shown: [{ type: Output }],
    hidden: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgbCollapse, [{
        type: Directive,
        args: [{ selector: '[ngbCollapse]', exportAs: 'ngbCollapse' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.NgbCollapseConfig }, { type: ɵngcc0.NgZone }]; }, { collapsed: [{
            type: Input,
            args: ['ngbCollapse']
        }], ngbCollapseChange: [{
            type: Output
        }], shown: [{
            type: Output
        }], hidden: [{
            type: Output
        }], animation: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL21va29yb2tvdi9EZXYvQW5ndWxhci9uZy1ib290c3RyYXAvc3JjL2NvbGxhcHNlL2NvbGxhcHNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUdOLE1BQU0sR0FFUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUNsRSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQztBQUNqRixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUVwRDtBQUNBO0FBQ0EsR0FBRzs7O0FBRUgsTUFBTSxPQUFPLFdBQVc7QUFBRyxJQWlDekIsWUFBb0IsUUFBb0IsRUFBRSxNQUF5QixFQUFVLEtBQWE7QUFDNUYsUUFEc0IsYUFBUSxHQUFSLFFBQVEsQ0FBWTtBQUFDLFFBQW9DLFVBQUssR0FBTCxLQUFLLENBQVE7QUFBQyxRQXRCM0Y7QUFDRjtBQUVBLFdBREs7QUFDTCxRQUF3QixjQUFTLEdBQUcsS0FBSyxDQUFDO0FBQzFDLFFBQ1ksc0JBQWlCLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztBQUM1RCxRQUNFO0FBQ0Y7QUFFQztBQUFXO0FBRUEsV0FEUDtBQUNMLFFBQVksVUFBSyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7QUFDN0MsUUFDRTtBQUNGO0FBRUM7QUFBVztBQUVBLFdBRFA7QUFDTCxRQUFZLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO0FBQzlDLFFBR0ksSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ3RDLElBQUUsQ0FBQztBQUNILElBQ0UsUUFBUSxLQUFLLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUQsSUFDRSxXQUFXLENBQUMsRUFBQyxTQUFTLEVBQWdCO0FBQ3hDLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUU7QUFDaEMsWUFBTSxJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDcEUsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFO0FBQ0U7QUFDRTtBQUVIO0FBQU87QUFFSixPQUREO0FBQ0wsSUFBRSxNQUFNLENBQUMsT0FBZ0IsSUFBSSxDQUFDLFNBQVM7QUFDdkMsUUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDO0FBQzNCLFFBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEQsUUFBSSxJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbEUsSUFBRSxDQUFDO0FBQ0gsSUFDVSxjQUFjLENBQUMsU0FBa0IsRUFBRSxTQUFrQjtBQUMvRCxRQUFJLE9BQU8sZ0JBQWdCLENBQ25CLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsdUJBQXVCLEVBQ2hFLEVBQUMsU0FBUyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxFQUFDLENBQUMsQ0FBQztBQUNuRyxJQUFFLENBQUM7QUFDSCxJQUNVLHdCQUF3QixDQUFDLFNBQWtCLEVBQUUsU0FBa0I7QUFDekUsUUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO0FBQzdELFlBQU0sSUFBSSxTQUFTLEVBQUU7QUFDckIsZ0JBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUMzQixhQUFPO0FBQUMsaUJBQUs7QUFDYixnQkFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzFCLGFBQU87QUFDUCxRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0g7dUNBM0VDLFNBQVMsU0FBQyxFQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBQztpVkFDMUQ7QUFBQztBQUFxQyxZQWpCekMsVUFBVTtBQUNWLFlBVU0saUJBQWlCO0FBQUksWUFSM0IsTUFBTTtBQUNQO0FBQUc7QUFHRix3QkFtQkMsS0FBSztBQUFLLHdCQUtWLEtBQUssU0FBQyxhQUFhO0FBQU8sZ0NBRTFCLE1BQU07QUFBSyxvQkFPWCxNQUFNO0FBQUsscUJBT1gsTUFBTTtBQUFJOzs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPbkNoYW5nZXMsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7bmdiUnVuVHJhbnNpdGlvbn0gZnJvbSAnLi4vdXRpbC90cmFuc2l0aW9uL25nYlRyYW5zaXRpb24nO1xuaW1wb3J0IHtuZ2JDb2xsYXBzaW5nVHJhbnNpdGlvbn0gZnJvbSAnLi4vdXRpbC90cmFuc2l0aW9uL25nYkNvbGxhcHNlVHJhbnNpdGlvbic7XG5pbXBvcnQge05nYkNvbGxhcHNlQ29uZmlnfSBmcm9tICcuL2NvbGxhcHNlLWNvbmZpZyc7XG5cbi8qKlxuICogQSBkaXJlY3RpdmUgdG8gcHJvdmlkZSBhIHNpbXBsZSB3YXkgb2YgaGlkaW5nIGFuZCBzaG93aW5nIGVsZW1lbnRzIG9uIHRoZSBwYWdlLlxuICovXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ1tuZ2JDb2xsYXBzZV0nLCBleHBvcnRBczogJ25nYkNvbGxhcHNlJ30pXG5leHBvcnQgY2xhc3MgTmdiQ29sbGFwc2UgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbGxhcHNlIHdpbGwgYmUgYW5pbWF0ZWQuXG4gICAqXG4gICAqIEFuaW1hdGlvbiBpcyB0cmlnZ2VyZWQgb25seSB3aGVuIGNsaWNrZWQgb24gdHJpZ2dlcmluZyBlbGVtZW50XG4gICAqIG9yIHZpYSB0aGUgYC50b2dnbGUoKWAgZnVuY3Rpb25cbiAgICpcbiAgICogQHNpbmNlIDguMC4wXG4gICAqL1xuICBASW5wdXQoKSBhbmltYXRpb247XG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgd2lsbCBjb2xsYXBzZSB0aGUgZWxlbWVudCBvciBzaG93IGl0IG90aGVyd2lzZS5cbiAgICovXG4gIEBJbnB1dCgnbmdiQ29sbGFwc2UnKSBjb2xsYXBzZWQgPSBmYWxzZTtcblxuICBAT3V0cHV0KCkgbmdiQ29sbGFwc2VDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgLyoqXG4gICAqIEFuIGV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgY29sbGFwc2UgZWxlbWVudCBpcyBzaG93biwgYWZ0ZXIgdGhlIHRyYW5zaXRpb24uIEl0IGhhcyBubyBwYXlsb2FkLlxuICAgKlxuICAgKiBAc2luY2UgOC4wLjBcbiAgICovXG4gIEBPdXRwdXQoKSBzaG93biA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAvKipcbiAgICogQW4gZXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBjb2xsYXBzZSBlbGVtZW50IGlzIGhpZGRlbiwgYWZ0ZXIgdGhlIHRyYW5zaXRpb24uIEl0IGhhcyBubyBwYXlsb2FkLlxuICAgKlxuICAgKiBAc2luY2UgOC4wLjBcbiAgICovXG4gIEBPdXRwdXQoKSBoaWRkZW4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50OiBFbGVtZW50UmVmLCBjb25maWc6IE5nYkNvbGxhcHNlQ29uZmlnLCBwcml2YXRlIF96b25lOiBOZ1pvbmUpIHtcbiAgICB0aGlzLmFuaW1hdGlvbiA9IGNvbmZpZy5hbmltYXRpb247XG4gIH1cblxuICBuZ09uSW5pdCgpIHsgdGhpcy5fcnVuVHJhbnNpdGlvbih0aGlzLmNvbGxhcHNlZCwgZmFsc2UpOyB9XG5cbiAgbmdPbkNoYW5nZXMoe2NvbGxhcHNlZH06IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoIWNvbGxhcHNlZC5maXJzdENoYW5nZSkge1xuICAgICAgdGhpcy5fcnVuVHJhbnNpdGlvbldpdGhFdmVudHModGhpcy5jb2xsYXBzZWQsIHRoaXMuYW5pbWF0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVHJpZ2dlcnMgY29sbGFwc2luZyBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKlxuICAgKiBJZiB0aGVyZSBpcyBhIGNvbGxhcHNpbmcgdHJhbnNpdGlvbiBydW5uaW5nIGFscmVhZHksIGl0IHdpbGwgYmUgcmV2ZXJzZWQuXG4gICAqIElmIHRoZSBhbmltYXRpb25zIGFyZSB0dXJuZWQgb2ZmIHRoaXMgaGFwcGVucyBzeW5jaHJvbm91c2x5LlxuICAgKlxuICAgKiBAc2luY2UgOC4wLjBcbiAgICovXG4gIHRvZ2dsZShvcGVuOiBib29sZWFuID0gdGhpcy5jb2xsYXBzZWQpIHtcbiAgICB0aGlzLmNvbGxhcHNlZCA9ICFvcGVuO1xuICAgIHRoaXMubmdiQ29sbGFwc2VDaGFuZ2UubmV4dCh0aGlzLmNvbGxhcHNlZCk7XG4gICAgdGhpcy5fcnVuVHJhbnNpdGlvbldpdGhFdmVudHModGhpcy5jb2xsYXBzZWQsIHRoaXMuYW5pbWF0aW9uKTtcbiAgfVxuXG4gIHByaXZhdGUgX3J1blRyYW5zaXRpb24oY29sbGFwc2VkOiBib29sZWFuLCBhbmltYXRpb246IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gbmdiUnVuVHJhbnNpdGlvbihcbiAgICAgICAgdGhpcy5fem9uZSwgdGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LCBuZ2JDb2xsYXBzaW5nVHJhbnNpdGlvbixcbiAgICAgICAge2FuaW1hdGlvbiwgcnVubmluZ1RyYW5zaXRpb246ICdzdG9wJywgY29udGV4dDoge2RpcmVjdGlvbjogY29sbGFwc2VkID8gJ2hpZGUnIDogJ3Nob3cnfX0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfcnVuVHJhbnNpdGlvbldpdGhFdmVudHMoY29sbGFwc2VkOiBib29sZWFuLCBhbmltYXRpb246IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9ydW5UcmFuc2l0aW9uKGNvbGxhcHNlZCwgYW5pbWF0aW9uKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKGNvbGxhcHNlZCkge1xuICAgICAgICB0aGlzLmhpZGRlbi5lbWl0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNob3duLmVtaXQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19