import { __decorate, __values } from "tslib";
import { Directive, AfterViewInit, OnDestroy, DoCheck, Input, Output, EventEmitter, ElementRef, KeyValueDiffers } from '@angular/core';
import 'daterangepicker';
import $ from "jquery";
import { DaterangepickerConfig } from "./ng2-daterangepicker.service";
var DaterangepickerComponent = /** @class */ (function () {
    function DaterangepickerComponent(input, config, differs) {
        this.input = input;
        this.config = config;
        this.differs = differs;
        this.targetOptions = {};
        this._differ = {};
        this.options = {};
        this.selected = new EventEmitter();
        this.cancelDaterangepicker = new EventEmitter();
        this.applyDaterangepicker = new EventEmitter();
        this.hideCalendarDaterangepicker = new EventEmitter();
        this.showCalendarDaterangepicker = new EventEmitter();
        this.hideDaterangepicker = new EventEmitter();
        this.showDaterangepicker = new EventEmitter();
        this._differ['options'] = this.differs.find(this.options).create();
        this._differ['settings'] = this.differs.find(this.config.settings).create();
    }
    DaterangepickerComponent.prototype.ngAfterViewInit = function () {
        this.render();
        this.attachEvents();
    };
    DaterangepickerComponent.prototype.ngDoCheck = function () {
        var optionsChanged = this._differ['options'].diff(this.options);
        var settingsChanged = this._differ['settings'].diff(this.config.settings);
        if (optionsChanged || settingsChanged) {
            this.render();
            this.attachEvents();
            if (this.activeRange && this.datePicker) {
                this.datePicker.setStartDate(this.activeRange.start);
                this.datePicker.setEndDate(this.activeRange.end);
            }
        }
    };
    DaterangepickerComponent.prototype.ngOnDestroy = function () {
        this.destroyPicker();
    };
    DaterangepickerComponent.prototype.render = function () {
        var e_1, _a;
        this.targetOptions = Object.assign({}, this.config.settings, this.options);
        $(this.input.nativeElement).daterangepicker(this.targetOptions, this.callback.bind(this));
        if (this.options.customClasses && this.options.customClasses.length) {
            try {
                for (var _b = __values(this.options.customClasses), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var customClass = _c.value;
                    this.datePicker = $(this.input.nativeElement).data('daterangepicker').container.addClass(customClass);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            this.datePicker = $(this.input.nativeElement).data('daterangepicker');
        }
    };
    DaterangepickerComponent.prototype.callback = function (start, end, label) {
        this.activeRange = {
            start: start,
            end: end,
            label: label
        };
        this.selected.emit(this.activeRange);
    };
    DaterangepickerComponent.prototype.destroyPicker = function () {
        try {
            $(this.input.nativeElement).data('daterangepicker').remove();
        }
        catch (e) {
            console.log(e.message);
        }
    };
    DaterangepickerComponent.prototype.attachEvents = function () {
        var _this = this;
        $(this.input.nativeElement).on('cancel.daterangepicker', function (e, picker) {
            var event = { event: e, picker: picker };
            _this.cancelDaterangepicker.emit(event);
        });
        $(this.input.nativeElement).on('apply.daterangepicker', function (e, picker) {
            var event = { event: e, picker: picker };
            _this.applyDaterangepicker.emit(event);
        });
        $(this.input.nativeElement).on('hideCalendar.daterangepicker', function (e, picker) {
            var event = { event: e, picker: picker };
            _this.hideCalendarDaterangepicker.emit(event);
        });
        $(this.input.nativeElement).on('showCalendar.daterangepicker', function (e, picker) {
            var event = { event: e, picker: picker };
            _this.showCalendarDaterangepicker.emit(event);
        });
        $(this.input.nativeElement).on('hide.daterangepicker', function (e, picker) {
            var event = { event: e, picker: picker };
            _this.hideDaterangepicker.emit(event);
        });
        $(this.input.nativeElement).on('show.daterangepicker', function (e, picker) {
            var event = { event: e, picker: picker };
            _this.showDaterangepicker.emit(event);
        });
    };
    DaterangepickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DaterangepickerConfig },
        { type: KeyValueDiffers }
    ]; };
    __decorate([
        Input()
    ], DaterangepickerComponent.prototype, "options", void 0);
    __decorate([
        Output()
    ], DaterangepickerComponent.prototype, "selected", void 0);
    __decorate([
        Output()
    ], DaterangepickerComponent.prototype, "cancelDaterangepicker", void 0);
    __decorate([
        Output()
    ], DaterangepickerComponent.prototype, "applyDaterangepicker", void 0);
    __decorate([
        Output()
    ], DaterangepickerComponent.prototype, "hideCalendarDaterangepicker", void 0);
    __decorate([
        Output()
    ], DaterangepickerComponent.prototype, "showCalendarDaterangepicker", void 0);
    __decorate([
        Output()
    ], DaterangepickerComponent.prototype, "hideDaterangepicker", void 0);
    __decorate([
        Output()
    ], DaterangepickerComponent.prototype, "showDaterangepicker", void 0);
    DaterangepickerComponent = __decorate([
        Directive({
            selector: '[daterangepicker]'
        })
    ], DaterangepickerComponent);
    return DaterangepickerComponent;
}());
export { DaterangepickerComponent };
//# sourceMappingURL=data:application/json;base64,