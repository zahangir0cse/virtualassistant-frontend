{"ast":null,"code":"import _inherits from \"/Users/zahangiralam/Desktop/Projects/Others/kona-sl/kona-sl-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/zahangiralam/Desktop/Projects/Others/kona-sl/kona-sl-frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/zahangiralam/Desktop/Projects/Others/kona-sl/kona-sl-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zahangiralam/Desktop/Projects/Others/kona-sl/kona-sl-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Inject, Injectable, InjectionToken, Injector, NgModule } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\nimport { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} obj\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction isBlank(obj) {\n  return obj === undefined || obj === null;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\n\n\nfunction isPresent(obj) {\n  return obj !== undefined && obj !== null;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\n\n\nfunction isString(obj) {\n  return typeof obj === 'string';\n}\n/**\n * @param {?} oldOptions\n * @param {?=} newOptions\n * @return {?}\n */\n\n\nfunction mergeOptions(oldOptions, newOptions) {\n  if (!newOptions) {\n    return oldOptions;\n  }\n\n  return {\n    path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,\n    domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,\n    expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,\n    secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,\n    httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,\n    storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded\n  };\n}\n/**\n * @param {?} str\n * @return {?}\n */\n\n\nfunction safeDecodeURIComponent(str) {\n  try {\n    return decodeURIComponent(str);\n  } catch (e) {\n    return str;\n  }\n}\n/**\n * @param {?} str\n * @return {?}\n */\n\n\nfunction safeJsonParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return str;\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar COOKIE_OPTIONS = new InjectionToken('COOKIE_OPTIONS');\n\nvar CookieOptionsProvider = /*#__PURE__*/function () {\n  /**\n   * @param {?=} options\n   * @param {?=} _injector\n   */\n  function CookieOptionsProvider() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _injector = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, CookieOptionsProvider);\n\n    this._injector = _injector;\n    this.defaultOptions = {\n      path: this._injector.get(APP_BASE_HREF, '/'),\n      domain: null,\n      expires: null,\n      secure: false,\n      httpOnly: false\n    };\n    this._options = mergeOptions(this.defaultOptions, options);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CookieOptionsProvider, [{\n    key: \"options\",\n    get: function get() {\n      return this._options;\n    }\n  }]);\n\n  return CookieOptionsProvider;\n}();\n\nCookieOptionsProvider.ɵfac = function CookieOptionsProvider_Factory(t) {\n  return new (t || CookieOptionsProvider)(ɵngcc0.ɵɵinject(COOKIE_OPTIONS), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n};\n\nCookieOptionsProvider.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: CookieOptionsProvider,\n  factory: CookieOptionsProvider.ɵfac\n});\n/** @nocollapse */\n\nCookieOptionsProvider.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [COOKIE_OPTIONS]\n    }]\n  }, {\n    type: Injector\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CookieOptionsProvider, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [COOKIE_OPTIONS]\n      }]\n    }, {\n      type: ɵngcc0.Injector\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n\nvar CookieService = /*#__PURE__*/function () {\n  /**\n   * @param {?} _optionsProvider\n   */\n  function CookieService(_optionsProvider) {\n    _classCallCheck(this, CookieService);\n\n    this._optionsProvider = _optionsProvider;\n    this.options = this._optionsProvider.options;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CookieService, [{\n    key: \"cookieString\",\n    get: function get() {\n      return document.cookie || '';\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      document.cookie = val;\n    }\n    /**\n     * \\@name CookieService#get\n     *\n     * \\@description\n     * Returns the value of given cookie key.\n     *\n     * @param {?} key Id to use for lookup.\n     * @return {?} Raw cookie value.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this._cookieReader()[key];\n    }\n    /**\n     * \\@name CookieService#getObject\n     *\n     * \\@description\n     * Returns the deserialized value of given cookie key.\n     *\n     * @param {?} key Id to use for lookup.\n     * @return {?} Deserialized cookie value.\n     */\n\n  }, {\n    key: \"getObject\",\n    value: function getObject(key) {\n      /** @type {?} */\n      var value = this.get(key);\n      return value ? safeJsonParse(value) : value;\n    }\n    /**\n     * \\@name CookieService#getAll\n     *\n     * \\@description\n     * Returns a key value object with all the cookies.\n     *\n     * @return {?} All cookies\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this._cookieReader();\n    }\n    /**\n     * \\@name CookieService#put\n     *\n     * \\@description\n     * Sets a value for given cookie key.\n     *\n     * @param {?} key Id for the `value`.\n     * @param {?} value Raw value to be stored.\n     * @param {?=} options (Optional) Options object.\n     * @return {?}\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(key, value, options) {\n      this._cookieWriter()(key, value, options);\n    }\n    /**\n     * \\@name CookieService#putObject\n     *\n     * \\@description\n     * Serializes and sets a value for given cookie key.\n     *\n     * @param {?} key Id for the `value`.\n     * @param {?} value Value to be stored.\n     * @param {?=} options (Optional) Options object.\n     * @return {?}\n     */\n\n  }, {\n    key: \"putObject\",\n    value: function putObject(key, value, options) {\n      this.put(key, JSON.stringify(value), options);\n    }\n    /**\n     * \\@name CookieService#remove\n     *\n     * \\@description\n     * Remove given cookie.\n     *\n     * @param {?} key Id of the key-value pair to delete.\n     * @param {?=} options (Optional) Options object.\n     * @return {?}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(key, options) {\n      this._cookieWriter()(key, undefined, options);\n    }\n    /**\n     * \\@name CookieService#removeAll\n     *\n     * \\@description\n     * Remove all cookies.\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function removeAll(options) {\n      var _this = this;\n\n      /** @type {?} */\n      var cookies = this.getAll();\n      Object.keys(cookies).forEach(function (key) {\n        _this.remove(key, options);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cookieReader\",\n    value: function _cookieReader() {\n      /** @type {?} */\n      var lastCookies = {};\n      /** @type {?} */\n\n      var lastCookieString = '';\n      /** @type {?} */\n\n      var cookieArray;\n      /** @type {?} */\n\n      var cookie;\n      /** @type {?} */\n\n      var i;\n      /** @type {?} */\n\n      var index;\n      /** @type {?} */\n\n      var name;\n      /** @type {?} */\n\n      var currentCookieString = this.cookieString;\n\n      if (currentCookieString !== lastCookieString) {\n        lastCookieString = currentCookieString;\n        cookieArray = lastCookieString.split('; ');\n        lastCookies = {};\n\n        for (i = 0; i < cookieArray.length; i++) {\n          cookie = cookieArray[i];\n          index = cookie.indexOf('=');\n\n          if (index > 0) {\n            // ignore nameless cookies\n            name = safeDecodeURIComponent(cookie.substring(0, index)); // the first value that is seen for a cookie is the most\n            // specific one.  values for the same cookie name that\n            // follow are for less specific paths.\n\n            if (isBlank(lastCookies[name])) {\n              lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n            }\n          }\n        }\n      }\n\n      return lastCookies;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cookieWriter\",\n    value: function _cookieWriter() {\n      /** @type {?} */\n      var that = this;\n      return function (name, value, options) {\n        that.cookieString = that._buildCookieString(name, value, options);\n      };\n    }\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"_buildCookieString\",\n    value: function _buildCookieString(name, value, options) {\n      /** @type {?} */\n      var opts = mergeOptions(this.options, options);\n      /** @type {?} */\n\n      var expires = opts.expires;\n\n      if (isBlank(value)) {\n        expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n        value = '';\n      }\n\n      if (isString(expires)) {\n        expires = new Date(expires);\n      }\n      /** @type {?} */\n\n\n      var cookieValue = opts.storeUnencoded ? value : encodeURIComponent(value);\n      /** @type {?} */\n\n      var str = encodeURIComponent(name) + '=' + cookieValue;\n      str += opts.path ? ';path=' + opts.path : '';\n      str += opts.domain ? ';domain=' + opts.domain : '';\n      str += expires ? ';expires=' + expires.toUTCString() : '';\n      str += opts.secure ? ';secure' : '';\n      str += opts.httpOnly ? '; HttpOnly' : ''; // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n      // - 300 cookies\n      // - 20 cookies per unique domain\n      // - 4096 bytes per cookie\n\n      /** @type {?} */\n\n      var cookieLength = str.length + 1;\n\n      if (cookieLength > 4096) {\n        console.log(\"Cookie '\".concat(name, \"' possibly not set or overflowed because it was too large (\").concat(cookieLength, \" > 4096 bytes)!\"));\n      }\n\n      return str;\n    }\n  }]);\n\n  return CookieService;\n}();\n\nCookieService.ɵfac = function CookieService_Factory(t) {\n  return new (t || CookieService)(ɵngcc0.ɵɵinject(CookieOptionsProvider));\n};\n\nCookieService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: CookieService,\n  factory: CookieService.ɵfac\n});\n/** @nocollapse */\n\nCookieService.ctorParameters = function () {\n  return [{\n    type: CookieOptionsProvider\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CookieService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: CookieOptionsProvider\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n\nvar CookieBackendService = /*#__PURE__*/function (_CookieService) {\n  _inherits(CookieBackendService, _CookieService);\n\n  var _super = _createSuper(CookieBackendService);\n\n  /**\n   * @param {?} request\n   * @param {?} response\n   * @param {?} _optionsProvider\n   */\n  function CookieBackendService(request, response, _optionsProvider) {\n    var _this2;\n\n    _classCallCheck(this, CookieBackendService);\n\n    _this2 = _super.call(this, _optionsProvider);\n    _this2.request = request;\n    _this2.response = response;\n    return _this2;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CookieBackendService, [{\n    key: \"cookieString\",\n    get: function get() {\n      return this.request.cookie || '';\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this.request.cookie = val;\n      this.response.cookie = val;\n    }\n  }]);\n\n  return CookieBackendService;\n}(CookieService);\n\nCookieBackendService.ɵfac = function CookieBackendService_Factory(t) {\n  return new (t || CookieBackendService)(ɵngcc0.ɵɵinject(REQUEST), ɵngcc0.ɵɵinject(RESPONSE), ɵngcc0.ɵɵinject(CookieOptionsProvider));\n};\n\nCookieBackendService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: CookieBackendService,\n  factory: CookieBackendService.ɵfac\n});\n/** @nocollapse */\n\nCookieBackendService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [REQUEST]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [RESPONSE]\n    }]\n  }, {\n    type: CookieOptionsProvider\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CookieBackendService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [REQUEST]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [RESPONSE]\n      }]\n    }, {\n      type: CookieOptionsProvider\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} cookieOptionsProvider\n * @return {?}\n */\n\n\nfunction cookieServiceFactory(cookieOptionsProvider) {\n  return new CookieService(cookieOptionsProvider);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n\nvar CookieModule = /*#__PURE__*/function () {\n  function CookieModule() {\n    _classCallCheck(this, CookieModule);\n  }\n\n  _createClass(CookieModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\n     * Use this method in your root module to provide the CookieService\n     * @param {?=} options\n     * @return {?}\n     */\n    function forRoot() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: CookieModule,\n        providers: [{\n          provide: COOKIE_OPTIONS,\n          useValue: options\n        }, {\n          provide: CookieService,\n          useFactory: cookieServiceFactory,\n          deps: [CookieOptionsProvider]\n        }]\n      };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"forChild\",\n    value: function forChild() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: CookieModule,\n        providers: [{\n          provide: COOKIE_OPTIONS,\n          useValue: options\n        }, {\n          provide: CookieService,\n          useFactory: cookieServiceFactory,\n          deps: [CookieOptionsProvider]\n        }]\n      };\n    }\n  }]);\n\n  return CookieModule;\n}();\n\nCookieModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CookieModule\n});\nCookieModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CookieModule_Factory(t) {\n    return new (t || CookieModule)();\n  },\n  providers: [CookieOptionsProvider]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CookieModule, [{\n    type: NgModule,\n    args: [{\n      providers: [CookieOptionsProvider]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n\n\nexport { CookieService, CookieBackendService, COOKIE_OPTIONS, CookieOptionsProvider, cookieServiceFactory, isBlank, isPresent, isString, mergeOptions, safeDecodeURIComponent, safeJsonParse, CookieModule };","map":{"version":3,"sources":["ngx-cookie/lib/utils.ts","ngx-cookie/lib/cookie-options-provider.ts","ngx-cookie/lib/cookie.service.ts","ngx-cookie/lib/cookie-backend.service.ts","ngx-cookie/lib/cookie.factory.ts","ngx-cookie/lib/cookie.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { CookieOptions } from './cookie-options.model';\n\nexport function isBlank(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\nexport function isPresent(obj: any): boolean {\n  return obj !== undefined && obj !== null;\n}\n\nexport function isString(obj: any): obj is string {\n  return typeof obj === 'string';\n}\n\nexport function mergeOptions(oldOptions: CookieOptions, newOptions?: CookieOptions): CookieOptions {\n  if (!newOptions) {\n    return oldOptions;\n  }\n  return {\n    path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,\n    domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,\n    expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,\n    secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,\n    httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,\n    storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded,\n  };\n}\n\nexport function safeDecodeURIComponent(str: string) {\n  try {\n    return decodeURIComponent(str);\n  } catch (e) {\n    return str;\n  }\n}\n\nexport function safeJsonParse(str: string) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return str;\n  }\n}\n","import { Inject, Injectable, InjectionToken, Injector } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\n\nimport { CookieOptions } from './cookie-options.model';\nimport { mergeOptions } from './utils';\n\nexport const COOKIE_OPTIONS = new InjectionToken<CookieOptions>('COOKIE_OPTIONS');\n\n@Injectable()\nexport class CookieOptionsProvider {\n\n  private defaultOptions: CookieOptions;\n  private _options: CookieOptions;\n\n  constructor(@Inject(COOKIE_OPTIONS) options: CookieOptions = {},\n              private _injector: Injector) {\n    this.defaultOptions = {\n      path: this._injector.get(APP_BASE_HREF, '/'),\n      domain: null,\n      expires: null,\n      secure: false,\n      httpOnly: false\n    };\n    this._options = mergeOptions(this.defaultOptions, options);\n  }\n\n  get options(): CookieOptions {\n    return this._options;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { CookieOptionsProvider } from './cookie-options-provider';\nimport { CookieOptions } from './cookie-options.model';\nimport { isBlank, isString, mergeOptions, safeDecodeURIComponent, safeJsonParse } from './utils';\n\ndeclare interface Document {\n  cookie: string;\n}\ndeclare const document: Document;\n\nexport interface ICookieService {\n  get(key: string): string;\n  getObject(key: string): Object;\n  getAll(): Object;\n  put(key: string, value: string, options?: CookieOptions): void;\n  putObject(key: string, value: Object, options?: CookieOptions): void;\n  remove(key: string, options?: CookieOptions): void;\n  removeAll(options?: CookieOptions): void;\n}\n\n@Injectable()\nexport class CookieService implements ICookieService {\n\n  protected options: CookieOptions;\n\n  protected get cookieString(): string {\n    return document.cookie || '';\n  }\n\n  protected set cookieString(val: string) {\n    document.cookie = val;\n  }\n\n  constructor(private _optionsProvider: CookieOptionsProvider) {\n    this.options = this._optionsProvider.options;\n  }\n\n  /**\n   * @name CookieService#get\n   *\n   * @description\n   * Returns the value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Raw cookie value.\n   */\n  get(key: string): string {\n    return (<any>this._cookieReader())[key];\n  }\n\n  /**\n   * @name CookieService#getObject\n   *\n   * @description\n   * Returns the deserialized value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Deserialized cookie value.\n   */\n  getObject(key: string): Object {\n    const value = this.get(key);\n    return value ? safeJsonParse(value) : value;\n  }\n\n  /**\n   * @name CookieService#getAll\n   *\n   * @description\n   * Returns a key value object with all the cookies.\n   *\n   * @returns All cookies\n   */\n  getAll(): Object {\n    return <any>this._cookieReader();\n  }\n\n  /**\n   * @name CookieService#put\n   *\n   * @description\n   * Sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Raw value to be stored.\n   * @param options (Optional) Options object.\n   */\n  put(key: string, value: string, options?: CookieOptions) {\n    this._cookieWriter()(key, value, options);\n  }\n\n  /**\n   * @name CookieService#putObject\n   *\n   * @description\n   * Serializes and sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Value to be stored.\n   * @param options (Optional) Options object.\n   */\n  putObject(key: string, value: Object, options?: CookieOptions) {\n    this.put(key, JSON.stringify(value), options);\n  }\n\n  /**\n   * @name CookieService#remove\n   *\n   * @description\n   * Remove given cookie.\n   *\n   * @param key Id of the key-value pair to delete.\n   * @param options (Optional) Options object.\n   */\n  remove(key: string, options?: CookieOptions): void {\n    this._cookieWriter()(key, undefined, options);\n  }\n\n  /**\n   * @name CookieService#removeAll\n   *\n   * @description\n   * Remove all cookies.\n   */\n  removeAll(options?: CookieOptions): void {\n    const cookies = this.getAll();\n    Object.keys(cookies).forEach(key => {\n      this.remove(key, options);\n    });\n  }\n\n  private _cookieReader(): Object {\n    let lastCookies = {};\n    let lastCookieString = '';\n    let cookieArray: string[], cookie: string, i: number, index: number, name: string;\n    const currentCookieString = this.cookieString;\n    if (currentCookieString !== lastCookieString) {\n      lastCookieString = currentCookieString;\n      cookieArray = lastCookieString.split('; ');\n      lastCookies = {};\n      for (i = 0; i < cookieArray.length; i++) {\n        cookie = cookieArray[i];\n        index = cookie.indexOf('=');\n        if (index > 0) {  // ignore nameless cookies\n          name = safeDecodeURIComponent(cookie.substring(0, index));\n          // the first value that is seen for a cookie is the most\n          // specific one.  values for the same cookie name that\n          // follow are for less specific paths.\n          if (isBlank((<any>lastCookies)[name])) {\n            (<any>lastCookies)[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n          }\n        }\n      }\n    }\n    return lastCookies;\n  }\n\n  private _cookieWriter() {\n    const that = this;\n\n    return function (name: string, value: string, options?: CookieOptions) {\n      that.cookieString = that._buildCookieString(name, value, options);\n    };\n  }\n\n  private _buildCookieString(name: string, value: string, options?: CookieOptions): string {\n    const opts: CookieOptions = mergeOptions(this.options, options);\n    let expires: any = opts.expires;\n    if (isBlank(value)) {\n      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n      value = '';\n    }\n    if (isString(expires)) {\n      expires = new Date(expires);\n    }\n    const cookieValue = opts.storeUnencoded ? value : encodeURIComponent(value);\n    let str = encodeURIComponent(name) + '=' + cookieValue;\n    str += opts.path ? ';path=' + opts.path : '';\n    str += opts.domain ? ';domain=' + opts.domain : '';\n    str += expires ? ';expires=' + expires.toUTCString() : '';\n    str += opts.secure ? ';secure' : '';\n    str += opts.httpOnly ? '; HttpOnly' : '';\n\n    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n    // - 300 cookies\n    // - 20 cookies per unique domain\n    // - 4096 bytes per cookie\n    const cookieLength = str.length + 1;\n    if (cookieLength > 4096) {\n      console.log(`Cookie \\'${name}\\' possibly not set or overflowed because it was too large (${cookieLength} > 4096 bytes)!`);\n    }\n    return str;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';\n\nimport { CookieService } from './cookie.service';\nimport { CookieOptionsProvider } from './cookie-options-provider';\n\n@Injectable()\nexport class CookieBackendService extends CookieService {\n\n  constructor(@Inject(REQUEST) private request: any,\n              @Inject(RESPONSE) private response: any,\n              _optionsProvider: CookieOptionsProvider) {\n    super(_optionsProvider);\n  }\n\n  protected get cookieString(): string {\n    return this.request.cookie || '';\n  }\n\n  protected set cookieString(val: string) {\n    this.request.cookie = val;\n    this.response.cookie = val;\n  }\n}\n","import { CookieService } from './cookie.service';\nimport { CookieOptionsProvider } from './cookie-options-provider';\n\nexport function cookieServiceFactory(cookieOptionsProvider: CookieOptionsProvider): CookieService {\n  return new CookieService(cookieOptionsProvider);\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CookieOptionsProvider, COOKIE_OPTIONS } from './cookie-options-provider';\nimport { CookieService } from './cookie.service';\nimport { CookieOptions } from './cookie-options.model';\nimport { cookieServiceFactory } from './cookie.factory';\n\n@NgModule({\n  providers: [CookieOptionsProvider]\n})\nexport class CookieModule {\n  /**\n   * Use this method in your root module to provide the CookieService\n   */\n  static forRoot(options: CookieOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: CookieModule,\n      providers: [\n        {provide: COOKIE_OPTIONS, useValue: options},\n        {provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider]}\n      ]\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(options: CookieOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: CookieModule,\n      providers: [\n        {provide: COOKIE_OPTIONS, useValue: options},\n        {provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider]}\n      ]\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}