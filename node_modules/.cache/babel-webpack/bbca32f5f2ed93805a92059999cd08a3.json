{"ast":null,"code":"import _slicedToArray from \"/Users/zahangiralam/Desktop/Projects/Others/kona-sl/kona-sl-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _inherits from \"/Users/zahangiralam/Desktop/Projects/Others/kona-sl/kona-sl-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/zahangiralam/Desktop/Projects/Others/kona-sl/kona-sl-frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/zahangiralam/Desktop/Projects/Others/kona-sl/kona-sl-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/zahangiralam/Desktop/Projects/Others/kona-sl/kona-sl-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zahangiralam/Desktop/Projects/Others/kona-sl/kona-sl-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license Angular v7.2.16\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ɵgetDOM } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar BrowserXhr = /*#__PURE__*/function () {\n  function BrowserXhr() {\n    _classCallCheck(this, BrowserXhr);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(BrowserXhr, [{\n    key: \"build\",\n    value: function build() {\n      return new XMLHttpRequest();\n    }\n  }]);\n\n  return BrowserXhr;\n}();\n\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) {\n  return new (t || BrowserXhr)();\n};\n\nBrowserXhr.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BrowserXhr,\n  factory: BrowserXhr.ɵfac\n});\n/** @nocollapse */\n\nBrowserXhr.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @enum {number} */\n\n\nvar RequestMethod = {\n  Get: 0,\n  Post: 1,\n  Put: 2,\n  Delete: 3,\n  Options: 4,\n  Head: 5,\n  Patch: 6\n};\nRequestMethod[RequestMethod.Get] = 'Get';\nRequestMethod[RequestMethod.Post] = 'Post';\nRequestMethod[RequestMethod.Put] = 'Put';\nRequestMethod[RequestMethod.Delete] = 'Delete';\nRequestMethod[RequestMethod.Options] = 'Options';\nRequestMethod[RequestMethod.Head] = 'Head';\nRequestMethod[RequestMethod.Patch] = 'Patch';\n/** @enum {number} */\n\nvar ReadyState = {\n  Unsent: 0,\n  Open: 1,\n  HeadersReceived: 2,\n  Loading: 3,\n  Done: 4,\n  Cancelled: 5\n};\nReadyState[ReadyState.Unsent] = 'Unsent';\nReadyState[ReadyState.Open] = 'Open';\nReadyState[ReadyState.HeadersReceived] = 'HeadersReceived';\nReadyState[ReadyState.Loading] = 'Loading';\nReadyState[ReadyState.Done] = 'Done';\nReadyState[ReadyState.Cancelled] = 'Cancelled';\n/** @enum {number} */\n\nvar ResponseType = {\n  Basic: 0,\n  Cors: 1,\n  Default: 2,\n  Error: 3,\n  Opaque: 4\n};\nResponseType[ResponseType.Basic] = 'Basic';\nResponseType[ResponseType.Cors] = 'Cors';\nResponseType[ResponseType.Default] = 'Default';\nResponseType[ResponseType.Error] = 'Error';\nResponseType[ResponseType.Opaque] = 'Opaque';\n/** @enum {number} */\n\nvar ContentType = {\n  NONE: 0,\n  JSON: 1,\n  FORM: 2,\n  FORM_DATA: 3,\n  TEXT: 4,\n  BLOB: 5,\n  ARRAY_BUFFER: 6\n};\nContentType[ContentType.NONE] = 'NONE';\nContentType[ContentType.JSON] = 'JSON';\nContentType[ContentType.FORM] = 'FORM';\nContentType[ContentType.FORM_DATA] = 'FORM_DATA';\nContentType[ContentType.TEXT] = 'TEXT';\nContentType[ContentType.BLOB] = 'BLOB';\nContentType[ContentType.ARRAY_BUFFER] = 'ARRAY_BUFFER';\n/** @enum {number} */\n\nvar ResponseContentType = {\n  Text: 0,\n  Json: 1,\n  ArrayBuffer: 2,\n  Blob: 3\n};\nResponseContentType[ResponseContentType.Text] = 'Text';\nResponseContentType[ResponseContentType.Json] = 'Json';\nResponseContentType[ResponseContentType.ArrayBuffer] = 'ArrayBuffer';\nResponseContentType[ResponseContentType.Blob] = 'Blob';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nvar Headers = /*#__PURE__*/function () {\n  // TODO(vicb): any -> string|string[]\n\n  /**\n   * @param {?=} headers\n   */\n  function Headers(headers) {\n    var _this = this;\n\n    _classCallCheck(this, Headers);\n\n    /**\n     * \\@internal header names are lower case\n     */\n    this._headers = new Map();\n    /**\n     * \\@internal map lower case names to actual names\n     */\n\n    this._normalizedNames = new Map();\n\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach(function (values, name) {\n        values.forEach(function (value) {\n          return _this.append(name, value);\n        });\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach(function (name) {\n      /** @type {?} */\n      var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n\n      _this.delete(name);\n\n      values.forEach(function (value) {\n        return _this.append(name, value);\n      });\n    });\n  }\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   * @param {?} headersString\n   * @return {?}\n   */\n\n\n  _createClass(Headers, [{\n    key: \"append\",\n    value:\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function append(name, value) {\n      /** @type {?} */\n      var values = this.getAll(name);\n\n      if (values === null) {\n        this.set(name, value);\n      } else {\n        values.push(value);\n      }\n    }\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      /** @type {?} */\n      var lcName = name.toLowerCase();\n\n      this._normalizedNames.delete(lcName);\n\n      this._headers.delete(lcName);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var _this2 = this;\n\n      this._headers.forEach(function (values, lcName) {\n        return fn(values, _this2._normalizedNames.get(lcName), _this2._headers);\n      });\n    }\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      /** @type {?} */\n      var values = this.getAll(name);\n\n      if (values === null) {\n        return null;\n      }\n\n      return values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return this._headers.has(name.toLowerCase());\n    }\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return Array.from(this._normalizedNames.values());\n    }\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      if (Array.isArray(value)) {\n        if (value.length) {\n          this._headers.set(name.toLowerCase(), [value.join(',')]);\n        }\n      } else {\n        this._headers.set(name.toLowerCase(), [value]);\n      }\n\n      this.mayBeSetNormalizedName(name);\n    }\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n\n  }, {\n    key: \"values\",\n    value: function values() {\n      return Array.from(this._headers.values());\n    }\n    /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _this3 = this;\n\n      /** @type {?} */\n      var serialized = {};\n\n      this._headers.forEach(function (values, name) {\n        /** @type {?} */\n        var split = [];\n        values.forEach(function (v) {\n          return split.push.apply(split, _toConsumableArray(v.split(',')));\n        });\n        serialized[_this3._normalizedNames.get(name)] = split;\n      });\n\n      return serialized;\n    }\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    }\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      throw new Error('\"entries\" method is not implemented on Headers class');\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"mayBeSetNormalizedName\",\n    value: function mayBeSetNormalizedName(name) {\n      /** @type {?} */\n      var lcName = name.toLowerCase();\n\n      if (!this._normalizedNames.has(lcName)) {\n        this._normalizedNames.set(lcName, name);\n      }\n    }\n  }], [{\n    key: \"fromResponseHeaderString\",\n    value: function fromResponseHeaderString(headersString) {\n      /** @type {?} */\n      var headers = new Headers();\n      headersString.split('\\n').forEach(function (line) {\n        /** @type {?} */\n        var index = line.indexOf(':');\n\n        if (index > 0) {\n          /** @type {?} */\n          var name = line.slice(0, index);\n          /** @type {?} */\n\n          var value = line.slice(index + 1).trim();\n          headers.set(name, value);\n        }\n      });\n      return headers;\n    }\n  }]);\n\n  return Headers;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar ResponseOptions = /*#__PURE__*/function () {\n  /**\n   * @param {?=} opts\n   */\n  function ResponseOptions() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ResponseOptions);\n\n    var body = opts.body,\n        status = opts.status,\n        headers = opts.headers,\n        statusText = opts.statusText,\n        type = opts.type,\n        url = opts.url;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n  /**\n   * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n   * override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * This may be useful when sharing a base `ResponseOptions` object inside tests,\n   * where certain properties may change from test to test.\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * import {ResponseOptions, Response} from '\\@angular/http';\n   *\n   * var options = new ResponseOptions({\n   *   body: {name: 'Jeff'}\n   * });\n   * var res = new Response(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('options.url:', options.url); // null\n   * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n   * console.log('res.url:', res.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(ResponseOptions, [{\n    key: \"merge\",\n    value: function merge(options) {\n      return new ResponseOptions({\n        body: options && options.body != null ? options.body : this.body,\n        status: options && options.status != null ? options.status : this.status,\n        headers: options && options.headers != null ? options.headers : this.headers,\n        statusText: options && options.statusText != null ? options.statusText : this.statusText,\n        type: options && options.type != null ? options.type : this.type,\n        url: options && options.url != null ? options.url : this.url\n      });\n    }\n  }]);\n\n  return ResponseOptions;\n}();\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar BaseResponseOptions = /*#__PURE__*/function (_ResponseOptions) {\n  _inherits(BaseResponseOptions, _ResponseOptions);\n\n  var _super = _createSuper(BaseResponseOptions);\n\n  function BaseResponseOptions() {\n    _classCallCheck(this, BaseResponseOptions);\n\n    return _super.call(this, {\n      status: 200,\n      statusText: 'Ok',\n      type: ResponseType.Default,\n      headers: new Headers()\n    });\n  }\n\n  return BaseResponseOptions;\n}(ResponseOptions);\n\nBaseResponseOptions.ɵfac = function BaseResponseOptions_Factory(t) {\n  return new (t || BaseResponseOptions)();\n};\n\nBaseResponseOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BaseResponseOptions,\n  factory: BaseResponseOptions.ɵfac\n});\n/** @nocollapse */\n\nBaseResponseOptions.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BaseResponseOptions, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\n\n\nvar ConnectionBackend = function ConnectionBackend() {\n  _classCallCheck(this, ConnectionBackend);\n};\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\n\n\nvar Connection = function Connection() {\n  _classCallCheck(this, Connection);\n};\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\n\n\nvar XSRFStrategy = function XSRFStrategy() {\n  _classCallCheck(this, XSRFStrategy);\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} method\n * @return {?}\n */\n\n\nfunction normalizeMethodName(method) {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n\n    case 'POST':\n      return RequestMethod.Post;\n\n    case 'PUT':\n      return RequestMethod.Put;\n\n    case 'DELETE':\n      return RequestMethod.Delete;\n\n    case 'OPTIONS':\n      return RequestMethod.Options;\n\n    case 'HEAD':\n      return RequestMethod.Head;\n\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n\n  throw new Error(\"Invalid request method. The method \\\"\".concat(method, \"\\\" is not supported.\"));\n}\n/** @type {?} */\n\n\nvar isSuccess = function isSuccess(status) {\n  return status >= 200 && status < 300;\n};\n/**\n * @param {?} xhr\n * @return {?}\n */\n\n\nfunction getResponseURL(xhr) {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n\n  return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n\nfunction stringToArrayBuffer(input) {\n  /** @type {?} */\n  var view = new Uint16Array(input.length);\n\n  for (var i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n\n  return view.buffer;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @param {?=} rawParams\n * @return {?}\n */\n\n\nfunction paramParser() {\n  var rawParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  /** @type {?} */\n  var map = new Map();\n\n  if (rawParams.length > 0) {\n    /** @type {?} */\n    var params = rawParams.split('&');\n    params.forEach(function (param) {\n      /** @type {?} */\n      var eqIdx = param.indexOf('=');\n\n      var _ref = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)],\n          _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          val = _ref2[1];\n      /** @type {?} */\n\n\n      var list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n\n  return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n *\n */\n\n\nvar QueryEncoder = /*#__PURE__*/function () {\n  function QueryEncoder() {\n    _classCallCheck(this, QueryEncoder);\n  }\n\n  _createClass(QueryEncoder, [{\n    key: \"encodeKey\",\n    value:\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    function encodeKey(key) {\n      return standardEncoding(key);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"encodeValue\",\n    value: function encodeValue(value) {\n      return standardEncoding(value);\n    }\n  }]);\n\n  return QueryEncoder;\n}();\n/**\n * @param {?} v\n * @return {?}\n */\n\n\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar URLSearchParams = /*#__PURE__*/function () {\n  /**\n   * @param {?=} rawParams\n   * @param {?=} queryEncoder\n   */\n  function URLSearchParams() {\n    var rawParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var queryEncoder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new QueryEncoder();\n\n    _classCallCheck(this, URLSearchParams);\n\n    this.rawParams = rawParams;\n    this.queryEncoder = queryEncoder;\n    this.paramsMap = paramParser(rawParams);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(URLSearchParams, [{\n    key: \"clone\",\n    value: function clone() {\n      /** @type {?} */\n      var clone = new URLSearchParams('', this.queryEncoder);\n      clone.appendAll(this);\n      return clone;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(param) {\n      return this.paramsMap.has(param);\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(param) {\n      /** @type {?} */\n      var storedParam = this.paramsMap.get(param);\n      return Array.isArray(storedParam) ? storedParam[0] : null;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(param) {\n      return this.paramsMap.get(param) || [];\n    }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(param, val) {\n      if (val === void 0 || val === null) {\n        this.delete(param);\n        return;\n      }\n      /** @type {?} */\n\n\n      var list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(val);\n      this.paramsMap.set(param, list);\n    } // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"setAll\",\n    value: function setAll(searchParams) {\n      var _this4 = this;\n\n      searchParams.paramsMap.forEach(function (value, param) {\n        /** @type {?} */\n        var list = _this4.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(value[0]);\n\n        _this4.paramsMap.set(param, list);\n      });\n    }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(param, val) {\n      if (val === void 0 || val === null) return;\n      /** @type {?} */\n\n      var list = this.paramsMap.get(param) || [];\n      list.push(val);\n      this.paramsMap.set(param, list);\n    } // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"appendAll\",\n    value: function appendAll(searchParams) {\n      var _this5 = this;\n\n      searchParams.paramsMap.forEach(function (value, param) {\n        /** @type {?} */\n        var list = _this5.paramsMap.get(param) || [];\n\n        for (var i = 0; i < value.length; ++i) {\n          list.push(value[i]);\n        }\n\n        _this5.paramsMap.set(param, list);\n      });\n    } // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"replaceAll\",\n    value: function replaceAll(searchParams) {\n      var _this6 = this;\n\n      searchParams.paramsMap.forEach(function (value, param) {\n        /** @type {?} */\n        var list = _this6.paramsMap.get(param) || [];\n        list.length = 0;\n\n        for (var i = 0; i < value.length; ++i) {\n          list.push(value[i]);\n        }\n\n        _this6.paramsMap.set(param, list);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var _this7 = this;\n\n      /** @type {?} */\n      var paramsList = [];\n      this.paramsMap.forEach(function (values, k) {\n        values.forEach(function (v) {\n          return paramsList.push(_this7.queryEncoder.encodeKey(k) + '=' + _this7.queryEncoder.encodeValue(v));\n        });\n      });\n      return paramsList.join('&');\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(param) {\n      this.paramsMap.delete(param);\n    }\n  }]);\n\n  return URLSearchParams;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\n\n\nvar Body = /*#__PURE__*/function () {\n  function Body() {\n    _classCallCheck(this, Body);\n  }\n\n  _createClass(Body, [{\n    key: \"json\",\n    value:\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    function json() {\n      if (typeof this._body === 'string') {\n        return JSON.parse(this._body);\n      }\n\n      if (this._body instanceof ArrayBuffer) {\n        return JSON.parse(this.text());\n      }\n\n      return this._body;\n    }\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n\n  }, {\n    key: \"text\",\n    value: function text() {\n      var encodingHint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'legacy';\n\n      if (this._body instanceof URLSearchParams) {\n        return this._body.toString();\n      }\n\n      if (this._body instanceof ArrayBuffer) {\n        switch (encodingHint) {\n          case 'legacy':\n            return String.fromCharCode.apply(null, new Uint16Array(this._body));\n\n          case 'iso-8859':\n            return String.fromCharCode.apply(null, new Uint8Array(this._body));\n\n          default:\n            throw new Error(\"Invalid value for encodingHint: \".concat(encodingHint));\n        }\n      }\n\n      if (this._body == null) {\n        return '';\n      }\n\n      if (typeof this._body === 'object') {\n        return JSON.stringify(this._body, null, 2);\n      }\n\n      return this._body.toString();\n    }\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n\n  }, {\n    key: \"arrayBuffer\",\n    value: function arrayBuffer() {\n      if (this._body instanceof ArrayBuffer) {\n        return this._body;\n      }\n\n      return stringToArrayBuffer(this.text());\n    }\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n\n  }, {\n    key: \"blob\",\n    value: function blob() {\n      if (this._body instanceof Blob) {\n        return this._body;\n      }\n\n      if (this._body instanceof ArrayBuffer) {\n        return new Blob([this._body]);\n      }\n\n      throw new Error('The request body isn\\'t either a blob or an array buffer');\n    }\n  }]);\n\n  return Body;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar Response = /*#__PURE__*/function (_Body) {\n  _inherits(Response, _Body);\n\n  var _super2 = _createSuper(Response);\n\n  /**\n   * @param {?} responseOptions\n   */\n  function Response(responseOptions) {\n    var _this8;\n\n    _classCallCheck(this, Response);\n\n    _this8 = _super2.call(this);\n    _this8._body = responseOptions.body;\n    _this8.status = responseOptions.status;\n    _this8.ok = _this8.status >= 200 && _this8.status <= 299;\n    _this8.statusText = responseOptions.statusText;\n    _this8.headers = responseOptions.headers;\n    _this8.type = responseOptions.type;\n    _this8.url = responseOptions.url;\n    return _this8;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(Response, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"Response with status: \".concat(this.status, \" \").concat(this.statusText, \" for URL: \").concat(this.url);\n    }\n  }]);\n\n  return Response;\n}(Body);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar _nextRequestId = 0;\n/** @type {?} */\n\nvar JSONP_HOME = '__ng_jsonp__';\n/** @type {?} */\n\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\n\nfunction _getJsonpConnections() {\n  /** @type {?} */\n  var w = typeof window == 'object' ? window : {};\n\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n\n  return _jsonpConnections;\n} // Make sure not to evaluate this in a non-browser environment!\n\n\nvar BrowserJsonp = /*#__PURE__*/function () {\n  function BrowserJsonp() {\n    _classCallCheck(this, BrowserJsonp);\n  }\n\n  _createClass(BrowserJsonp, [{\n    key: \"build\",\n    value: // Construct a <script> element with the specified URL\n\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function build(url) {\n      /** @type {?} */\n      var node = document.createElement('script');\n      node.src = url;\n      return node;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"nextRequestID\",\n    value: function nextRequestID() {\n      return \"__req\".concat(_nextRequestId++);\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n\n  }, {\n    key: \"requestCallback\",\n    value: function requestCallback(id) {\n      return \"\".concat(JSONP_HOME, \".\").concat(id, \".finished\");\n    }\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n\n  }, {\n    key: \"exposeConnection\",\n    value: function exposeConnection(id, connection) {\n      /** @type {?} */\n      var connections = _getJsonpConnections();\n\n      connections[id] = connection;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeConnection\",\n    value: function removeConnection(id) {\n      /** @type {?} */\n      var connections = _getJsonpConnections();\n\n      connections[id] = null;\n    } // Attach the <script> element to the DOM\n\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(node) {\n      document.body.appendChild(node);\n    } // Remove <script> element from the DOM\n\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup(node) {\n      if (node.parentNode) {\n        node.parentNode.removeChild(node);\n      }\n    }\n  }]);\n\n  return BrowserJsonp;\n}();\n\nBrowserJsonp.ɵfac = function BrowserJsonp_Factory(t) {\n  return new (t || BrowserJsonp)();\n};\n\nBrowserJsonp.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BrowserJsonp,\n  factory: BrowserJsonp.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BrowserJsonp, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n/** @type {?} */\n\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nvar JSONPConnection = /*#__PURE__*/function () {\n  /**\n   * \\@internal\n   * @param {?} req\n   * @param {?} _dom\n   * @param {?=} baseResponseOptions\n   */\n  function JSONPConnection(req, _dom, baseResponseOptions) {\n    var _this9 = this;\n\n    _classCallCheck(this, JSONPConnection);\n\n    this._dom = _dom;\n    this.baseResponseOptions = baseResponseOptions;\n    this._finished = false;\n\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n\n    this.request = req;\n    this.response = new Observable(function (responseObserver) {\n      _this9.readyState = ReadyState.Loading;\n      /** @type {?} */\n\n      var id = _this9._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, _this9); // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n\n      /** @type {?} */\n\n\n      var callback = _dom.requestCallback(_this9._id);\n      /** @type {?} */\n\n\n      var url = req.url;\n\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', \"=\".concat(callback, \"&\"));\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + \"=\".concat(callback);\n      }\n      /** @type {?} */\n\n\n      var script = _this9._script = _dom.build(url);\n      /** @type {?} */\n\n\n      var onLoad = function onLoad(event) {\n        if (_this9.readyState === ReadyState.Cancelled) return;\n        _this9.readyState = ReadyState.Done;\n\n        _dom.cleanup(script);\n\n        if (!_this9._finished) {\n          /** @type {?} */\n          var _responseOptions = new ResponseOptions({\n            body: JSONP_ERR_NO_CALLBACK,\n            type: ResponseType.Error,\n            url: url\n          });\n\n          if (baseResponseOptions) {\n            _responseOptions = baseResponseOptions.merge(_responseOptions);\n          }\n\n          responseObserver.error(new Response(_responseOptions));\n          return;\n        }\n        /** @type {?} */\n\n\n        var responseOptions = new ResponseOptions({\n          body: _this9._responseData,\n          url: url\n        });\n\n        if (_this9.baseResponseOptions) {\n          responseOptions = _this9.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n      /** @type {?} */\n\n\n      var onError = function onError(error) {\n        if (_this9.readyState === ReadyState.Cancelled) return;\n        _this9.readyState = ReadyState.Done;\n\n        _dom.cleanup(script);\n        /** @type {?} */\n\n\n        var responseOptions = new ResponseOptions({\n          body: error.message,\n          type: ResponseType.Error\n        });\n\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return function () {\n        _this9.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n\n        _this9._dom.cleanup(script);\n      };\n    });\n  }\n  /**\n   * Callback called when the JSONP request completes, to notify the application\n   * of the new data.\n   * @param {?=} data\n   * @return {?}\n   */\n\n\n  _createClass(JSONPConnection, [{\n    key: \"finished\",\n    value: function finished(data) {\n      // Don't leak connections\n      this._finished = true;\n\n      this._dom.removeConnection(this._id);\n\n      if (this.readyState === ReadyState.Cancelled) return;\n      this._responseData = data;\n    }\n  }]);\n\n  return JSONPConnection;\n}();\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar JSONPBackend = /*#__PURE__*/function (_ConnectionBackend) {\n  _inherits(JSONPBackend, _ConnectionBackend);\n\n  var _super3 = _createSuper(JSONPBackend);\n\n  /**\n   * \\@internal\n   * @param {?} _browserJSONP\n   * @param {?} _baseResponseOptions\n   */\n  function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n    var _this10;\n\n    _classCallCheck(this, JSONPBackend);\n\n    _this10 = _super3.call(this);\n    _this10._browserJSONP = _browserJSONP;\n    _this10._baseResponseOptions = _baseResponseOptions;\n    return _this10;\n  }\n  /**\n   * @param {?} request\n   * @return {?}\n   */\n\n\n  _createClass(JSONPBackend, [{\n    key: \"createConnection\",\n    value: function createConnection(request) {\n      return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    }\n  }]);\n\n  return JSONPBackend;\n}(ConnectionBackend);\n\nJSONPBackend.ɵfac = function JSONPBackend_Factory(t) {\n  return new (t || JSONPBackend)(ɵngcc0.ɵɵinject(BrowserJsonp), ɵngcc0.ɵɵinject(ResponseOptions));\n};\n\nJSONPBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: JSONPBackend,\n  factory: JSONPBackend.ɵfac\n});\n/** @nocollapse */\n\nJSONPBackend.ctorParameters = function () {\n  return [{\n    type: BrowserJsonp\n  }, {\n    type: ResponseOptions\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(JSONPBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: BrowserJsonp\n    }, {\n      type: ResponseOptions\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nvar XHRConnection = /*#__PURE__*/function () {\n  /**\n   * @param {?} req\n   * @param {?} browserXHR\n   * @param {?=} baseResponseOptions\n   */\n  function XHRConnection(req, browserXHR, baseResponseOptions) {\n    var _this11 = this;\n\n    _classCallCheck(this, XHRConnection);\n\n    this.request = req;\n    this.response = new Observable(function (responseObserver) {\n      /** @type {?} */\n      var _xhr = browserXHR.build();\n\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      } // load event handler\n\n      /** @type {?} */\n\n\n      var onLoad = function onLoad() {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n\n        /** @type {?} */\n        var status = _xhr.status === 1223 ? 204 : _xhr.status;\n        /** @type {?} */\n\n        var body = null; // HTTP 204 means no content\n\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = typeof _xhr.response === 'undefined' ? _xhr.responseText : _xhr.response; // Implicitly strip a potential XSSI prefix.\n\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        } // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n\n\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n        /** @type {?} */\n\n\n        var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders()); // IE 9 does not provide the way to get URL of response\n\n        /** @type {?} */\n\n        var url = getResponseURL(_xhr) || req.url;\n        /** @type {?} */\n\n        var statusText = _xhr.statusText || 'OK';\n        /** @type {?} */\n\n        var responseOptions = new ResponseOptions({\n          body: body,\n          status: status,\n          headers: headers,\n          statusText: statusText,\n          url: url\n        });\n\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        /** @type {?} */\n\n\n        var response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n\n        if (response.ok) {\n          responseObserver.next(response); // TODO(gdi2290): defer complete if array buffer until done\n\n          responseObserver.complete();\n          return;\n        }\n\n        responseObserver.error(response);\n      }; // error event handler\n\n      /** @type {?} */\n\n\n      var onError = function onError(err) {\n        /** @type {?} */\n        var responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText\n        });\n\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      _this11.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n\n      req.headers.forEach(function (values, name) {\n        return _xhr.setRequestHeader(name, values.join(','));\n      }); // Select the correct buffer type to store the response\n\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(_this11.request.getBody());\n\n      return function () {\n        _xhr.removeEventListener('load', onLoad);\n\n        _xhr.removeEventListener('error', onError);\n\n        _xhr.abort();\n      };\n    });\n  }\n  /**\n   * @param {?} req\n   * @param {?} _xhr\n   * @return {?}\n   */\n\n\n  _createClass(XHRConnection, [{\n    key: \"setDetectedContentType\",\n    value: function setDetectedContentType(req\n    /** TODO Request */\n    , _xhr\n    /** XMLHttpRequest */\n    ) {\n      // Skip if a custom Content-Type header is provided\n      if (req.headers != null && req.headers.get('Content-Type') != null) {\n        return;\n      } // Set the detected content type\n\n\n      switch (req.contentType) {\n        case ContentType.NONE:\n          break;\n\n        case ContentType.JSON:\n          _xhr.setRequestHeader('content-type', 'application/json');\n\n          break;\n\n        case ContentType.FORM:\n          _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n\n          break;\n\n        case ContentType.TEXT:\n          _xhr.setRequestHeader('content-type', 'text/plain');\n\n          break;\n\n        case ContentType.BLOB:\n          /** @type {?} */\n          var blob = req.blob();\n\n          if (blob.type) {\n            _xhr.setRequestHeader('content-type', blob.type);\n          }\n\n          break;\n      }\n    }\n  }]);\n\n  return XHRConnection;\n}();\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar CookieXSRFStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?=} _cookieName\n   * @param {?=} _headerName\n   */\n  function CookieXSRFStrategy() {\n    var _cookieName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'XSRF-TOKEN';\n\n    var _headerName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'X-XSRF-TOKEN';\n\n    _classCallCheck(this, CookieXSRFStrategy);\n\n    this._cookieName = _cookieName;\n    this._headerName = _headerName;\n  }\n  /**\n   * @param {?} req\n   * @return {?}\n   */\n\n\n  _createClass(CookieXSRFStrategy, [{\n    key: \"configureRequest\",\n    value: function configureRequest(req) {\n      /** @type {?} */\n      var xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n\n      if (xsrfToken) {\n        req.headers.set(this._headerName, xsrfToken);\n      }\n    }\n  }]);\n\n  return CookieXSRFStrategy;\n}();\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar XHRBackend = /*#__PURE__*/function () {\n  /**\n   * @param {?} _browserXHR\n   * @param {?} _baseResponseOptions\n   * @param {?} _xsrfStrategy\n   */\n  function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n    _classCallCheck(this, XHRBackend);\n\n    this._browserXHR = _browserXHR;\n    this._baseResponseOptions = _baseResponseOptions;\n    this._xsrfStrategy = _xsrfStrategy;\n  }\n  /**\n   * @param {?} request\n   * @return {?}\n   */\n\n\n  _createClass(XHRBackend, [{\n    key: \"createConnection\",\n    value: function createConnection(request) {\n      this._xsrfStrategy.configureRequest(request);\n\n      return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    }\n  }]);\n\n  return XHRBackend;\n}();\n\nXHRBackend.ɵfac = function XHRBackend_Factory(t) {\n  return new (t || XHRBackend)(ɵngcc0.ɵɵinject(BrowserXhr), ɵngcc0.ɵɵinject(ResponseOptions), ɵngcc0.ɵɵinject(XSRFStrategy));\n};\n\nXHRBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: XHRBackend,\n  factory: XHRBackend.ɵfac\n});\n/** @nocollapse */\n\nXHRBackend.ctorParameters = function () {\n  return [{\n    type: BrowserXhr\n  }, {\n    type: ResponseOptions\n  }, {\n    type: XSRFStrategy\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(XHRBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: BrowserXhr\n    }, {\n      type: ResponseOptions\n    }, {\n      type: XSRFStrategy\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar RequestOptions = /*#__PURE__*/function () {\n  // TODO(Dzmitry): remove search when this.search is removed\n\n  /**\n   * @param {?=} opts\n   */\n  function RequestOptions() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RequestOptions);\n\n    var method = opts.method,\n        headers = opts.headers,\n        body = opts.body,\n        url = opts.url,\n        search = opts.search,\n        params = opts.params,\n        withCredentials = opts.withCredentials,\n        responseType = opts.responseType;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n   *\n   * const options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * const req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(RequestOptions, [{\n    key: \"search\",\n    get:\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @return {?}\n     */\n    function get() {\n      return this.params;\n    }\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @param {?} params\n     * @return {?}\n     */\n    ,\n    set: function set(params) {\n      this.params = params;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(options) {\n      return new RequestOptions({\n        method: options && options.method != null ? options.method : this.method,\n        headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n        body: options && options.body != null ? options.body : this.body,\n        url: options && options.url != null ? options.url : this.url,\n        params: options && this._mergeSearchParams(options.params || options.search),\n        withCredentials: options && options.withCredentials != null ? options.withCredentials : this.withCredentials,\n        responseType: options && options.responseType != null ? options.responseType : this.responseType\n      });\n    }\n    /**\n     * @private\n     * @param {?=} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"_mergeSearchParams\",\n    value: function _mergeSearchParams(params) {\n      if (!params) return this.params;\n\n      if (params instanceof URLSearchParams) {\n        return params.clone();\n      }\n\n      if (typeof params === 'string') {\n        return new URLSearchParams(params);\n      }\n\n      return this._parseParams(params);\n    }\n    /**\n     * @private\n     * @param {?=} objParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"_parseParams\",\n    value: function _parseParams() {\n      var _this12 = this;\n\n      var objParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /** @type {?} */\n      var params = new URLSearchParams();\n      Object.keys(objParams).forEach(function (key) {\n        /** @type {?} */\n        var value = objParams[key];\n\n        if (Array.isArray(value)) {\n          value.forEach(function (item) {\n            return _this12._appendParam(key, item, params);\n          });\n        } else {\n          _this12._appendParam(key, value, params);\n        }\n      });\n      return params;\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"_appendParam\",\n    value: function _appendParam(key, value, params) {\n      if (typeof value !== 'string') {\n        value = JSON.stringify(value);\n      }\n\n      params.append(key, value);\n    }\n  }]);\n\n  return RequestOptions;\n}();\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar BaseRequestOptions = /*#__PURE__*/function (_RequestOptions) {\n  _inherits(BaseRequestOptions, _RequestOptions);\n\n  var _super4 = _createSuper(BaseRequestOptions);\n\n  function BaseRequestOptions() {\n    _classCallCheck(this, BaseRequestOptions);\n\n    return _super4.call(this, {\n      method: RequestMethod.Get,\n      headers: new Headers()\n    });\n  }\n\n  return BaseRequestOptions;\n}(RequestOptions);\n\nBaseRequestOptions.ɵfac = function BaseRequestOptions_Factory(t) {\n  return new (t || BaseRequestOptions)();\n};\n\nBaseRequestOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BaseRequestOptions,\n  factory: BaseRequestOptions.ɵfac\n});\n/** @nocollapse */\n\nBaseRequestOptions.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BaseRequestOptions, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jeffbcross): properly implement body accessors\n\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar Request = /*#__PURE__*/function (_Body2) {\n  _inherits(Request, _Body2);\n\n  var _super5 = _createSuper(Request);\n\n  /**\n   * @param {?} requestOptions\n   */\n  function Request(requestOptions) {\n    var _this13;\n\n    _classCallCheck(this, Request);\n\n    _this13 = _super5.call(this); // TODO: assert that url is present\n\n    /** @type {?} */\n\n    var url = requestOptions.url;\n    _this13.url = requestOptions.url;\n    /** @type {?} */\n\n    var paramsArg = requestOptions.params || requestOptions.search;\n\n    if (paramsArg) {\n      /** @type {?} */\n      var params;\n\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n\n      if (params.length > 0) {\n        /** @type {?} */\n        var prefix = '?';\n\n        if (_this13.url.indexOf('?') != -1) {\n          prefix = _this13.url[_this13.url.length - 1] == '&' ? '' : '&';\n        } // TODO: just delete search-query-looking string in url?\n\n\n        _this13.url = url + prefix + params;\n      }\n    }\n\n    _this13._body = requestOptions.body;\n    _this13.method = normalizeMethodName(requestOptions.method); // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n\n    _this13.headers = new Headers(requestOptions.headers);\n    _this13.contentType = _this13.detectContentType();\n    _this13.withCredentials = requestOptions.withCredentials;\n    _this13.responseType = requestOptions.responseType;\n    return _this13;\n  }\n  /**\n   * Returns the content type enum based on header options.\n   * @return {?}\n   */\n\n\n  _createClass(Request, [{\n    key: \"detectContentType\",\n    value: function detectContentType() {\n      switch (this.headers.get('content-type')) {\n        case 'application/json':\n          return ContentType.JSON;\n\n        case 'application/x-www-form-urlencoded':\n          return ContentType.FORM;\n\n        case 'multipart/form-data':\n          return ContentType.FORM_DATA;\n\n        case 'text/plain':\n        case 'text/html':\n          return ContentType.TEXT;\n\n        case 'application/octet-stream':\n          return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n\n        default:\n          return this.detectContentTypeFromBody();\n      }\n    }\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detectContentTypeFromBody\",\n    value: function detectContentTypeFromBody() {\n      if (this._body == null) {\n        return ContentType.NONE;\n      } else if (this._body instanceof URLSearchParams) {\n        return ContentType.FORM;\n      } else if (this._body instanceof FormData) {\n        return ContentType.FORM_DATA;\n      } else if (this._body instanceof Blob$1) {\n        return ContentType.BLOB;\n      } else if (this._body instanceof ArrayBuffer$1) {\n        return ContentType.ARRAY_BUFFER;\n      } else if (this._body && typeof this._body === 'object') {\n        return ContentType.JSON;\n      } else {\n        return ContentType.TEXT;\n      }\n    }\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getBody\",\n    value: function getBody() {\n      switch (this.contentType) {\n        case ContentType.JSON:\n          return this.text();\n\n        case ContentType.FORM:\n          return this.text();\n\n        case ContentType.FORM_DATA:\n          return this._body;\n\n        case ContentType.TEXT:\n          return this.text();\n\n        case ContentType.BLOB:\n          return this.blob();\n\n        case ContentType.ARRAY_BUFFER:\n          return this.arrayBuffer();\n\n        default:\n          return null;\n      }\n    }\n  }]);\n\n  return Request;\n}(Body);\n/**\n * @param {?} params\n * @return {?}\n */\n\n\nfunction urlEncodeParams(params) {\n  /** @type {?} */\n  var searchParams = new URLSearchParams();\n  Object.keys(params).forEach(function (key) {\n    /** @type {?} */\n    var value = params[key];\n\n    if (value && Array.isArray(value)) {\n      value.forEach(function (element) {\n        return searchParams.append(key, element.toString());\n      });\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n/** @type {?} */\n\n\nvar noop = function noop() {};\n/** @type {?} */\n\n\nvar w = typeof window == 'object' ? window : noop;\n/** @type {?} */\n\nvar FormData = w['FormData'] || noop;\n/** @type {?} */\n\nvar Blob$1 = w['Blob'] || noop;\n/** @type {?} */\n\nvar ArrayBuffer$1 = w['ArrayBuffer'] || noop;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\n\nfunction httpRequest(backend, request) {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\n\n\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n  /** @type {?} */\n  var newOptions = defaultOpts;\n\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    }));\n  }\n\n  return newOptions.merge(new RequestOptions({\n    method: method,\n    url: url\n  }));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar Http = /*#__PURE__*/function () {\n  /**\n   * @param {?} _backend\n   * @param {?} _defaultOptions\n   */\n  function Http(_backend, _defaultOptions) {\n    _classCallCheck(this, Http);\n\n    this._backend = _backend;\n    this._defaultOptions = _defaultOptions;\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {\\@link BaseRequestOptions} before performing the request.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(Http, [{\n    key: \"request\",\n    value: function request(url, options) {\n      /** @type {?} */\n      var responseObservable;\n\n      if (typeof url === 'string') {\n        responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n      } else if (url instanceof Request) {\n        responseObservable = httpRequest(this._backend, url);\n      } else {\n        throw new Error('First argument must be a url string or Request instance.');\n      }\n\n      return responseObservable;\n    }\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(url, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    }\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"post\",\n    value: function post(url, body, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n        body: body\n      })), options, RequestMethod.Post, url)));\n    }\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(url, body, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n        body: body\n      })), options, RequestMethod.Put, url)));\n    }\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(url, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    }\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"patch\",\n    value: function patch(url, body, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n        body: body\n      })), options, RequestMethod.Patch, url)));\n    }\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"head\",\n    value: function head(url, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    }\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"options\",\n    value: function options(url, _options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions, _options, RequestMethod.Options, url)));\n    }\n  }]);\n\n  return Http;\n}();\n\nHttp.ɵfac = function Http_Factory(t) {\n  return new (t || Http)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions));\n};\n\nHttp.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: Http,\n  factory: Http.ɵfac\n});\n/** @nocollapse */\n\nHttp.ctorParameters = function () {\n  return [{\n    type: ConnectionBackend\n  }, {\n    type: RequestOptions\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Http, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ConnectionBackend\n    }, {\n      type: RequestOptions\n    }];\n  }, null);\n})();\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar Jsonp = /*#__PURE__*/function (_Http) {\n  _inherits(Jsonp, _Http);\n\n  var _super6 = _createSuper(Jsonp);\n\n  /**\n   * @param {?} backend\n   * @param {?} defaultOptions\n   */\n  function Jsonp(backend, defaultOptions) {\n    _classCallCheck(this, Jsonp);\n\n    return _super6.call(this, backend, defaultOptions);\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {\\@link BaseRequestOptions} before performing the request.\n   *\n   * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(Jsonp, [{\n    key: \"request\",\n    value: function request(url, options) {\n      /** @type {?} */\n      var responseObservable;\n\n      if (typeof url === 'string') {\n        url = new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url));\n      }\n\n      if (url instanceof Request) {\n        if (url.method !== RequestMethod.Get) {\n          throw new Error('JSONP requests must use GET request method.');\n        }\n\n        responseObservable = httpRequest(this._backend, url);\n      } else {\n        throw new Error('First argument must be a url string or Request instance.');\n      }\n\n      return responseObservable;\n    }\n  }]);\n\n  return Jsonp;\n}(Http);\n\nJsonp.ɵfac = function Jsonp_Factory(t) {\n  return new (t || Jsonp)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions));\n};\n\nJsonp.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: Jsonp,\n  factory: Jsonp.ɵfac\n});\n/** @nocollapse */\n\nJsonp.ctorParameters = function () {\n  return [{\n    type: ConnectionBackend\n  }, {\n    type: RequestOptions\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Jsonp, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ConnectionBackend\n    }, {\n      type: RequestOptions\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\n\n\nfunction httpFactory(xhrBackend, requestOptions) {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\n\n\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar HttpModule = function HttpModule() {\n  _classCallCheck(this, HttpModule);\n};\n\nHttpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: HttpModule\n});\nHttpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function HttpModule_Factory(t) {\n    return new (t || HttpModule)();\n  },\n  providers: [// TODO(pascal): use factory type annotations once supported in DI\n  // issue: https://github.com/angular/angular/issues/3183\n  {\n    provide: Http,\n    useFactory: httpFactory,\n    deps: [XHRBackend, RequestOptions]\n  }, BrowserXhr, {\n    provide: RequestOptions,\n    useClass: BaseRequestOptions\n  }, {\n    provide: ResponseOptions,\n    useClass: BaseResponseOptions\n  }, XHRBackend, {\n    provide: XSRFStrategy,\n    useFactory: _createDefaultCookieXSRFStrategy\n  }]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(HttpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [// TODO(pascal): use factory type annotations once supported in DI\n      // issue: https://github.com/angular/angular/issues/3183\n      {\n        provide: Http,\n        useFactory: httpFactory,\n        deps: [XHRBackend, RequestOptions]\n      }, BrowserXhr, {\n        provide: RequestOptions,\n        useClass: BaseRequestOptions\n      }, {\n        provide: ResponseOptions,\n        useClass: BaseResponseOptions\n      }, XHRBackend, {\n        provide: XSRFStrategy,\n        useFactory: _createDefaultCookieXSRFStrategy\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\n * \\@publicApi\n */\n\n\nvar JsonpModule = function JsonpModule() {\n  _classCallCheck(this, JsonpModule);\n};\n\nJsonpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: JsonpModule\n});\nJsonpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function JsonpModule_Factory(t) {\n    return new (t || JsonpModule)();\n  },\n  providers: [// TODO(pascal): use factory type annotations once supported in DI\n  // issue: https://github.com/angular/angular/issues/3183\n  {\n    provide: Jsonp,\n    useFactory: jsonpFactory,\n    deps: [JSONPBackend, RequestOptions]\n  }, BrowserJsonp, {\n    provide: RequestOptions,\n    useClass: BaseRequestOptions\n  }, {\n    provide: ResponseOptions,\n    useClass: BaseResponseOptions\n  }, JSONPBackend]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(JsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [// TODO(pascal): use factory type annotations once supported in DI\n      // issue: https://github.com/angular/angular/issues/3183\n      {\n        provide: Jsonp,\n        useFactory: jsonpFactory,\n        deps: [JSONPBackend, RequestOptions]\n      }, BrowserJsonp, {\n        provide: RequestOptions,\n        useClass: BaseRequestOptions\n      }, {\n        provide: ResponseOptions,\n        useClass: BaseResponseOptions\n      }, JSONPBackend]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @type {?}\n */\n\n\nvar VERSION = new Version('7.2.16');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserJsonp as ɵangular_packages_http_http_e, Body as ɵangular_packages_http_http_f, _createDefaultCookieXSRFStrategy as ɵangular_packages_http_http_a, httpFactory as ɵangular_packages_http_http_b, jsonpFactory as ɵangular_packages_http_http_c, BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION };","map":{"version":3,"sources":["../src/backends/browser_xhr.ts","../src/enums.ts","../src/headers.ts","../src/base_response_options.ts","../src/interfaces.ts","../src/http_utils.ts","../src/url_search_params.ts","../src/body.ts","../src/static_response.ts","../src/backends/browser_jsonp.ts","../src/backends/jsonp_backend.ts","../src/backends/xhr_backend.ts","../src/base_request_options.ts","../src/static_request.ts","../src/http.ts","../src/http_module.ts","../src/version.ts","../http.ts"],"names":["getDOM","ArrayBuffer","Blob"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class BrowserXhr {\n  constructor() {}\n  build(): any { return <any>(new XMLHttpRequest()); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Supported http methods.\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport enum RequestMethod {\n  Get,\n  Post,\n  Put,\n  Delete,\n  Options,\n  Head,\n  Patch\n}\n\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport enum ReadyState {\n  Unsent,\n  Open,\n  HeadersReceived,\n  Loading,\n  Done,\n  Cancelled\n}\n\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport enum ResponseType {\n  Basic,\n  Cors,\n  Default,\n  Error,\n  Opaque\n}\n\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated see https://angular.io/guide/http\n */\nexport enum ContentType {\n  NONE,\n  JSON,\n  FORM,\n  FORM_DATA,\n  TEXT,\n  BLOB,\n  ARRAY_BUFFER\n}\n\n/**\n * Define which buffer to use to store the response\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport enum ResponseContentType {\n  Text,\n  Json,\n  ArrayBuffer,\n  Blob\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class Headers {\n  /** @internal header names are lower case */\n  _headers: Map<string, string[]> = new Map();\n  /** @internal map lower case names to actual names */\n  _normalizedNames: Map<string, string> = new Map();\n\n  // TODO(vicb): any -> string|string[]\n  constructor(headers?: Headers|{[name: string]: any}|null) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   */\n  static fromResponseHeaderString(headersString: string): Headers {\n    const headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const index = line.indexOf(':');\n      if (index > 0) {\n        const name = line.slice(0, index);\n        const value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n\n  /**\n   * Appends a header to existing list of header values for a given header name.\n   */\n  append(name: string, value: string): void {\n    const values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n\n  /**\n   * Deletes all header values for the given name.\n   */\n  delete (name: string): void {\n    const lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n\n  forEach(fn: (values: string[], name: string|undefined, headers: Map<string, string[]>) => void):\n      void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n\n  /**\n   * Returns first header that matches given name.\n   */\n  get(name: string): string|null {\n    const values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Checks for existence of header by given name.\n   */\n  has(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n\n  /**\n   * Returns the names of the headers\n   */\n  keys(): string[] { return Array.from(this._normalizedNames.values()); }\n\n  /**\n   * Sets or overrides header value for given name.\n   */\n  set(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n\n  /**\n   * Returns values of all headers.\n   */\n  values(): string[][] { return Array.from(this._headers.values()); }\n\n  /**\n   * Returns string of all headers.\n   */\n  // TODO(vicb): returns {[name: string]: string[]}\n  toJSON(): {[name: string]: any} {\n    const serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[this._normalizedNames.get(name) !] = split;\n    });\n\n    return serialized;\n  }\n\n  /**\n   * Returns list of header values for a given name.\n   */\n  getAll(name: string): string[]|null {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n\n  /**\n   * This method is not implemented.\n   */\n  entries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n\n  private mayBeSetNormalizedName(name: string): void {\n    const lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n\n\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {@link Response Responses} for\n * mock responses (see {@link MockBackend}).\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class ResponseOptions {\n  // TODO: FormData | Blob\n  /**\n   * String, Object, ArrayBuffer or Blob representing the body of the {@link Response}.\n   */\n  body: string|Object|ArrayBuffer|Blob|null;\n  /**\n   * Http {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n   * associated with the response.\n   */\n  status: number|null;\n  /**\n   * Response {@link Headers headers}\n   */\n  headers: Headers|null;\n  /**\n   * @internal\n   */\n  statusText: string|null;\n  /**\n   * @internal\n   */\n  type: ResponseType|null;\n  url: string|null;\n  constructor(opts: ResponseOptionsArgs = {}) {\n    const {body, status, headers, statusText, type, url} = opts;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n\n  /**\n   * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n   * override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * This may be useful when sharing a base `ResponseOptions` object inside tests,\n   * where certain properties may change from test to test.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * import {ResponseOptions, Response} from '@angular/http';\n   *\n   * var options = new ResponseOptions({\n   *   body: {name: 'Jeff'}\n   * });\n   * var res = new Response(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('options.url:', options.url); // null\n   * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n   * console.log('res.url:', res.url); // https://google.com\n   * ```\n   */\n  merge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\n/**\n * Subclass of {@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link ResponseOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create {@link Response Responses}.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class BaseResponseOptions extends ResponseOptions {\n  constructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {Request} from './static_request';\nimport {URLSearchParams} from './url_search_params';\n\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport abstract class ConnectionBackend { abstract createConnection(request: any): Connection; }\n\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport abstract class Connection {\n  // TODO(issue/24571): remove '!'.\n  readyState !: ReadyState;\n  // TODO(issue/24571): remove '!'.\n  request !: Request;\n  response: any;  // TODO: generic of <Response>;\n}\n\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport abstract class XSRFStrategy { abstract configureRequest(req: Request): void; }\n\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport interface RequestOptionsArgs {\n  url?: string|null;\n  method?: string|RequestMethod|null;\n  /** @deprecated from 4.0.0. Use params instead. */\n  search?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  params?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  headers?: Headers|null;\n  body?: any;\n  withCredentials?: boolean|null;\n  responseType?: ResponseContentType|null;\n}\n\n/**\n * Required structure when constructing new Request();\n */\nexport interface RequestArgs extends RequestOptionsArgs { url: string|null; }\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport interface ResponseOptionsArgs {\n  body?: string|Object|FormData|ArrayBuffer|Blob|null;\n  status?: number|null;\n  statusText?: string|null;\n  headers?: Headers|null;\n  type?: ResponseType|null;\n  url?: string|null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RequestMethod} from './enums';\n\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n\nexport function getResponseURL(xhr: any): string|null {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\nexport function stringToArrayBuffer8(input: String): ArrayBuffer {\n  const view = new Uint8Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n\n\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const view = new Uint16Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n **/\nexport class QueryEncoder {\n  encodeKey(key: string): string { return standardEncoding(key); }\n\n  encodeValue(value: string): string { return standardEncoding(value); }\n}\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n  constructor(\n      public rawParams: string = '', private queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n\n  clone(): URLSearchParams {\n    const clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n\n  has(param: string): boolean { return this.paramsMap.has(param); }\n\n  get(param: string): string|null {\n    const storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n\n  getAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n\n  set(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  setAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  append(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `append(name, value)`\n  // for each value in `values`.\n  //\n  // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  appendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `delete(name)`,\n  // followed by `set(name, values)`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  replaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  toString(): string {\n    const paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n\n  delete (param: string): void { this.paramsMap.delete(param); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n\n\n/**\n * HTTP request body used by both {@link Request} and {@link Response}\n * https://fetch.spec.whatwg.org/#body\n */\nexport abstract class Body {\n  /**\n   * @internal\n   */\n  protected _body: any;\n\n  /**\n   * Attempts to return body as parsed `JSON` object, or raises an exception.\n   */\n  json(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse(<string>this._body);\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n\n  /**\n   * Returns the body as a string, presuming `toString()` can be called on the response body.\n   *\n   * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n   * bytes in the buffer will be interpreted. Valid values are:\n   *\n   * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n   *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n   *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n   *   into consideration. This is the default behavior to avoid breaking apps, but should be\n   *   considered deprecated.\n   *\n   * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n   */\n  text(encodingHint: 'legacy'|'iso-8859' = 'legacy'): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array(this._body as ArrayBuffer));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array(this._body as ArrayBuffer));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n\n  /**\n   * Return the body as an ArrayBuffer\n   */\n  arrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return <ArrayBuffer>this._body;\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n\n  /**\n    * Returns the request's body as a Blob, assuming that body exists.\n    */\n  blob(): Blob {\n    if (this._body instanceof Blob) {\n      return <Blob>this._body;\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {ResponseOptions} from './base_response_options';\nimport {Body} from './body';\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\n\n\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class Response extends Body {\n  /**\n   * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n   *\n   * Defaults to \"default\".\n   */\n  type: ResponseType;\n  /**\n   * True if the response's status is within 200-299\n   */\n  ok: boolean;\n  /**\n   * URL of response.\n   *\n   * Defaults to empty string.\n   */\n  url: string;\n  /**\n   * Status code returned by server.\n   *\n   * Defaults to 200.\n   */\n  status: number;\n  /**\n   * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n   * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n   *\n   * Defaults to \"OK\"\n   */\n  statusText: string|null;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many of the response body's bytes have been loaded, for example if the response is\n   * the result of a progress event.\n   */\n  // TODO(issue/24571): remove '!'.\n  bytesLoaded !: number;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many bytes are expected in the final response body.\n   */\n  // TODO(issue/24571): remove '!'.\n  totalBytes !: number;\n  /**\n   * Headers object based on the `Headers` class in the [Fetch\n   * Spec](https://fetch.spec.whatwg.org/#headers-class).\n   */\n  headers: Headers|null;\n\n  constructor(responseOptions: ResponseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = responseOptions.status !;\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type !;\n    this.url = responseOptions.url !;\n  }\n\n  toString(): string {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nlet _nextRequestId = 0;\nexport const JSONP_HOME = '__ng_jsonp__';\nlet _jsonpConnections: {[key: string]: any}|null = null;\n\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\n\n// Make sure not to evaluate this in a non-browser environment!\n@Injectable()\nexport class BrowserJsonp {\n  // Construct a <script> element with the specified URL\n  build(url: string): any {\n    const node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n\n  nextRequestID(): string { return `__req${_nextRequestId++}`; }\n\n  requestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n\n  exposeConnection(id: string, connection: any) {\n    const connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n\n  removeConnection(id: string) {\n    const connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n\n  // Attach the <script> element to the DOM\n  send(node: any) { document.body.appendChild(<Node>(node)); }\n\n  // Remove <script> element from the DOM\n  cleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild(<Node>(node));\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ReadyState, RequestMethod, ResponseType} from '../enums';\nimport {Connection, ConnectionBackend} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserJsonp} from './browser_jsonp';\n\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class JSONPConnection implements Connection {\n  // TODO(issue/24571): remove '!'.\n  private _id !: string;\n  // TODO(issue/24571): remove '!'.\n  private _script !: Element;\n  private _responseData: any;\n  private _finished: boolean = false;\n\n  /**\n   * The {@link ReadyState} of this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readyState !: ReadyState;\n\n  /**\n   * The outgoing HTTP request.\n   */\n  request: Request;\n\n  /**\n   * An observable that completes with the response, when the request is finished.\n   */\n  response: Observable<Response>;\n\n  /** @internal */\n  constructor(\n      req: Request, private _dom: BrowserJsonp, private baseResponseOptions?: ResponseOptions) {\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n      this.readyState = ReadyState.Loading;\n      const id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this);\n\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const callback = _dom.requestCallback(this._id);\n      let url: string = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n\n      const script = this._script = _dom.build(url);\n\n      const onLoad = (event: Event) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let responseOptions =\n              new ResponseOptions({body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url});\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n\n        let responseOptions = new ResponseOptions({body: this._responseData, url});\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      const onError = (error: Error) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let responseOptions = new ResponseOptions({body: error.message, type: ResponseType.Error});\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n\n  /**\n   * Callback called when the JSONP request completes, to notify the application\n   * of the new data.\n   */\n  finished(data?: any) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n\n/**\n * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class JSONPBackend extends ConnectionBackend {\n  /** @internal */\n  constructor(private _browserJSONP: BrowserJsonp, private _baseResponseOptions: ResponseOptions) {\n    super();\n  }\n\n  createConnection(request: Request): JSONPConnection {\n    return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {ÉµgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable, Observer} from 'rxjs';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n  /**\n   * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\n   * `XMLHttpRequest`.\n   */\n  response: Observable<Response>;\n  // TODO(issue/24571): remove '!'.\n  readyState !: ReadyState;\n  constructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name !, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n\n  setDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n  constructor(\n      private _cookieName: string = 'XSRF-TOKEN', private _headerName: string = 'X-XSRF-TOKEN') {}\n\n  configureRequest(req: Request): void {\n    const xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\n/**\n * Creates {@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n * @Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class XHRBackend implements ConnectionBackend {\n  constructor(\n      private _browserXHR: BrowserXhr, private _baseResponseOptions: ResponseOptions,\n      private _xsrfStrategy: XSRFStrategy) {}\n\n  createConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n\n\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class RequestOptions {\n  /**\n   * Http method with which to execute a {@link Request}.\n   * Acceptable methods are defined in the {@link RequestMethod} enum.\n   */\n  method: RequestMethod|string|null;\n  /**\n   * {@link Headers} to be attached to a {@link Request}.\n   */\n  headers: Headers|null;\n  /**\n   * Body to be used when creating a {@link Request}.\n   */\n  body: any;\n  /**\n   * Url with which to perform a {@link Request}.\n   */\n  url: string|null;\n  /**\n   * Search parameters to be included in a {@link Request}.\n   */\n  params: URLSearchParams;\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   */\n  get search(): URLSearchParams { return this.params; }\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   */\n  set search(params: URLSearchParams) { this.params = params; }\n  /**\n   * Enable use credentials for a {@link Request}.\n   */\n  withCredentials: boolean|null;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType|null;\n\n  // TODO(Dzmitry): remove search when this.search is removed\n  constructor(opts: RequestOptionsArgs = {}) {\n    const {method, headers, body, url, search, params, withCredentials, responseType} = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n   *\n   * const options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * const req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   */\n  merge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n\n  private _mergeSearchParams(params?: string|URLSearchParams|{[key: string]: any | any[]}|\n                             null): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n\n  private _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n\n  private _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\n/**\n * Subclass of {@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {@link RequestMethod RequestMethod.Get}\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link RequestOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create and send {@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class BaseRequestOptions extends RequestOptions {\n  constructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n\n\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n *\n * @Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport class Request extends Body {\n  /**\n   * Http method with which to perform the request.\n   */\n  method: RequestMethod;\n  /**\n   * {@link Headers} instance\n   */\n  headers: Headers;\n  /** Url of the remote resource */\n  url: string;\n  /** Type of the request body **/\n  private contentType: ContentType;\n  /** Enable use credentials */\n  withCredentials: boolean;\n  /** Buffer to store the response */\n  responseType: ResponseContentType;\n  constructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url !;\n    const paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      let params: string;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method !);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials !;\n    this.responseType = requestOptions.responseType !;\n  }\n\n  /**\n   * Returns the content type enum based on header options.\n   */\n  detectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n\n  /**\n   * Returns the content type of request's body based on its type.\n   */\n  detectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n\n  /**\n   * Returns the request's body according to its type. If body is undefined, return\n   * null.\n   */\n  getBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction urlEncodeParams(params: {[key: string]: any}): URLSearchParams {\n  const searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    const value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n\nconst noop = function() {};\nconst w = typeof window == 'object' ? window : noop;\nconst FormData = (w as any /** TODO #9100 */)['FormData'] || noop;\nconst Blob = (w as any /** TODO #9100 */)['Blob'] || noop;\nexport const ArrayBuffer: ArrayBufferConstructor =\n    (w as any /** TODO #9100 */)['ArrayBuffer'] || noop;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestArgs, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs | undefined,\n    method: RequestMethod, url: string): RequestArgs {\n  const newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    })) as RequestArgs;\n  }\n\n  return newOptions.merge(new RequestOptions({method, url})) as RequestArgs;\n}\n\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {@link Response} when a\n * response is received.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * @Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class Http {\n  constructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url)));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   */\n  get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   */\n  post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   */\n  put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n\n  /**\n   * Performs a request with `head` http method.\n   */\n  head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n\n  /**\n   * Performs a request with `options` http method.\n   */\n  options(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\n}\n\n\n/**\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@Injectable()\nexport class Jsonp extends Http {\n  constructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   *\n   * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\nimport {NgModule} from '@angular/core';\n\nimport {BrowserJsonp} from './backends/browser_jsonp';\nimport {BrowserXhr} from './backends/browser_xhr';\nimport {JSONPBackend} from './backends/jsonp_backend';\nimport {CookieXSRFStrategy, XHRBackend} from './backends/xhr_backend';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nimport {Http, Jsonp} from './http';\nimport {XSRFStrategy} from './interfaces';\n\n\nexport function _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new Http(xhrBackend, requestOptions);\n}\n\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n\n\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\n@NgModule({\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n    BrowserXhr,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    XHRBackend,\n    {provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy},\n  ],\n})\nexport class HttpModule {\n}\n\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\n * @publicApi\n */\n@NgModule({\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions]},\n    BrowserJsonp,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    JSONPBackend,\n  ],\n})\nexport class JsonpModule {\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n/**\n * @deprecated see https://angular.io/guide/http\n * @publicApi\n */\nexport const VERSION = new Version('7.2.16');\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {BrowserJsonp as Éµangular_packages_http_http_e} from './src/backends/browser_jsonp';\nexport {Body as Éµangular_packages_http_http_f} from './src/body';\nexport {_createDefaultCookieXSRFStrategy as Éµangular_packages_http_http_a,httpFactory as Éµangular_packages_http_http_b,jsonpFactory as Éµangular_packages_http_http_c} from './src/http_module';\nexport {RequestArgs as Éµangular_packages_http_http_d} from './src/interfaces';"]},"metadata":{},"sourceType":"module"}