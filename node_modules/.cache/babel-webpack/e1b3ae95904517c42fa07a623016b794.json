{"ast":null,"code":"import { Injectable, Inject, forwardRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ImgMaxSizeService } from './img-max-size.service';\nimport { ImgMaxPXSizeService } from './img-maxpx-size.service';\nimport { ImgExifService } from './img-exif.service';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './img-max-size.service';\nimport * as ɵngcc2 from './img-maxpx-size.service';\nimport * as ɵngcc3 from './img-exif.service';\n\nvar Ng2ImgMaxService = function () {\n  function Ng2ImgMaxService(imgMaxSizeService, imgMaxPXSizeService, imageExifService) {\n    this.imgMaxSizeService = imgMaxSizeService;\n    this.imgMaxPXSizeService = imgMaxPXSizeService;\n    this.imageExifService = imageExifService;\n  }\n\n  Ng2ImgMaxService.prototype.compress = function (files, maxSizeInMB, ignoreAlpha, logExecutionTime) {\n    var _this = this;\n\n    if (ignoreAlpha === void 0) {\n      ignoreAlpha = false;\n    }\n\n    if (logExecutionTime === void 0) {\n      logExecutionTime = false;\n    }\n\n    var compressedFileSubject = new Subject();\n    files.forEach(function (file) {\n      _this.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime).subscribe(function (value) {\n        compressedFileSubject.next(value);\n      }, function (error) {\n        compressedFileSubject.error(error);\n      });\n    });\n    return compressedFileSubject.asObservable();\n  };\n\n  Ng2ImgMaxService.prototype.resize = function (files, maxWidth, maxHeight, logExecutionTime) {\n    var _this = this;\n\n    if (logExecutionTime === void 0) {\n      logExecutionTime = false;\n    }\n\n    var resizedFileSubject = new Subject();\n    files.forEach(function (file) {\n      _this.resizeImage(file, maxWidth, maxHeight, logExecutionTime).subscribe(function (value) {\n        resizedFileSubject.next(value);\n      }, function (error) {\n        resizedFileSubject.error(error);\n      });\n    });\n    return resizedFileSubject.asObservable();\n  };\n\n  Ng2ImgMaxService.prototype.compressImage = function (file, maxSizeInMB, ignoreAlpha, logExecutionTime) {\n    if (ignoreAlpha === void 0) {\n      ignoreAlpha = false;\n    }\n\n    if (logExecutionTime === void 0) {\n      logExecutionTime = false;\n    }\n\n    return this.imgMaxSizeService.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime);\n  };\n\n  Ng2ImgMaxService.prototype.resizeImage = function (file, maxWidth, maxHeight, logExecutionTime) {\n    if (logExecutionTime === void 0) {\n      logExecutionTime = false;\n    }\n\n    return this.imgMaxPXSizeService.resizeImage(file, maxWidth, maxHeight, logExecutionTime);\n  };\n\n  Ng2ImgMaxService.prototype.getEXIFOrientedImage = function (image) {\n    return this.imageExifService.getOrientedImage(image);\n  };\n  /** @nocollapse */\n\n\n  Ng2ImgMaxService.ctorParameters = function () {\n    return [{\n      type: ImgMaxSizeService,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return ImgMaxSizeService;\n        })]\n      }]\n    }, {\n      type: ImgMaxPXSizeService,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return ImgMaxPXSizeService;\n        })]\n      }]\n    }, {\n      type: ImgExifService,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return ImgExifService;\n        })]\n      }]\n    }];\n  };\n\n  Ng2ImgMaxService.ɵfac = function Ng2ImgMaxService_Factory(t) {\n    return new (t || Ng2ImgMaxService)(ɵngcc0.ɵɵinject(forwardRef(function () {\n      return ImgMaxSizeService;\n    })), ɵngcc0.ɵɵinject(forwardRef(function () {\n      return ImgMaxPXSizeService;\n    })), ɵngcc0.ɵɵinject(forwardRef(function () {\n      return ImgExifService;\n    })));\n  };\n\n  Ng2ImgMaxService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: Ng2ImgMaxService,\n    factory: function factory(t) {\n      return Ng2ImgMaxService.ɵfac(t);\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(Ng2ImgMaxService, [{\n      type: Injectable\n    }], function () {\n      return [{\n        type: ɵngcc1.ImgMaxSizeService,\n        decorators: [{\n          type: Inject,\n          args: [forwardRef(function () {\n            return ImgMaxSizeService;\n          })]\n        }]\n      }, {\n        type: ɵngcc2.ImgMaxPXSizeService,\n        decorators: [{\n          type: Inject,\n          args: [forwardRef(function () {\n            return ImgMaxPXSizeService;\n          })]\n        }]\n      }, {\n        type: ɵngcc3.ImgExifService,\n        decorators: [{\n          type: Inject,\n          args: [forwardRef(function () {\n            return ImgExifService;\n          })]\n        }]\n      }];\n    }, null);\n  })();\n\n  return Ng2ImgMaxService;\n}();\n\nexport { Ng2ImgMaxService };","map":{"version":3,"sources":["ng2-img-max.service.js"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, forwardRef } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { ImgMaxSizeService } from './img-max-size.service';\r\nimport { ImgMaxPXSizeService } from './img-maxpx-size.service';\r\nimport { ImgExifService } from './img-exif.service';\r\nvar Ng2ImgMaxService = /** @class */ (function () {\r\n    function Ng2ImgMaxService(imgMaxSizeService, imgMaxPXSizeService, imageExifService) {\r\n        this.imgMaxSizeService = imgMaxSizeService;\r\n        this.imgMaxPXSizeService = imgMaxPXSizeService;\r\n        this.imageExifService = imageExifService;\r\n    }\r\n    Ng2ImgMaxService.prototype.compress = function (files, maxSizeInMB, ignoreAlpha, logExecutionTime) {\r\n        var _this = this;\r\n        if (ignoreAlpha === void 0) { ignoreAlpha = false; }\r\n        if (logExecutionTime === void 0) { logExecutionTime = false; }\r\n        var compressedFileSubject = new Subject();\r\n        files.forEach(function (file) {\r\n            _this.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime).subscribe(function (value) {\r\n                compressedFileSubject.next(value);\r\n            }, function (error) {\r\n                compressedFileSubject.error(error);\r\n            });\r\n        });\r\n        return compressedFileSubject.asObservable();\r\n    };\r\n    Ng2ImgMaxService.prototype.resize = function (files, maxWidth, maxHeight, logExecutionTime) {\r\n        var _this = this;\r\n        if (logExecutionTime === void 0) { logExecutionTime = false; }\r\n        var resizedFileSubject = new Subject();\r\n        files.forEach(function (file) {\r\n            _this.resizeImage(file, maxWidth, maxHeight, logExecutionTime).subscribe(function (value) {\r\n                resizedFileSubject.next(value);\r\n            }, function (error) {\r\n                resizedFileSubject.error(error);\r\n            });\r\n        });\r\n        return resizedFileSubject.asObservable();\r\n    };\r\n    Ng2ImgMaxService.prototype.compressImage = function (file, maxSizeInMB, ignoreAlpha, logExecutionTime) {\r\n        if (ignoreAlpha === void 0) { ignoreAlpha = false; }\r\n        if (logExecutionTime === void 0) { logExecutionTime = false; }\r\n        return this.imgMaxSizeService.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime);\r\n    };\r\n    Ng2ImgMaxService.prototype.resizeImage = function (file, maxWidth, maxHeight, logExecutionTime) {\r\n        if (logExecutionTime === void 0) { logExecutionTime = false; }\r\n        return this.imgMaxPXSizeService.resizeImage(file, maxWidth, maxHeight, logExecutionTime);\r\n    };\r\n    Ng2ImgMaxService.prototype.getEXIFOrientedImage = function (image) {\r\n        return this.imageExifService.getOrientedImage(image);\r\n    };\r\n    Ng2ImgMaxService.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    Ng2ImgMaxService.ctorParameters = function () { return [\r\n        { type: ImgMaxSizeService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgMaxSizeService; }),] }] },\r\n        { type: ImgMaxPXSizeService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgMaxPXSizeService; }),] }] },\r\n        { type: ImgExifService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgExifService; }),] }] }\r\n    ]; };\r\n    return Ng2ImgMaxService;\r\n}());\r\nexport { Ng2ImgMaxService };\r\n"]},"metadata":{},"sourceType":"module"}