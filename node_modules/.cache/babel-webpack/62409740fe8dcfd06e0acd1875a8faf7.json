{"ast":null,"code":"import _classCallCheck from \"/Users/zahangiralam/Desktop/Projects/ITA/hotelswave-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zahangiralam/Desktop/Projects/ITA/hotelswave-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport { GoogleMapsAPIWrapper } from '@agm/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@agm/core';\n\nvar AgmDirection = /*@__PURE__*/function () {\n  var AgmDirection = /*#__PURE__*/function () {\n    /**\n     * @param {?} gmapsApi\n     */\n    function AgmDirection(gmapsApi) {\n      _classCallCheck(this, AgmDirection);\n\n      this.gmapsApi = gmapsApi; // Options\n\n      this.travelMode = 'DRIVING';\n      this.transitOptions = undefined;\n      this.drivingOptions = undefined;\n      this.waypoints = [];\n      this.optimizeWaypoints = true;\n      this.provideRouteAlternatives = false;\n      this.avoidHighways = false;\n      this.avoidTolls = false; // Remove or draw direction\n\n      this.visible = true; // Direction change event handler\n\n      this.onChange = new EventEmitter(); // Direction response for the new request\n\n      this.onResponse = new EventEmitter(); // Send a custom infowindow\n\n      this.sendInfoWindow = new EventEmitter(); // Status of Directions Query (google.maps.DirectionsStatus.OVER_QUERY_LIMIT)\n\n      this.status = new EventEmitter(); // Marker drag event handler\n\n      this.originDrag = new EventEmitter();\n      this.destinationDrag = new EventEmitter();\n      this.directionsService = undefined;\n      this.directionsDisplay = undefined;\n      this.waypointsMarker = []; // Use for visible flag\n\n      this.isFirstChange = true;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(AgmDirection, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (this.visible === true) {\n          this.directionDraw();\n        }\n      }\n      /**\n       * @param {?} obj\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(obj) {\n        /**\n         * When visible is false then remove the direction layer\n         */\n        if (!this.visible) {\n          try {\n            this.removeMarkers();\n            this.removeDirections();\n          } catch (e) {}\n        } else {\n          if (this.isFirstChange) {\n            /**\n             * When visible is false at the first time\n             */\n            if (typeof this.directionsDisplay === 'undefined') {\n              this.directionDraw();\n            }\n\n            this.isFirstChange = false;\n            return;\n          }\n          /**\n           * When renderOptions are not first change then reset the display\n           */\n\n\n          if (typeof obj.renderOptions !== 'undefined') {\n            if (obj.renderOptions.firstChange === false) {\n              this.removeMarkers();\n              this.removeDirections();\n            }\n          }\n\n          this.directionDraw();\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroyMarkers();\n        this.removeDirections();\n      }\n      /**\n       * This event is fired when the user creating or updating this direction\n       * @return {?}\n       */\n\n    }, {\n      key: \"directionDraw\",\n      value: function directionDraw() {\n        var _this = this;\n\n        this.gmapsApi.getNativeMap().then(function (map) {\n          if (typeof _this.directionsDisplay === 'undefined') {\n            _this.directionsDisplay = new google.maps.DirectionsRenderer(_this.renderOptions);\n\n            _this.directionsDisplay.setMap(map);\n\n            _this.directionsDisplay.addListener('directions_changed', function () {\n              _this.onChange.emit(_this.directionsDisplay.getDirections());\n            });\n          }\n\n          if (typeof _this.directionsService === 'undefined') {\n            _this.directionsService = new google.maps.DirectionsService();\n          }\n\n          if (typeof _this.panel === 'undefined') {\n            _this.directionsDisplay.setPanel(null);\n          } else {\n            _this.directionsDisplay.setPanel(_this.panel);\n          } // Render exist direction\n\n\n          if (typeof _this.renderRoute === 'object' && _this.renderRoute !== null) {\n            _this.directionsDisplay.setDirections(_this.renderRoute);\n\n            _this.renderRoute = null; // or set undefined, ''\n          } else {\n            // Request new direction\n            _this.directionsService.route({\n              origin: _this.origin,\n              destination: _this.destination,\n              travelMode: _this.travelMode,\n              transitOptions: _this.transitOptions,\n              drivingOptions: _this.drivingOptions,\n              waypoints: _this.waypoints,\n              optimizeWaypoints: _this.optimizeWaypoints,\n              provideRouteAlternatives: _this.provideRouteAlternatives,\n              avoidHighways: _this.avoidHighways,\n              avoidTolls: _this.avoidTolls\n            }, function (response, status) {\n              _this.onResponse.emit(response); // Emit Query Status\n\n\n              _this.status.emit(status);\n              /**\n               * DirectionsStatus\n               * https://developers.google.com/maps/documentation/javascript/directions#DirectionsStatus\n               */\n\n\n              switch (status) {\n                case 'OK':\n                  _this.directionsDisplay.setDirections(response);\n                  /**\n                   * Emit The DirectionsResult Object\n                   * https://developers.google.com/maps/documentation/javascript/directions?hl=en#DirectionsResults\n                   */\n                  // Custom Markers\n\n\n                  if (typeof _this.markerOptions !== 'undefined') {\n                    _this.destroyMarkers(); // Set custom markers\n\n                    /** @type {?} */\n\n\n                    var _route = response.routes[0].legs[0];\n\n                    try {\n                      // Origin Marker\n                      if (typeof _this.markerOptions.origin !== 'undefined') {\n                        _this.markerOptions.origin.map = map;\n                        _this.markerOptions.origin.position = _route.start_location;\n                        _this.originMarker = _this.setMarker(map, _this.originMarker, _this.markerOptions.origin, _route.start_address);\n\n                        if (_this.markerOptions.origin.draggable) {\n                          _this.originMarker.addListener('dragend', function () {\n                            _this.origin = _this.originMarker.position;\n\n                            _this.directionDraw();\n\n                            _this.originDrag.emit(_this.origin);\n                          });\n                        }\n                      } // Destination Marker\n\n\n                      if (typeof _this.markerOptions.destination !== 'undefined') {\n                        _this.markerOptions.destination.map = map;\n                        _this.markerOptions.destination.position = _route.end_location;\n                        _this.destinationMarker = _this.setMarker(map, _this.destinationMarker, _this.markerOptions.destination, _route.end_address);\n\n                        if (_this.markerOptions.destination.draggable) {\n                          _this.destinationMarker.addListener('dragend', function () {\n                            _this.destination = _this.destinationMarker.position;\n\n                            _this.directionDraw();\n\n                            _this.destinationDrag.emit(_this.destination);\n                          });\n                        }\n                      } // Waypoints Marker\n\n\n                      if (typeof _this.markerOptions.waypoints !== 'undefined') {\n                        _this.waypoints.forEach(function (waypoint, index) {\n                          // If waypoints are not array then set all the same\n                          if (!Array.isArray(_this.markerOptions.waypoints)) {\n                            _this.markerOptions.waypoints.map = map;\n                            _this.markerOptions.waypoints.position = _route.via_waypoints[index];\n\n                            _this.waypointsMarker.push(_this.setMarker(map, waypoint, _this.markerOptions.waypoints, _route.via_waypoints[index]));\n                          } else {\n                            _this.markerOptions.waypoints[index].map = map;\n                            _this.markerOptions.waypoints[index].position = _route.via_waypoints[index];\n\n                            _this.waypointsMarker.push(_this.setMarker(map, waypoint, _this.markerOptions.waypoints[index], _route.via_waypoints[index]));\n                          }\n                        }); // End forEach\n\n                      }\n                    } catch (err) {\n                      console.error('MarkerOptions error.', err);\n                    }\n                  }\n\n                  break;\n\n                default:\n                  // console.warn(status);\n                  break;\n              } // End switch\n\n            });\n          }\n        });\n      }\n      /**\n       * Custom Origin and Destination Icon\n       * \\@memberof AgmDirection\n       * @param {?} map map\n       * @param {?} marker marker\n       * @param {?} markerOpts properties\n       * @param {?} content marker's infowindow content\n       * @return {?} new marker\n       */\n\n    }, {\n      key: \"setMarker\",\n      value: function setMarker(map, marker, markerOpts, content) {\n        var _this2 = this;\n\n        if (typeof this.infoWindow === 'undefined') {\n          this.infoWindow = new google.maps.InfoWindow({});\n          this.sendInfoWindow.emit(this.infoWindow);\n        }\n\n        marker = new google.maps.Marker(markerOpts); // https://developers.google.com/maps/documentation/javascript/reference/marker?hl=zh-tw#MarkerOptions.clickable\n\n        if (marker.clickable) {\n          marker.addListener('click', function () {\n            /** @type {?} */\n            var infowindoContent = typeof markerOpts.infoWindow === 'undefined' ? content : markerOpts.infoWindow;\n\n            _this2.infoWindow.setContent(infowindoContent);\n\n            _this2.infoWindow.open(map, marker);\n          });\n        }\n\n        return marker;\n      }\n      /**\n       * This event is fired when remove markers\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeMarkers\",\n      value: function removeMarkers() {\n        if (typeof this.originMarker !== 'undefined') {\n          this.originMarker.setMap(null);\n        }\n\n        if (typeof this.destinationMarker !== 'undefined') {\n          this.destinationMarker.setMap(null);\n        }\n\n        this.waypointsMarker.forEach(function (w) {\n          if (typeof w !== 'undefined') {\n            w.setMap(null);\n          }\n        });\n      }\n      /**\n       * This event is fired when remove directions\n       * @return {?}\n       */\n\n    }, {\n      key: \"removeDirections\",\n      value: function removeDirections() {\n        if (this.directionsDisplay !== undefined) {\n          this.directionsDisplay.setPanel(null);\n          this.directionsDisplay.setMap(null);\n          this.directionsDisplay = undefined;\n        }\n      }\n      /**\n       * This event is fired when destroy markers\n       * @return {?}\n       */\n\n    }, {\n      key: \"destroyMarkers\",\n      value: function destroyMarkers() {\n        // Remove origin markers\n        try {\n          if (typeof this.originMarker !== 'undefined') {\n            google.maps.event.clearListeners(this.originMarker, 'click');\n\n            if (this.markerOptions.origin.draggable) {\n              google.maps.event.clearListeners(this.originMarker, 'dragend');\n            }\n          }\n\n          if (typeof this.destinationMarker !== 'undefined') {\n            google.maps.event.clearListeners(this.destinationMarker, 'click');\n\n            if (this.markerOptions.origin.draggable) {\n              google.maps.event.clearListeners(this.destinationMarker, 'dragend');\n            }\n          }\n\n          this.waypointsMarker.forEach(function (w) {\n            if (typeof w !== 'undefined') {\n              google.maps.event.clearListeners(w, 'click');\n            }\n          });\n          this.removeMarkers();\n        } catch (err) {\n          console.error('Can not reset custom marker.', err);\n        }\n      }\n    }]);\n\n    return AgmDirection;\n  }();\n\n  AgmDirection.ɵfac = function AgmDirection_Factory(t) {\n    return new (t || AgmDirection)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GoogleMapsAPIWrapper));\n  };\n\n  AgmDirection.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: AgmDirection,\n    selectors: [[\"agm-direction\"]],\n    inputs: {\n      travelMode: \"travelMode\",\n      transitOptions: \"transitOptions\",\n      drivingOptions: \"drivingOptions\",\n      waypoints: \"waypoints\",\n      optimizeWaypoints: \"optimizeWaypoints\",\n      provideRouteAlternatives: \"provideRouteAlternatives\",\n      avoidHighways: \"avoidHighways\",\n      avoidTolls: \"avoidTolls\",\n      visible: \"visible\",\n      renderRoute: \"renderRoute\",\n      origin: \"origin\",\n      destination: \"destination\",\n      infoWindow: \"infoWindow\",\n      renderOptions: \"renderOptions\",\n      panel: \"panel\",\n      markerOptions: \"markerOptions\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onResponse: \"onResponse\",\n      sendInfoWindow: \"sendInfoWindow\",\n      status: \"status\",\n      originDrag: \"originDrag\",\n      destinationDrag: \"destinationDrag\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return AgmDirection;\n}();\n\nvar AgmDirectionModule = /*@__PURE__*/function () {\n  var AgmDirectionModule = /*#__PURE__*/function () {\n    function AgmDirectionModule() {\n      _classCallCheck(this, AgmDirectionModule);\n    }\n\n    _createClass(AgmDirectionModule, null, [{\n      key: \"forRoot\",\n      value:\n      /**\n       * @return {?}\n       */\n      function forRoot() {\n        return {\n          ngModule: AgmDirectionModule\n        };\n      }\n    }]);\n\n    return AgmDirectionModule;\n  }();\n\n  AgmDirectionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: AgmDirectionModule\n  });\n  AgmDirectionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function AgmDirectionModule_Factory(t) {\n      return new (t || AgmDirectionModule)();\n    },\n    imports: [[]]\n  });\n  return AgmDirectionModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AgmDirectionModule, {\n    declarations: [AgmDirection],\n    exports: [AgmDirection]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { AgmDirectionModule, AgmDirection as ɵa };","map":null,"metadata":{},"sourceType":"module"}