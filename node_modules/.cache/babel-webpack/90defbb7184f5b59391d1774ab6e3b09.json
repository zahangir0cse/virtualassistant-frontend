{"ast":null,"code":"/**\n * @license\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://raw.githubusercontent.com/l-lin/angular-datatables/master/LICENSE\n */\nimport { Directive, ElementRef, Input, Renderer2, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\n\nvar DataTableDirective = function () {\n  function DataTableDirective(el, vcr, renderer) {\n    this.el = el;\n    this.vcr = vcr;\n    this.renderer = renderer;\n    /**\n     * The DataTable option you pass to configure your table.\n     */\n\n    this.dtOptions = {};\n  }\n\n  DataTableDirective.prototype.ngOnInit = function () {\n    var _this = this;\n\n    if (this.dtTrigger) {\n      this.dtTrigger.subscribe(function () {\n        _this.displayTable();\n      });\n    } else {\n      this.displayTable();\n    }\n  };\n\n  DataTableDirective.prototype.ngOnDestroy = function () {\n    if (this.dtTrigger) {\n      this.dtTrigger.unsubscribe();\n    }\n\n    if (this.dt) {\n      this.dt.destroy(true);\n    }\n  };\n\n  DataTableDirective.prototype.displayTable = function () {\n    var _this = this;\n\n    var self = this;\n    this.dtInstance = new Promise(function (resolve, reject) {\n      Promise.resolve(_this.dtOptions).then(function (dtOptions) {\n        // Using setTimeout as a \"hack\" to be \"part\" of NgZone\n        setTimeout(function () {\n          // Assign DT properties here\n          var options = {\n            rowCallback: function rowCallback(row, data, index) {\n              if (dtOptions.columns) {\n                var columns_1 = dtOptions.columns; // Filter columns with pipe declared\n\n                var colsWithPipe = columns_1.filter(function (x) {\n                  return x.ngPipeInstance && !x.ngTemplateRef;\n                }); // Iterate\n\n                colsWithPipe.forEach(function (el) {\n                  var pipe = el.ngPipeInstance; // find index of column using `data` attr\n\n                  var i = columns_1.findIndex(function (e) {\n                    return e.data == el.data;\n                  }); // get <td> element which holds data using index\n\n                  var rowFromCol = row.childNodes.item(i); // Transform data with Pipe\n\n                  var rowVal = $(rowFromCol).text();\n                  var rowValAfter = pipe.transform(rowVal); // Apply transformed string to <td>\n\n                  $(rowFromCol).text(rowValAfter);\n                }); // Filter columns using `ngTemplateRef`\n\n                var colsWithTemplate = columns_1.filter(function (x) {\n                  return x.ngTemplateRef && !x.ngPipeInstance;\n                });\n                colsWithTemplate.forEach(function (el) {\n                  var _a = el.ngTemplateRef,\n                      ref = _a.ref,\n                      context = _a.context; // get <td> element which holds data using index\n\n                  var index = columns_1.findIndex(function (e) {\n                    return e.data == el.data;\n                  });\n                  var cellFromIndex = row.childNodes.item(index); // render onto DOM\n                  // finalize context to be sent to user\n\n                  var _context = Object.assign({}, context, context === null || context === void 0 ? void 0 : context.userData, {\n                    adtData: data\n                  });\n\n                  var instance = self.vcr.createEmbeddedView(ref, _context);\n                  self.renderer.appendChild(cellFromIndex, instance.rootNodes[0]);\n                });\n              } // run user specified row callback if provided.\n\n\n              if (_this.dtOptions.rowCallback) {\n                _this.dtOptions.rowCallback(row, data, index);\n              }\n            }\n          }; // merge user's config with ours\n\n          options = Object.assign({}, dtOptions, options);\n          _this.dt = $(_this.el.nativeElement).DataTable(options);\n          resolve(_this.dt);\n        });\n      });\n    });\n  };\n\n  DataTableDirective.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: ViewContainerRef\n    }, {\n      type: Renderer2\n    }];\n  };\n\n  DataTableDirective.propDecorators = {\n    dtOptions: [{\n      type: Input\n    }],\n    dtTrigger: [{\n      type: Input\n    }]\n  };\n\n  DataTableDirective.ɵfac = function DataTableDirective_Factory(t) {\n    return new (t || DataTableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  DataTableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DataTableDirective,\n    selectors: [[\"\", \"datatable\", \"\"]],\n    inputs: {\n      dtOptions: \"dtOptions\",\n      dtTrigger: \"dtTrigger\"\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(DataTableDirective, [{\n      type: Directive,\n      args: [{\n        selector: '[datatable]'\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc0.ViewContainerRef\n      }, {\n        type: ɵngcc0.Renderer2\n      }];\n    }, {\n      dtOptions: [{\n        type: Input\n      }],\n      dtTrigger: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return DataTableDirective;\n}();\n\nexport { DataTableDirective };","map":{"version":3,"sources":["angular-datatables.directive.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://raw.githubusercontent.com/l-lin/angular-datatables/master/LICENSE\n */\nimport { Directive, ElementRef, Input, Renderer2, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nvar DataTableDirective = /** @class */ (function () {\n    function DataTableDirective(el, vcr, renderer) {\n        this.el = el;\n        this.vcr = vcr;\n        this.renderer = renderer;\n        /**\n         * The DataTable option you pass to configure your table.\n         */\n        this.dtOptions = {};\n    }\n    DataTableDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.dtTrigger) {\n            this.dtTrigger.subscribe(function () {\n                _this.displayTable();\n            });\n        }\n        else {\n            this.displayTable();\n        }\n    };\n    DataTableDirective.prototype.ngOnDestroy = function () {\n        if (this.dtTrigger) {\n            this.dtTrigger.unsubscribe();\n        }\n        if (this.dt) {\n            this.dt.destroy(true);\n        }\n    };\n    DataTableDirective.prototype.displayTable = function () {\n        var _this = this;\n        var self = this;\n        this.dtInstance = new Promise(function (resolve, reject) {\n            Promise.resolve(_this.dtOptions).then(function (dtOptions) {\n                // Using setTimeout as a \"hack\" to be \"part\" of NgZone\n                setTimeout(function () {\n                    // Assign DT properties here\n                    var options = {\n                        rowCallback: function (row, data, index) {\n                            if (dtOptions.columns) {\n                                var columns_1 = dtOptions.columns;\n                                // Filter columns with pipe declared\n                                var colsWithPipe = columns_1.filter(function (x) { return x.ngPipeInstance && !x.ngTemplateRef; });\n                                // Iterate\n                                colsWithPipe.forEach(function (el) {\n                                    var pipe = el.ngPipeInstance;\n                                    // find index of column using `data` attr\n                                    var i = columns_1.findIndex(function (e) { return e.data == el.data; });\n                                    // get <td> element which holds data using index\n                                    var rowFromCol = row.childNodes.item(i);\n                                    // Transform data with Pipe\n                                    var rowVal = $(rowFromCol).text();\n                                    var rowValAfter = pipe.transform(rowVal);\n                                    // Apply transformed string to <td>\n                                    $(rowFromCol).text(rowValAfter);\n                                });\n                                // Filter columns using `ngTemplateRef`\n                                var colsWithTemplate = columns_1.filter(function (x) { return x.ngTemplateRef && !x.ngPipeInstance; });\n                                colsWithTemplate.forEach(function (el) {\n                                    var _a = el.ngTemplateRef, ref = _a.ref, context = _a.context;\n                                    // get <td> element which holds data using index\n                                    var index = columns_1.findIndex(function (e) { return e.data == el.data; });\n                                    var cellFromIndex = row.childNodes.item(index);\n                                    // render onto DOM\n                                    // finalize context to be sent to user\n                                    var _context = Object.assign({}, context, context === null || context === void 0 ? void 0 : context.userData, {\n                                        adtData: data\n                                    });\n                                    var instance = self.vcr.createEmbeddedView(ref, _context);\n                                    self.renderer.appendChild(cellFromIndex, instance.rootNodes[0]);\n                                });\n                            }\n                            // run user specified row callback if provided.\n                            if (_this.dtOptions.rowCallback) {\n                                _this.dtOptions.rowCallback(row, data, index);\n                            }\n                        }\n                    };\n                    // merge user's config with ours\n                    options = Object.assign({}, dtOptions, options);\n                    _this.dt = $(_this.el.nativeElement).DataTable(options);\n                    resolve(_this.dt);\n                });\n            });\n        });\n    };\n    DataTableDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[datatable]'\n                },] }\n    ];\n    DataTableDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: ViewContainerRef },\n        { type: Renderer2 }\n    ]; };\n    DataTableDirective.propDecorators = {\n        dtOptions: [{ type: Input }],\n        dtTrigger: [{ type: Input }]\n    };\n    return DataTableDirective;\n}());\nexport { DataTableDirective };\n"]},"metadata":{},"sourceType":"module"}