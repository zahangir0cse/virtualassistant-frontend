{"ast":null,"code":"import { Injectable, Inject, forwardRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ImgMaxSizeService } from './img-max-size.service';\nimport { ImgMaxPXSizeService } from './img-maxpx-size.service';\nimport { ImgExifService } from './img-exif.service';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './img-max-size.service';\nimport * as ɵngcc2 from './img-maxpx-size.service';\nimport * as ɵngcc3 from './img-exif.service';\n\nvar Ng2ImgMaxService = function () {\n  function Ng2ImgMaxService(imgMaxSizeService, imgMaxPXSizeService, imageExifService) {\n    this.imgMaxSizeService = imgMaxSizeService;\n    this.imgMaxPXSizeService = imgMaxPXSizeService;\n    this.imageExifService = imageExifService;\n  }\n\n  Ng2ImgMaxService.prototype.compress = function (files, maxSizeInMB, ignoreAlpha, logExecutionTime) {\n    var _this = this;\n\n    if (ignoreAlpha === void 0) {\n      ignoreAlpha = false;\n    }\n\n    if (logExecutionTime === void 0) {\n      logExecutionTime = false;\n    }\n\n    var compressedFileSubject = new Subject();\n    files.forEach(function (file) {\n      _this.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime).subscribe(function (value) {\n        compressedFileSubject.next(value);\n      }, function (error) {\n        compressedFileSubject.error(error);\n      });\n    });\n    return compressedFileSubject.asObservable();\n  };\n\n  Ng2ImgMaxService.prototype.resize = function (files, maxWidth, maxHeight, logExecutionTime) {\n    var _this = this;\n\n    if (logExecutionTime === void 0) {\n      logExecutionTime = false;\n    }\n\n    var resizedFileSubject = new Subject();\n    files.forEach(function (file) {\n      _this.resizeImage(file, maxWidth, maxHeight, logExecutionTime).subscribe(function (value) {\n        resizedFileSubject.next(value);\n      }, function (error) {\n        resizedFileSubject.error(error);\n      });\n    });\n    return resizedFileSubject.asObservable();\n  };\n\n  Ng2ImgMaxService.prototype.compressImage = function (file, maxSizeInMB, ignoreAlpha, logExecutionTime) {\n    if (ignoreAlpha === void 0) {\n      ignoreAlpha = false;\n    }\n\n    if (logExecutionTime === void 0) {\n      logExecutionTime = false;\n    }\n\n    return this.imgMaxSizeService.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime);\n  };\n\n  Ng2ImgMaxService.prototype.resizeImage = function (file, maxWidth, maxHeight, logExecutionTime) {\n    if (logExecutionTime === void 0) {\n      logExecutionTime = false;\n    }\n\n    return this.imgMaxPXSizeService.resizeImage(file, maxWidth, maxHeight, logExecutionTime);\n  };\n\n  Ng2ImgMaxService.prototype.getEXIFOrientedImage = function (image) {\n    return this.imageExifService.getOrientedImage(image);\n  };\n\n  Ng2ImgMaxService.ɵfac = function Ng2ImgMaxService_Factory(t) {\n    return new (t || Ng2ImgMaxService)(ɵngcc0.ɵɵinject(forwardRef(function () {\n      return ImgMaxSizeService;\n    })), ɵngcc0.ɵɵinject(forwardRef(function () {\n      return ImgMaxPXSizeService;\n    })), ɵngcc0.ɵɵinject(forwardRef(function () {\n      return ImgExifService;\n    })));\n  };\n\n  Ng2ImgMaxService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: Ng2ImgMaxService,\n    factory: function factory(t) {\n      return Ng2ImgMaxService.ɵfac(t);\n    }\n  });\n  return Ng2ImgMaxService;\n}();\n\nexport { Ng2ImgMaxService };","map":null,"metadata":{},"sourceType":"module"}