{"ast":null,"code":"import _classCallCheck from \"/Users/zahangiralam/Desktop/Projects/ITA/hotelswave-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zahangiralam/Desktop/Projects/ITA/hotelswave-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ɵɵdefineInjectable, Injectable, Component, Input, NgModule } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\n\nfunction NgxCaptchaComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 3);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function NgxCaptchaComponent_div_2_Template_input_ngModelChange_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1.captch_input = $event;\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(2, \"input\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxCaptchaComponent_div_2_Template_input_click_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.checkCaptcha();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"a\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxCaptchaComponent_div_2_Template_a_click_3_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.playCaptcha();\n    });\n    ɵngcc0.ɵɵtext(4, \"\\uD83D\\uDD08\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"a\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxCaptchaComponent_div_2_Template_a_click_5_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.createCaptcha();\n    });\n    ɵngcc0.ɵɵtext(6, \"\\u21BB\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngModel\", ctx_r0.captch_input);\n  }\n}\n\nvar NgxCaptchaService = /*#__PURE__*/function () {\n  function NgxCaptchaService() {\n    _classCallCheck(this, NgxCaptchaService);\n\n    this.captchSource = new BehaviorSubject(null);\n    this.captchStatus = this.captchSource.asObservable();\n  }\n\n  _createClass(NgxCaptchaService, [{\n    key: \"setCaptchaStatus\",\n    value: function setCaptchaStatus(code) {\n      this.captchSource.next(code);\n    }\n  }]);\n\n  return NgxCaptchaService;\n}();\n\nNgxCaptchaService.ɵfac = function NgxCaptchaService_Factory(t) {\n  return new (t || NgxCaptchaService)();\n};\n/** @nocollapse */\n\n\nNgxCaptchaService.ɵprov = ɵɵdefineInjectable({\n  factory: function NgxCaptchaService_Factory() {\n    return new NgxCaptchaService();\n  },\n  token: NgxCaptchaService,\n  providedIn: \"root\"\n});\n/** @nocollapse */\n\nNgxCaptchaService.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxCaptchaService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nvar NgxCaptchaComponent = /*#__PURE__*/function () {\n  function NgxCaptchaComponent(captchService) {\n    _classCallCheck(this, NgxCaptchaComponent);\n\n    this.captchService = captchService;\n    this.config = {};\n    this.captch_input = null;\n    this.code = null;\n    this.resultCode = null;\n  }\n\n  _createClass(NgxCaptchaComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      if (this.config) {\n        if (!this.config.font || !this.config.font.size) {\n          this.config['font']['size'] = '40px';\n        }\n\n        if (!this.config.font || !this.config.font.family) {\n          this.config['font']['family'] = 'Arial';\n        }\n\n        if (!this.config.length) {\n          this.config['length'] = 6;\n        }\n\n        if (!this.config.cssClass) {\n          this.config['cssClass'] = '';\n        }\n\n        if (!this.config.type) {\n          this.config['type'] = 1;\n        }\n\n        if (!this.config.back || !this.config.back.stroke) {\n          this.config['back']['stroke'] = '';\n        }\n\n        if (!this.config.back || !this.config.back.solid) {\n          this.config['back']['solid'] = '#fbfbfb';\n        }\n\n        this.createCaptcha();\n      }\n    }\n  }, {\n    key: \"createCaptcha\",\n    value: function createCaptcha() {\n      var _this = this;\n\n      switch (this.config.type) {\n        case 1:\n          var char = Math.random().toString(24).substring(2, this.config.length) + Math.random().toString(24).substring(2, 4);\n          this.code = this.resultCode = char.toUpperCase();\n          break;\n\n        case 2:\n          var num1 = Math.floor(Math.random() * 99);\n          var num2 = Math.floor(Math.random() * 9);\n          var operators = ['+', '-'];\n          var operator = operators[Math.floor(Math.random() * operators.length)];\n          this.code = num1 + operator + num2 + '=?';\n          this.resultCode = operator == '+' ? num1 + num2 : num1 - num2;\n          break;\n\n        case 3:\n          break;\n      }\n\n      setTimeout(function () {\n        var captcahCanvas = document.getElementById('captcahCanvas');\n        var ctx = captcahCanvas.getContext('2d');\n        ctx.fillStyle = _this.config.back.solid;\n        ctx.fillRect(0, 0, captcahCanvas.width, captcahCanvas.height); // ctx.font = '10px Arial';\n        // ctx.fillStyle = \"#000000\";\n        // ctx.fillText(\"Powered By BinsSoft\", captcahCanvas.width - 95, captcahCanvas.height - 5);\n\n        ctx.beginPath();\n\n        if (_this.config.type !== 3) {\n          captcahCanvas.style.letterSpacing = 15 + 'px';\n          ctx.font = _this.config.font.size + ' ' + _this.config.font.family;\n          ctx.fillStyle = _this.config.font.color;\n          ctx.textBaseline = 'middle';\n          ctx.fillText(_this.code, 40, 50);\n\n          if (_this.config.back.stroke) {\n            ctx.strokeStyle = _this.config.back.stroke;\n\n            for (var i = 0; i < 150; i++) {\n              ctx.moveTo(Math.random() * 300, Math.random() * 300);\n              ctx.lineTo(Math.random() * 300, Math.random() * 300);\n            }\n\n            ctx.stroke();\n          }\n        } else {\n          ctx.fillStyle = '#000';\n          var position = {\n            x: 20,\n            y: 20,\n            width: 30,\n            height: 30,\n            thickness: 1\n          };\n          ctx.fillRect(position.x - position.thickness, position.y - position.thickness, position.width + position.thickness * 2, position.height + position.thickness * 2);\n          ctx.fillStyle = '#FFF';\n          ctx.fillRect(position.x, position.y, position.width, position.height);\n          ctx.font = '15px ' + _this.config.font.family;\n          ctx.fillStyle = _this.config.font.color;\n          ctx.fillText('I\\'m not a robot', position.x + position.width + 5, position.y * 2);\n          captcahCanvas.addEventListener('mousedown', function (e) {\n            var clickPosition = _this.getMousePosition(captcahCanvas, e);\n\n            var midOfBox = {\n              x: position.x + position.width / 2,\n              y: position.y + position.height / 2\n            };\n            _this.resultCode = 1;\n\n            if (Math.abs(clickPosition.x - midOfBox.x) <= 5 && Math.abs(clickPosition.y - midOfBox.y) <= 5) {\n              /// it is a robot\n              _this.captch_input = 0;\n            } else {\n              // it is a human\n              if (clickPosition.x >= position.x && clickPosition.x <= position.x + position.width && clickPosition.y >= position.y && clickPosition.y <= position.y + position.height) {\n                _this.captch_input = 1;\n                ctx.font = '30px ' + _this.config.font.family;\n                ctx.fillText('✔', position.x, position.y + position.height - 5);\n              }\n            }\n\n            _this.checkCaptcha();\n          });\n        }\n      }, 100);\n    }\n  }, {\n    key: \"playCaptcha\",\n    value: function playCaptcha() {\n      var msg = new SpeechSynthesisUtterance(this.code.split('').join(' '));\n      msg.pitch = 1;\n      window.speechSynthesis.speak(msg);\n    }\n  }, {\n    key: \"checkCaptcha\",\n    value: function checkCaptcha() {\n      if (this.captch_input != this.resultCode) {\n        this.captchService.setCaptchaStatus(false);\n      } else {\n        this.captchService.setCaptchaStatus(true);\n      }\n    }\n  }, {\n    key: \"getMousePosition\",\n    value: function getMousePosition(canvas, event) {\n      var rect = canvas.getBoundingClientRect();\n      var x = event.clientX - rect.left;\n      var y = event.clientY - rect.top;\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }]);\n\n  return NgxCaptchaComponent;\n}();\n\nNgxCaptchaComponent.ɵfac = function NgxCaptchaComponent_Factory(t) {\n  return new (t || NgxCaptchaComponent)(ɵngcc0.ɵɵdirectiveInject(NgxCaptchaService));\n};\n\nNgxCaptchaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NgxCaptchaComponent,\n  selectors: [[\"ngx-captcha\"]],\n  inputs: {\n    config: \"config\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 3,\n  vars: 4,\n  consts: [[\"id\", \"captcahCanvas\", \"width\", \"316\", \"height\", \"80\"], [\"class\", \"captcha-actions\", 4, \"ngIf\"], [1, \"captcha-actions\"], [\"type\", \"text\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", \"value\", \"Check\", 3, \"click\"], [\"href\", \"javascript:void(0)\", 1, \"cpt-btn\", 3, \"click\"], [\"href\", \"javascript:void(0)\", 1, \"cpt-btn\", \"reload\", 3, \"click\"]],\n  template: function NgxCaptchaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵelement(1, \"canvas\", 0);\n      ɵngcc0.ɵɵtemplate(2, NgxCaptchaComponent_div_2_Template, 7, 1, \"div\", 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMapInterpolate1(\"captcha-container \", ctx.config.cssClass, \"\");\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.config.type != 3);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel],\n  styles: [\".captcha-container[_ngcontent-%COMP%]{width:315px;box-shadow:1px 1px 1px 0 #ccc}.captcha-actions[_ngcontent-%COMP%]   input[type=text][_ngcontent-%COMP%]{padding:5px;border:1px solid #ccc;border-radius:10px 0 0 10px;outline:none}.captcha-actions[_ngcontent-%COMP%]   input[type=button][_ngcontent-%COMP%]{outline:none;padding:6px;border:none;background:#ccc;border-radius:0 10px 10px 0}.captcha-actions[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{padding:10px;cursor:pointer;font-size:15px;font-weight:700;text-decoration:none;color:#222}.captcha-container[_ngcontent-%COMP%]   .powered-by[_ngcontent-%COMP%]{font-size:11px;font-family:Arial;color:#ccc;padding:5px;display:block!important}\"]\n});\n/** @nocollapse */\n\nNgxCaptchaComponent.ctorParameters = function () {\n  return [{\n    type: NgxCaptchaService\n  }];\n};\n\nNgxCaptchaComponent.propDecorators = {\n  config: [{\n    type: Input,\n    args: ['config']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxCaptchaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-captcha',\n      template: \"<div class=\\\"captcha-container {{ config.cssClass}}\\\">\\r\\n    <canvas id=\\\"captcahCanvas\\\" width=\\\"316\\\" height=\\\"80\\\"></canvas>\\r\\n    \\r\\n\\r\\n    <div class=\\\"captcha-actions\\\" *ngIf=\\\"config.type != 3\\\">\\r\\n  <input type=\\\"text\\\" [(ngModel)]=\\\"captch_input\\\" />\\r\\n  <input type=\\\"button\\\" value=\\\"Check\\\" (click)=\\\"checkCaptcha()\\\" />\\r\\n  <a href=\\\"javascript:void(0)\\\" class=\\\"cpt-btn\\\" (click)=\\\"playCaptcha()\\\">\\uD83D\\uDD08</a>\\r\\n    <a href=\\\"javascript:void(0)\\\" class=\\\"cpt-btn reload\\\" (click)=\\\"createCaptcha()\\\">&#x21bb;</a>\\r\\n</div>\\r\\n</div>\",\n      styles: [\".captcha-container{width:315px;box-shadow:1px 1px 1px 0 #ccc}.captcha-actions input[type=text]{padding:5px;border:1px solid #ccc;border-radius:10px 0 0 10px;outline:none}.captcha-actions input[type=button]{outline:none;padding:6px;border:none;background:#ccc;border-radius:0 10px 10px 0}.captcha-actions a{padding:10px;cursor:pointer;font-size:15px;font-weight:700;text-decoration:none;color:#222}.captcha-container .powered-by{font-size:11px;font-family:Arial;color:#ccc;padding:5px;display:block!important}\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxCaptchaService\n    }];\n  }, {\n    config: [{\n      type: Input,\n      args: ['config']\n    }]\n  });\n})();\n\nvar NgxCaptchaModule = /*#__PURE__*/function () {\n  function NgxCaptchaModule() {\n    _classCallCheck(this, NgxCaptchaModule);\n  }\n\n  _createClass(NgxCaptchaModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot() {\n      return {\n        ngModule: NgxCaptchaModule,\n        providers: [NgxCaptchaService]\n      };\n    }\n  }]);\n\n  return NgxCaptchaModule;\n}();\n\nNgxCaptchaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgxCaptchaModule\n});\nNgxCaptchaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgxCaptchaModule_Factory(t) {\n    return new (t || NgxCaptchaModule)();\n  },\n  imports: [[BrowserModule, FormsModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxCaptchaModule, {\n    declarations: function declarations() {\n      return [NgxCaptchaComponent];\n    },\n    imports: function imports() {\n      return [BrowserModule, FormsModule];\n    },\n    exports: function exports() {\n      return [NgxCaptchaComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxCaptchaModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxCaptchaComponent],\n      imports: [BrowserModule, FormsModule],\n      exports: [NgxCaptchaComponent]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ngx-captcha\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxCaptchaComponent, NgxCaptchaModule, NgxCaptchaService };","map":{"version":3,"sources":["../../../../projects/binssoft/ngx-captcha/src/lib/ngx-captcha.service.ts","../../../../projects/binssoft/ngx-captcha/src/lib/ngx-captcha.component.ts","../../../../projects/binssoft/ngx-captcha/src/lib/ngx-captcha.module.ts","../../../../projects/binssoft/ngx-captcha/src/public-api.ts","../../../../projects/binssoft/ngx-captcha/src/binssoft-ngx-captcha.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {BehaviorSubject} from 'rxjs';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxCaptchaService {\r\n\r\n  captchSource = new BehaviorSubject(null);\r\n  captchStatus = this.captchSource.asObservable(); \r\n  constructor() { }\r\n\r\n  setCaptchaStatus(code: any) {\r\n    this.captchSource.next(code);\r\n  }\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnChanges,\r\n\tInput,\r\n} from '@angular/core';\r\nimport { NgxCaptchaService } from './ngx-captcha.service'\r\n@Component({\r\n\tselector: 'ngx-captcha',\r\n\ttemplateUrl: './ngx-captcha.component.html',\r\n\tstyleUrls: ['./ngx-captcha.component.scss']\r\n})\r\nexport class NgxCaptchaComponent implements OnChanges {\r\n\r\n\t@Input('config') config: any = {};\r\n\tcaptch_input: any = null;\r\n\tcode: any = null;\r\n\tresultCode: any = null;\r\n\tconstructor(private captchService: NgxCaptchaService) { }\r\n\tngOnChanges() {\r\n\t\tif (this.config) {\r\n\t\t\tif (!this.config.font || !this.config.font.size) {\r\n\t\t\t\tthis.config['font']['size'] = '40px';\r\n\t\t\t}\r\n\t\t\tif (!this.config.font || !this.config.font.family) {\r\n\t\t\t\tthis.config['font']['family'] = 'Arial';\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.config.length) {\r\n\t\t\t\tthis.config['length'] = 6;\r\n\t\t\t}\r\n\t\t\tif (!this.config.cssClass) {\r\n\t\t\t\tthis.config['cssClass'] = '';\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.config.type) {\r\n\t\t\t\tthis.config['type'] = 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.config.back || !this.config.back.stroke) {\r\n\t\t\t\tthis.config['back']['stroke'] = '';\r\n\t\t\t}\r\n\t\t\tif (!this.config.back || !this.config.back.solid) {\r\n\t\t\t\tthis.config['back']['solid'] = '#fbfbfb';\r\n\t\t\t}\r\n\r\n\t\t\tthis.createCaptcha();\r\n\t\t}\r\n\t}\r\n\tcreateCaptcha() {\r\n\r\n\t\tswitch (this.config.type) {\r\n\t\t\tcase 1:\r\n\r\n\t\t\t\tlet char = Math.random()\r\n\t\t\t\t\t.toString(24)\r\n\t\t\t\t\t.substring(2, this.config.length) +\r\n\t\t\t\t\tMath.random()\r\n\t\t\t\t\t\t.toString(24)\r\n\t\t\t\t\t\t.substring(2, 4);\r\n\t\t\t\tthis.code = this.resultCode = char.toUpperCase();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tlet num1 = Math.floor(Math.random() * 99);\r\n\t\t\t\tlet num2 = Math.floor(Math.random() * 9);\r\n\t\t\t\tlet operators = ['+', '-'];\r\n\t\t\t\tlet operator = operators[(Math.floor(Math.random() * operators.length))];\r\n\t\t\t\tthis.code = num1 + operator + num2 + '=?';\r\n\t\t\t\tthis.resultCode = (operator == '+') ? (num1 + num2) : (num1 - num2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet captcahCanvas: any = document.getElementById('captcahCanvas');\r\n\t\t\tvar ctx = captcahCanvas.getContext('2d');\r\n\t\t\tctx.fillStyle = this.config.back.solid;\r\n\t\t\tctx.fillRect(0, 0, captcahCanvas.width, captcahCanvas.height);\r\n\r\n\t\t\t// ctx.font = '10px Arial';\r\n\t\t\t// ctx.fillStyle = \"#000000\";\r\n\t\t\t// ctx.fillText(\"Powered By BinsSoft\", captcahCanvas.width - 95, captcahCanvas.height - 5);\r\n\t\t\t\r\n\t\t\tctx.beginPath();\r\n\r\n\t\t\tif (this.config.type !== 3) {\r\n\t\t\t\tcaptcahCanvas.style.letterSpacing = 15 + 'px';\r\n\t\t\t\tctx.font = this.config.font.size + ' ' + this.config.font.family;\r\n\t\t\t\tctx.fillStyle = this.config.font.color;\r\n\t\t\t\tctx.textBaseline = 'middle';\r\n\t\t\t\tctx.fillText(this.code, 40, 50);\r\n\t\t\t\tif (this.config.back.stroke) {\r\n\t\t\t\t\tctx.strokeStyle = this.config.back.stroke;\r\n\t\t\t\t\tfor (var i = 0; i < 150; i++) {\r\n\t\t\t\t\t\tctx.moveTo(Math.random() * 300, Math.random() * 300);\r\n\t\t\t\t\t\tctx.lineTo(Math.random() * 300, Math.random() * 300);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctx.stroke();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tctx.fillStyle = '#000';\r\n\t\t\t\tlet position = {\r\n\t\t\t\t\tx: 20,\r\n\t\t\t\t\ty: 20,\r\n\t\t\t\t\twidth: 30,\r\n\t\t\t\t\theight: 30,\r\n\t\t\t\t\tthickness: 1\r\n\t\t\t\t}\r\n\t\t\t\tctx.fillRect(position.x - (position.thickness), position.y - (position.thickness), position.width + (position.thickness * 2), position.height + (position.thickness * 2));\r\n\t\t\t\tctx.fillStyle = '#FFF';\r\n\t\t\t\tctx.fillRect(position.x, position.y, position.width, position.height);\r\n\t\t\t\tctx.font = '15px ' + this.config.font.family;\r\n\t\t\t\tctx.fillStyle = this.config.font.color;\r\n\t\t\t\tctx.fillText('I\\'m not a robot', (position.x) + position.width + 5, (position.y * 2));\r\n\t\t\t\tcaptcahCanvas.addEventListener('mousedown', (e: any) => {\r\n\t\t\t\t\tlet clickPosition = this.getMousePosition(captcahCanvas, e);\r\n\t\t\t\t\tlet midOfBox = {\r\n\t\t\t\t\t\tx: position.x + position.width / 2,\r\n\t\t\t\t\t\ty: position.y + position.height / 2\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.resultCode = 1;\r\n\t\t\t\t\tif (Math.abs(clickPosition.x - midOfBox.x) <= 5 &&\r\n\t\t\t\t\t\tMath.abs(clickPosition.y - midOfBox.y) <= 5) { /// it is a robot\r\n\t\t\t\t\t\tthis.captch_input = 0;\r\n\t\t\t\t\t} else { // it is a human\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t(clickPosition.x >= position.x && clickPosition.x <= (position.x + position.width)) &&\r\n\t\t\t\t\t\t\t(clickPosition.y >= position.y && clickPosition.y <= (position.y + position.height))\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tthis.captch_input = 1;\r\n\t\t\t\t\t\t\tctx.font = '30px ' + this.config.font.family;\r\n\t\t\t\t\t\t\tctx.fillText('✔', position.x, position.y + position.height - 5);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.checkCaptcha();\r\n\t\t\t\t})\r\n\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t}, 100);\r\n\t}\r\n\r\n\tplayCaptcha() {\r\n\t\tvar msg = new SpeechSynthesisUtterance(this.code.split('').join(' '));\r\n\t\tmsg.pitch = 1;\r\n\t\twindow.speechSynthesis.speak(msg);\r\n\t}\r\n\r\n\tcheckCaptcha() {\r\n\t\tif (this.captch_input != this.resultCode) {\r\n\t\t\tthis.captchService.setCaptchaStatus(false);\r\n\r\n\t\t} else {\r\n\t\t\tthis.captchService.setCaptchaStatus(true);\r\n\t\t}\r\n\t}\r\n\r\n\tgetMousePosition(canvas: any, event: any) {\r\n\t\tlet rect = canvas.getBoundingClientRect();\r\n\t\tlet x = event.clientX - rect.left;\r\n\t\tlet y = event.clientY - rect.top;\r\n\t\treturn {\r\n\t\t\tx: x,\r\n\t\t\ty: y\r\n\t\t}\r\n\t}\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxCaptchaComponent } from './ngx-captcha.component';\r\nimport {NgxCaptchaService} from './ngx-captcha.service';\r\n\r\n\r\n@NgModule({\r\n  declarations: [NgxCaptchaComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule\r\n  ],\r\n  exports: [NgxCaptchaComponent]\r\n})\r\nexport class NgxCaptchaModule {\r\n  static forRoot(): ModuleWithProviders<any> {\r\n    return {\r\n      ngModule: NgxCaptchaModule,\r\n      providers: [ NgxCaptchaService ]\r\n    };\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of ngx-captcha\r\n */\r\n\r\nexport * from './lib/ngx-captcha.service';\r\nexport * from './lib/ngx-captcha.component';\r\nexport * from './lib/ngx-captcha.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}