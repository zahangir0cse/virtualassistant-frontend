{"ast":null,"code":"import { Injectable, Inject, forwardRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Ng2PicaService } from 'ng2-pica';\nimport { ImgExifService } from './img-exif.service';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ng2-pica';\nimport * as ɵngcc2 from './img-exif.service';\n\nvar ImgMaxPXSizeService = function () {\n  function ImgMaxPXSizeService(ng2PicaService, imageExifService) {\n    this.ng2PicaService = ng2PicaService;\n    this.imageExifService = imageExifService;\n  }\n\n  ImgMaxPXSizeService.prototype.resizeImage = function (file, maxWidth, maxHeight, logExecutionTime) {\n    var _this = this;\n\n    if (logExecutionTime === void 0) {\n      logExecutionTime = false;\n    }\n\n    var resizedFileSubject = new Subject();\n    this.timeAtStart = new Date().getTime();\n\n    if (file.type !== \"image/jpeg\" && file.type !== \"image/png\") {\n      //END OF RESIZE\n      setTimeout(function () {\n        resizedFileSubject.error({\n          resizedFile: file,\n          reason: \"The provided File is neither of type jpg nor of type png.\",\n          error: \"INVALID_EXTENSION\"\n        });\n      }, 0);\n      return resizedFileSubject.asObservable();\n    }\n\n    var img = new Image();\n    var self = this;\n\n    img.onload = function () {\n      _this.imageExifService.getOrientedImage(img).then(function (orientedImg) {\n        window.URL.revokeObjectURL(img.src);\n        var currentWidth = orientedImg.width;\n        var currentHeight = orientedImg.height;\n        var newWidth = currentWidth;\n        var newHeight = currentHeight;\n\n        if (newWidth > maxWidth) {\n          newWidth = maxWidth; //resize height proportionally\n\n          var ratio = maxWidth / currentWidth; //is gonna be <1\n\n          newHeight = newHeight * ratio;\n        }\n\n        currentHeight = newHeight;\n\n        if (newHeight > maxHeight) {\n          newHeight = maxHeight; //resize width proportionally\n\n          var ratio = maxHeight / currentHeight; //is gonna be <1\n\n          newWidth = newWidth * ratio;\n        }\n\n        if (newHeight === orientedImg.height && newWidth === orientedImg.width) {\n          //no resizing necessary\n          resizedFileSubject.next(file);\n          self.logExecutionTime(logExecutionTime);\n        } else {\n          self.ng2PicaService.resize([file], newWidth, newHeight).subscribe(function (result) {\n            //all good, result is a file\n            resizedFileSubject.next(result);\n            self.logExecutionTime(logExecutionTime);\n          }, function (error) {\n            //something went wrong \n            resizedFileSubject.error({\n              resizedFile: file,\n              reason: error,\n              error: \"PICA_ERROR\"\n            });\n            self.logExecutionTime(logExecutionTime);\n          });\n        }\n      });\n    };\n\n    img.src = window.URL.createObjectURL(file);\n    return resizedFileSubject.asObservable();\n  };\n\n  ;\n\n  ImgMaxPXSizeService.prototype.logExecutionTime = function (logExecutionTime) {\n    if (logExecutionTime) {\n      console.info(\"Execution time: \", new Date().getTime() - this.timeAtStart + \"ms\");\n    }\n  };\n  /** @nocollapse */\n\n\n  ImgMaxPXSizeService.ctorParameters = function () {\n    return [{\n      type: Ng2PicaService,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return Ng2PicaService;\n        })]\n      }]\n    }, {\n      type: ImgExifService,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return ImgExifService;\n        })]\n      }]\n    }];\n  };\n\n  ImgMaxPXSizeService.ɵfac = function ImgMaxPXSizeService_Factory(t) {\n    return new (t || ImgMaxPXSizeService)(ɵngcc0.ɵɵinject(forwardRef(function () {\n      return Ng2PicaService;\n    })), ɵngcc0.ɵɵinject(forwardRef(function () {\n      return ImgExifService;\n    })));\n  };\n\n  ImgMaxPXSizeService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ImgMaxPXSizeService,\n    factory: function factory(t) {\n      return ImgMaxPXSizeService.ɵfac(t);\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(ImgMaxPXSizeService, [{\n      type: Injectable\n    }], function () {\n      return [{\n        type: ɵngcc1.Ng2PicaService,\n        decorators: [{\n          type: Inject,\n          args: [forwardRef(function () {\n            return Ng2PicaService;\n          })]\n        }]\n      }, {\n        type: ɵngcc2.ImgExifService,\n        decorators: [{\n          type: Inject,\n          args: [forwardRef(function () {\n            return ImgExifService;\n          })]\n        }]\n      }];\n    }, null);\n  })();\n\n  return ImgMaxPXSizeService;\n}();\n\nexport { ImgMaxPXSizeService };","map":{"version":3,"sources":["img-maxpx-size.service.js"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, forwardRef } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Ng2PicaService } from 'ng2-pica';\r\nimport { ImgExifService } from './img-exif.service';\r\nvar ImgMaxPXSizeService = /** @class */ (function () {\r\n    function ImgMaxPXSizeService(ng2PicaService, imageExifService) {\r\n        this.ng2PicaService = ng2PicaService;\r\n        this.imageExifService = imageExifService;\r\n    }\r\n    ImgMaxPXSizeService.prototype.resizeImage = function (file, maxWidth, maxHeight, logExecutionTime) {\r\n        var _this = this;\r\n        if (logExecutionTime === void 0) { logExecutionTime = false; }\r\n        var resizedFileSubject = new Subject();\r\n        this.timeAtStart = new Date().getTime();\r\n        if (file.type !== \"image/jpeg\" && file.type !== \"image/png\") {\r\n            //END OF RESIZE\r\n            setTimeout(function () {\r\n                resizedFileSubject.error({ resizedFile: file, reason: \"The provided File is neither of type jpg nor of type png.\", error: \"INVALID_EXTENSION\" });\r\n            }, 0);\r\n            return resizedFileSubject.asObservable();\r\n        }\r\n        var img = new Image();\r\n        var self = this;\r\n        img.onload = function () {\r\n            _this.imageExifService.getOrientedImage(img).then(function (orientedImg) {\r\n                window.URL.revokeObjectURL(img.src);\r\n                var currentWidth = orientedImg.width;\r\n                var currentHeight = orientedImg.height;\r\n                var newWidth = currentWidth;\r\n                var newHeight = currentHeight;\r\n                if (newWidth > maxWidth) {\r\n                    newWidth = maxWidth;\r\n                    //resize height proportionally\r\n                    var ratio = maxWidth / currentWidth; //is gonna be <1\r\n                    newHeight = newHeight * ratio;\r\n                }\r\n                currentHeight = newHeight;\r\n                if (newHeight > maxHeight) {\r\n                    newHeight = maxHeight;\r\n                    //resize width proportionally\r\n                    var ratio = maxHeight / currentHeight; //is gonna be <1\r\n                    newWidth = newWidth * ratio;\r\n                }\r\n                if (newHeight === orientedImg.height && newWidth === orientedImg.width) {\r\n                    //no resizing necessary\r\n                    resizedFileSubject.next(file);\r\n                    self.logExecutionTime(logExecutionTime);\r\n                }\r\n                else {\r\n                    self.ng2PicaService.resize([file], newWidth, newHeight).subscribe(function (result) {\r\n                        //all good, result is a file\r\n                        resizedFileSubject.next(result);\r\n                        self.logExecutionTime(logExecutionTime);\r\n                    }, function (error) {\r\n                        //something went wrong \r\n                        resizedFileSubject.error({ resizedFile: file, reason: error, error: \"PICA_ERROR\" });\r\n                        self.logExecutionTime(logExecutionTime);\r\n                    });\r\n                }\r\n            });\r\n        };\r\n        img.src = window.URL.createObjectURL(file);\r\n        return resizedFileSubject.asObservable();\r\n    };\r\n    ;\r\n    ImgMaxPXSizeService.prototype.logExecutionTime = function (logExecutionTime) {\r\n        if (logExecutionTime) {\r\n            console.info(\"Execution time: \", new Date().getTime() - this.timeAtStart + \"ms\");\r\n        }\r\n    };\r\n    ImgMaxPXSizeService.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    ImgMaxPXSizeService.ctorParameters = function () { return [\r\n        { type: Ng2PicaService, decorators: [{ type: Inject, args: [forwardRef(function () { return Ng2PicaService; }),] }] },\r\n        { type: ImgExifService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgExifService; }),] }] }\r\n    ]; };\r\n    return ImgMaxPXSizeService;\r\n}());\r\nexport { ImgMaxPXSizeService };\r\n"]},"metadata":{},"sourceType":"module"}