{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport * as exifr from 'exifr/dist/mini.legacy.umd';\nimport * as ɵngcc0 from '@angular/core';\n\nvar ImgExifService = function () {\n  function ImgExifService() {}\n\n  ImgExifService.prototype.getOrientedImage = function (image) {\n    return new Promise(function (resolve) {\n      var img;\n      exifr.orientation(image).catch(function (err) {\n        return undefined;\n      }).then(function (orientation) {\n        if (orientation != 1) {\n          var canvas = document.createElement(\"canvas\"),\n              ctx = canvas.getContext(\"2d\"),\n              cw = image.width,\n              ch = image.height,\n              cx = 0,\n              cy = 0,\n              deg = 0;\n\n          switch (orientation) {\n            case 3:\n            case 4:\n              cx = -image.width;\n              cy = -image.height;\n              deg = 180;\n              break;\n\n            case 5:\n            case 6:\n              cw = image.height;\n              ch = image.width;\n              cy = -image.height;\n              deg = 90;\n              break;\n\n            case 7:\n            case 8:\n              cw = image.height;\n              ch = image.width;\n              cx = -image.width;\n              deg = 270;\n              break;\n\n            default:\n              break;\n          }\n\n          canvas.width = cw;\n          canvas.height = ch;\n\n          if ([2, 4, 5, 7].indexOf(orientation) > -1) {\n            //flip image\n            ctx.translate(cw, 0);\n            ctx.scale(-1, 1);\n          }\n\n          ctx.rotate(deg * Math.PI / 180);\n          ctx.drawImage(image, cx, cy);\n          img = document.createElement(\"img\");\n          img.width = cw;\n          img.height = ch;\n          img.addEventListener('load', function () {\n            resolve(img);\n          });\n          img.src = canvas.toDataURL(\"image/png\");\n        } else {\n          resolve(image);\n        }\n      });\n    });\n  };\n\n  ImgExifService.ɵfac = function ImgExifService_Factory(t) {\n    return new (t || ImgExifService)();\n  };\n\n  ImgExifService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ImgExifService,\n    factory: function factory(t) {\n      return ImgExifService.ɵfac(t);\n    }\n  });\n  return ImgExifService;\n}();\n\nexport { ImgExifService };","map":null,"metadata":{},"sourceType":"module"}