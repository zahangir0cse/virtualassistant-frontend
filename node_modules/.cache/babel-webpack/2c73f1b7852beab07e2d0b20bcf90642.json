{"ast":null,"code":"import { Injectable, Inject, forwardRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Ng2PicaService } from 'ng2-pica';\nimport { ImgExifService } from './img-exif.service';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ng2-pica';\nimport * as ɵngcc2 from './img-exif.service';\n\nvar ImgMaxPXSizeService = function () {\n  function ImgMaxPXSizeService(ng2PicaService, imageExifService) {\n    this.ng2PicaService = ng2PicaService;\n    this.imageExifService = imageExifService;\n  }\n\n  ImgMaxPXSizeService.prototype.resizeImage = function (file, maxWidth, maxHeight, logExecutionTime) {\n    var _this = this;\n\n    if (logExecutionTime === void 0) {\n      logExecutionTime = false;\n    }\n\n    var resizedFileSubject = new Subject();\n    this.timeAtStart = new Date().getTime();\n\n    if (file.type !== \"image/jpeg\" && file.type !== \"image/png\") {\n      //END OF RESIZE\n      setTimeout(function () {\n        resizedFileSubject.error({\n          resizedFile: file,\n          reason: \"The provided File is neither of type jpg nor of type png.\",\n          error: \"INVALID_EXTENSION\"\n        });\n      }, 0);\n      return resizedFileSubject.asObservable();\n    }\n\n    var img = new Image();\n    var self = this;\n\n    img.onload = function () {\n      _this.imageExifService.getOrientedImage(img).then(function (orientedImg) {\n        window.URL.revokeObjectURL(img.src);\n        var currentWidth = orientedImg.width;\n        var currentHeight = orientedImg.height;\n        var newWidth = currentWidth;\n        var newHeight = currentHeight;\n\n        if (newWidth > maxWidth) {\n          newWidth = maxWidth; //resize height proportionally\n\n          var ratio = maxWidth / currentWidth; //is gonna be <1\n\n          newHeight = newHeight * ratio;\n        }\n\n        currentHeight = newHeight;\n\n        if (newHeight > maxHeight) {\n          newHeight = maxHeight; //resize width proportionally\n\n          var ratio = maxHeight / currentHeight; //is gonna be <1\n\n          newWidth = newWidth * ratio;\n        }\n\n        if (newHeight === orientedImg.height && newWidth === orientedImg.width) {\n          //no resizing necessary\n          resizedFileSubject.next(file);\n          self.logExecutionTime(logExecutionTime);\n        } else {\n          self.ng2PicaService.resize([file], newWidth, newHeight).subscribe(function (result) {\n            //all good, result is a file\n            resizedFileSubject.next(result);\n            self.logExecutionTime(logExecutionTime);\n          }, function (error) {\n            //something went wrong \n            resizedFileSubject.error({\n              resizedFile: file,\n              reason: error,\n              error: \"PICA_ERROR\"\n            });\n            self.logExecutionTime(logExecutionTime);\n          });\n        }\n      });\n    };\n\n    img.src = window.URL.createObjectURL(file);\n    return resizedFileSubject.asObservable();\n  };\n\n  ;\n\n  ImgMaxPXSizeService.prototype.logExecutionTime = function (logExecutionTime) {\n    if (logExecutionTime) {\n      console.info(\"Execution time: \", new Date().getTime() - this.timeAtStart + \"ms\");\n    }\n  };\n\n  ImgMaxPXSizeService.ɵfac = function ImgMaxPXSizeService_Factory(t) {\n    return new (t || ImgMaxPXSizeService)(ɵngcc0.ɵɵinject(forwardRef(function () {\n      return Ng2PicaService;\n    })), ɵngcc0.ɵɵinject(forwardRef(function () {\n      return ImgExifService;\n    })));\n  };\n\n  ImgMaxPXSizeService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ImgMaxPXSizeService,\n    factory: function factory(t) {\n      return ImgMaxPXSizeService.ɵfac(t);\n    }\n  });\n  return ImgMaxPXSizeService;\n}();\n\nexport { ImgMaxPXSizeService };","map":null,"metadata":{},"sourceType":"module"}