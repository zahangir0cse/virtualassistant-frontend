{"ast":null,"code":"import { Injectable, Inject, forwardRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ImgExifService } from './img-exif.service';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './img-exif.service';\nvar MAX_STEPS = 15;\n\nvar ImgMaxSizeService = function () {\n  function ImgMaxSizeService(imageExifService) {\n    this.imageExifService = imageExifService;\n  }\n\n  ImgMaxSizeService.prototype.compressImage = function (file, maxSizeInMB, ignoreAlpha, logExecutionTime) {\n    var _this = this;\n\n    if (ignoreAlpha === void 0) {\n      ignoreAlpha = false;\n    }\n\n    if (logExecutionTime === void 0) {\n      logExecutionTime = false;\n    }\n\n    var compressedFileSubject = new Subject();\n    this.timeAtStart = new Date().getTime();\n    this.initialFile = file;\n\n    if (file.type !== \"image/jpeg\" && file.type !== \"image/png\") {\n      //END OF COMPRESSION\n      setTimeout(function () {\n        compressedFileSubject.error({\n          compressedFile: file,\n          reason: \"File provided is neither of type jpg nor of type png.\",\n          error: \"INVALID_EXTENSION\"\n        });\n      }, 0);\n      return compressedFileSubject.asObservable();\n    }\n\n    var oldFileSize = file.size / 1024 / 1024;\n\n    if (oldFileSize < maxSizeInMB) {\n      // END OF COMPRESSION\n      // FILE SIZE ALREADY BELOW MAX_SIZE -> no compression needed\n      setTimeout(function () {\n        compressedFileSubject.next(file);\n      }, 0);\n      return compressedFileSubject.asObservable();\n    }\n\n    var cvs = document.createElement('canvas');\n    var ctx = cvs.getContext('2d');\n    var img = new Image();\n    var self = this;\n\n    img.onload = function () {\n      _this.imageExifService.getOrientedImage(img).then(function (orientedImg) {\n        window.URL.revokeObjectURL(img.src);\n        cvs.width = orientedImg.width;\n        cvs.height = orientedImg.height;\n        ctx.drawImage(orientedImg, 0, 0);\n        var imageData = ctx.getImageData(0, 0, orientedImg.width, orientedImg.height);\n\n        if (file.type === \"image/png\" && _this.isImgUsingAlpha(imageData) && !ignoreAlpha) {\n          //png image with alpha\n          compressedFileSubject.error({\n            compressedFile: file,\n            reason: \"File provided is a png image which uses the alpha channel. No compression possible.\",\n            error: \"PNG_WITH_ALPHA\"\n          });\n        }\n\n        ctx = cvs.getContext('2d', {\n          'alpha': false\n        });\n        ctx.drawImage(orientedImg, 0, 0);\n        self.getCompressedFile(cvs, 50, maxSizeInMB, 1).then(function (compressedFile) {\n          compressedFileSubject.next(compressedFile);\n          self.logExecutionTime(logExecutionTime);\n        }).catch(function (error) {\n          compressedFileSubject.error(error);\n          self.logExecutionTime(logExecutionTime);\n        });\n      });\n    };\n\n    img.src = window.URL.createObjectURL(file);\n    return compressedFileSubject.asObservable();\n  };\n\n  ;\n\n  ImgMaxSizeService.prototype.getCompressedFile = function (cvs, quality, maxSizeInMB, currentStep) {\n    var _this = this;\n\n    var result = new Promise(function (resolve, reject) {\n      cvs.toBlob(function (blob) {\n        if (currentStep + 1 > MAX_STEPS) {\n          //COMPRESSION END\n          //maximal steps reached\n          reject({\n            compressedFile: _this.getResultFile(blob),\n            reason: \"Could not find the correct compression quality in \" + MAX_STEPS + \" steps.\",\n            error: \"MAX_STEPS_EXCEEDED\"\n          });\n        } else {\n          var newQuality = _this.getCalculatedQuality(blob, quality, maxSizeInMB, currentStep);\n\n          _this.checkCompressionStatus(cvs, blob, quality, maxSizeInMB, currentStep, newQuality).then(function (result) {\n            resolve(result);\n          }).catch(function (result) {\n            reject(result);\n          });\n        }\n      }, \"image/jpeg\", quality / 100);\n    });\n    return result;\n  };\n\n  ImgMaxSizeService.prototype.getResultFile = function (blob) {\n    return this.generateResultFile(blob, this.initialFile.name, this.initialFile.type, new Date().getTime());\n  };\n\n  ImgMaxSizeService.prototype.generateResultFile = function (blob, name, type, lastModified) {\n    var resultFile = new Blob([blob], {\n      type: type\n    });\n    return this.blobToFile(resultFile, name, lastModified);\n  };\n\n  ImgMaxSizeService.prototype.blobToFile = function (blob, name, lastModified) {\n    var file = blob;\n    file.name = name;\n    file.lastModified = lastModified; //Cast to a File() type\n\n    return file;\n  };\n\n  ImgMaxSizeService.prototype.getCalculatedQuality = function (blob, quality, maxSizeInMB, currentStep) {\n    //CALCULATE NEW QUALITY\n    var currentSize = blob.size / 1024 / 1024;\n    var ratioMaxSizeToCurrentSize = maxSizeInMB / currentSize;\n\n    if (ratioMaxSizeToCurrentSize > 5) {\n      //max ratio to avoid extreme quality values\n      ratioMaxSizeToCurrentSize = 5;\n    }\n\n    var ratioMaxSizeToInitialSize = currentSize / (this.initialFile.size / 1024 / 1024);\n\n    if (ratioMaxSizeToInitialSize < 0.05) {\n      //min ratio to avoid extreme quality values\n      ratioMaxSizeToInitialSize = 0.05;\n    }\n\n    var newQuality = 0;\n    var multiplicator = Math.abs(ratioMaxSizeToInitialSize - 1) * 10 / (currentStep * 1.7) / ratioMaxSizeToCurrentSize;\n\n    if (multiplicator < 1) {\n      multiplicator = 1;\n    }\n\n    if (ratioMaxSizeToCurrentSize >= 1) {\n      newQuality = quality + (ratioMaxSizeToCurrentSize - 1) * 10 * multiplicator;\n    } else {\n      newQuality = quality - (1 - ratioMaxSizeToCurrentSize) * 10 * multiplicator;\n    }\n\n    if (newQuality > 100) {\n      //max quality = 100, so let's set the new quality to the value in between the old quality and 100 in case of > 100\n      newQuality = quality + (100 - quality) / 2;\n    }\n\n    if (newQuality < 0) {\n      //min quality = 0, so let's set the new quality to the value in between the old quality and 0 in case of < 0\n      newQuality = quality - quality / 2;\n    }\n\n    return newQuality;\n  };\n\n  ImgMaxSizeService.prototype.checkCompressionStatus = function (cvs, blob, quality, maxSizeInMB, currentStep, newQuality) {\n    var _this = this;\n\n    var result = new Promise(function (resolve, reject) {\n      if (quality === 100 && newQuality >= 100) {\n        //COMPRESSION END\n        //Seems like quality 100 is max but file still too small, case that shouldn't exist as the compression shouldn't even have started in the first place\n        reject({\n          compressedFile: _this.initialFile,\n          reason: \"Unfortunately there was an error while compressing the file.\",\n          error: \"FILE_BIGGER_THAN_INITIAL_FILE\"\n        });\n      } else if (quality < 1 && newQuality < quality) {\n        //COMPRESSION END\n        //File size still too big but can't compress further than quality=0\n        reject({\n          compressedFile: _this.getResultFile(blob),\n          reason: \"Could not compress image enough to fit the maximal file size limit.\",\n          error: \"UNABLE_TO_COMPRESS_ENOUGH\"\n        });\n      } else if (newQuality > quality && Math.round(quality) == Math.round(newQuality)) {\n        //COMPRESSION END\n        //next steps quality would be the same quality but newQuality is slightly bigger than old one, means we most likely found the nearest quality to compress to maximal size\n        resolve(_this.getResultFile(blob));\n      } else if (currentStep > 5 && newQuality > quality && newQuality < quality + 2) {\n        //COMPRESSION END\n        //for some rare occasions the algorithm might be stuck around e.g. 98.5 and 97.4 because of the maxQuality of 100, the current quality is the nearest possible quality in that case\n        resolve(_this.getResultFile(blob));\n      } else if (newQuality > quality && Number.isInteger(quality) && Math.floor(newQuality) == quality) {\n        //COMPRESSION END\n\n        /*\r\n            in the previous step if ((quality > newQuality) && (Math.round(quality) == Math.round(newQuality))) applied, so\r\n            newQuality = Math.round(newQuality) - 1; this was done to reduce the quality at least a full integer down to not waste a step\r\n            with the same compression rate quality as before. Now, the newQuality is still only in between the old quality (e.g. 93)\r\n            and the newQuality (e.g. 94) which most likely means that the value for the newQuality (the bigger one) would make the filesize\r\n            too big so we should just stick with the current, lower quality and return that file.\r\n        */\n        resolve(_this.getResultFile(blob));\n      } else {\n        //CONTINUE COMPRESSION\n        if (quality > newQuality && Math.round(quality) == Math.round(newQuality)) {\n          //quality can only be an integer -> make sure difference between old quality and new one is at least a whole integer number\n          // - it would be nonsense to compress again with the same quality\n          newQuality = Math.round(newQuality) - 1;\n        } //recursively call function again\n\n\n        resolve(_this.getCompressedFile(cvs, newQuality, maxSizeInMB, currentStep + 1));\n      }\n    });\n    return result;\n  };\n\n  ImgMaxSizeService.prototype.isImgUsingAlpha = function (imageData) {\n    for (var i = 0; i < imageData.data.length; i += 4) {\n      if (imageData.data[i + 3] !== 255) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  ImgMaxSizeService.prototype.logExecutionTime = function (logExecutionTime) {\n    if (logExecutionTime) {\n      console.info(\"Execution time: \", new Date().getTime() - this.timeAtStart + \"ms\");\n    }\n  };\n  /** @nocollapse */\n\n\n  ImgMaxSizeService.ctorParameters = function () {\n    return [{\n      type: ImgExifService,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return ImgExifService;\n        })]\n      }]\n    }];\n  };\n\n  ImgMaxSizeService.ɵfac = function ImgMaxSizeService_Factory(t) {\n    return new (t || ImgMaxSizeService)(ɵngcc0.ɵɵinject(forwardRef(function () {\n      return ImgExifService;\n    })));\n  };\n\n  ImgMaxSizeService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ImgMaxSizeService,\n    factory: function factory(t) {\n      return ImgMaxSizeService.ɵfac(t);\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(ImgMaxSizeService, [{\n      type: Injectable\n    }], function () {\n      return [{\n        type: ɵngcc1.ImgExifService,\n        decorators: [{\n          type: Inject,\n          args: [forwardRef(function () {\n            return ImgExifService;\n          })]\n        }]\n      }];\n    }, null);\n  })();\n\n  return ImgMaxSizeService;\n}();\n\nexport { ImgMaxSizeService };","map":{"version":3,"sources":["img-max-size.service.js"],"names":[],"mappings":"AAAA,SAAA,UAAA,EAAA,MAAA,EAAA,UAAA,QAAA,eAAA;AACA,SAAA,OAAA,QAAA,MAAA;AACA,SAAA,cAAA,QAAA,oBAAA;;;AACA,IAAA,SAAA,GAAA,EAAA;;AACA,IAAA,iBAAA,GAAA,YAAA;AACA,WAAA,iBAAA,CAAA,gBAAA,EAAA;AACA,SAAA,gBAAA,GAAA,gBAAA;AACA;;AACA,EAAA,iBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAA,IAAA,EAAA,WAAA,EAAA,WAAA,EAAA,gBAAA,EAAA;AACA,QAAA,KAAA,GAAA,IAAA;;AACA,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,KAAA;AAAA;;AACA,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,KAAA;AAAA;;AACA,QAAA,qBAAA,GAAA,IAAA,OAAA,EAAA;AACA,SAAA,WAAA,GAAA,IAAA,IAAA,GAAA,OAAA,EAAA;AACA,SAAA,WAAA,GAAA,IAAA;;AACA,QAAA,IAAA,CAAA,IAAA,KAAA,YAAA,IAAA,IAAA,CAAA,IAAA,KAAA,WAAA,EAAA;AACA;AACA,MAAA,UAAA,CAAA,YAAA;AACA,QAAA,qBAAA,CAAA,KAAA,CAAA;AAAA,UAAA,cAAA,EAAA,IAAA;AAAA,UAAA,MAAA,EAAA,uDAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAAA;AACA,OAFA,EAEA,CAFA,CAAA;AAGA,aAAA,qBAAA,CAAA,YAAA,EAAA;AACA;;AACA,QAAA,WAAA,GAAA,IAAA,CAAA,IAAA,GAAA,IAAA,GAAA,IAAA;;AACA,QAAA,WAAA,GAAA,WAAA,EAAA;AACA;AACA;AACA,MAAA,UAAA,CAAA,YAAA;AAAA,QAAA,qBAAA,CAAA,IAAA,CAAA,IAAA;AAAA,OAAA,EAAA,CAAA,CAAA;AACA,aAAA,qBAAA,CAAA,YAAA,EAAA;AACA;;AACA,QAAA,GAAA,GAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA;AACA,QAAA,GAAA,GAAA,GAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AACA,QAAA,GAAA,GAAA,IAAA,KAAA,EAAA;AACA,QAAA,IAAA,GAAA,IAAA;;AACA,IAAA,GAAA,CAAA,MAAA,GAAA,YAAA;AACA,MAAA,KAAA,CAAA,gBAAA,CAAA,gBAAA,CAAA,GAAA,EAAA,IAAA,CAAA,UAAA,WAAA,EAAA;AACA,QAAA,MAAA,CAAA,GAAA,CAAA,eAAA,CAAA,GAAA,CAAA,GAAA;AACA,QAAA,GAAA,CAAA,KAAA,GAAA,WAAA,CAAA,KAAA;AACA,QAAA,GAAA,CAAA,MAAA,GAAA,WAAA,CAAA,MAAA;AACA,QAAA,GAAA,CAAA,SAAA,CAAA,WAAA,EAAA,CAAA,EAAA,CAAA;AACA,YAAA,SAAA,GAAA,GAAA,CAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,WAAA,CAAA,KAAA,EAAA,WAAA,CAAA,MAAA,CAAA;;AACA,YAAA,IAAA,CAAA,IAAA,KAAA,WAAA,IAAA,KAAA,CAAA,eAAA,CAAA,SAAA,CAAA,IAAA,CAAA,WAAA,EAAA;AACA;AACA,UAAA,qBAAA,CAAA,KAAA,CAAA;AAAA,YAAA,cAAA,EAAA,IAAA;AAAA,YAAA,MAAA,EAAA,qFAAA;AAAA,YAAA,KAAA,EAAA;AAAA,WAAA;AACA;;AACA,QAAA,GAAA,GAAA,GAAA,CAAA,UAAA,CAAA,IAAA,EAAA;AAAA,mBAAA;AAAA,SAAA,CAAA;AACA,QAAA,GAAA,CAAA,SAAA,CAAA,WAAA,EAAA,CAAA,EAAA,CAAA;AACA,QAAA,IAAA,CAAA,iBAAA,CAAA,GAAA,EAAA,EAAA,EAAA,WAAA,EAAA,CAAA,EAAA,IAAA,CAAA,UAAA,cAAA,EAAA;AACA,UAAA,qBAAA,CAAA,IAAA,CAAA,cAAA;AACA,UAAA,IAAA,CAAA,gBAAA,CAAA,gBAAA;AACA,SAHA,EAGA,KAHA,CAGA,UAAA,KAAA,EAAA;AACA,UAAA,qBAAA,CAAA,KAAA,CAAA,KAAA;AACA,UAAA,IAAA,CAAA,gBAAA,CAAA,gBAAA;AACA,SANA;AAOA,OAnBA;AAoBA,KArBA;;AAsBA,IAAA,GAAA,CAAA,GAAA,GAAA,MAAA,CAAA,GAAA,CAAA,eAAA,CAAA,IAAA,CAAA;AACA,WAAA,qBAAA,CAAA,YAAA,EAAA;AACA,GAjDA;;AAkDA;;AACA,EAAA,iBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAA,GAAA,EAAA,OAAA,EAAA,WAAA,EAAA,WAAA,EAAA;AACA,QAAA,KAAA,GAAA,IAAA;;AACA,QAAA,MAAA,GAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AACA,MAAA,GAAA,CAAA,MAAA,CAAA,UAAA,IAAA,EAAA;AACA,YAAA,WAAA,GAAA,CAAA,GAAA,SAAA,EAAA;AACA;AACA;AACA,UAAA,MAAA,CAAA;AAAA,YAAA,cAAA,EAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA;AAAA,YAAA,MAAA,EAAA,uDAAA,SAAA,GAAA,SAAA;AAAA,YAAA,KAAA,EAAA;AAAA,WAAA,CAAA;AACA,SAJA,MAKA;AACA,cAAA,UAAA,GAAA,KAAA,CAAA,oBAAA,CAAA,IAAA,EAAA,OAAA,EAAA,WAAA,EAAA,WAAA,CAAA;;AACA,UAAA,KAAA,CAAA,sBAAA,CAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,WAAA,EAAA,WAAA,EAAA,UAAA,EACA,IADA,CACA,UAAA,MAAA,EAAA;AACA,YAAA,OAAA,CAAA,MAAA,CAAA;AACA,WAHA,EAIA,KAJA,CAIA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,MAAA,CAAA;AACA,WANA;AAOA;AACA,OAhBA,EAgBA,YAhBA,EAgBA,OAAA,GAAA,GAhBA;AAiBA,KAlBA,CAAA;AAmBA,WAAA,MAAA;AACA,GAtBA;;AAuBA,EAAA,iBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAA,IAAA,EAAA;AACA,WAAA,KAAA,kBAAA,CAAA,IAAA,EAAA,KAAA,WAAA,CAAA,IAAA,EAAA,KAAA,WAAA,CAAA,IAAA,EAAA,IAAA,IAAA,GAAA,OAAA,EAAA,CAAA;AACA,GAFA;;AAGA,EAAA,iBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,YAAA,EAAA;AACA,QAAA,UAAA,GAAA,IAAA,IAAA,CAAA,CAAA,IAAA,CAAA,EAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA,CAAA;AACA,WAAA,KAAA,UAAA,CAAA,UAAA,EAAA,IAAA,EAAA,YAAA,CAAA;AACA,GAHA;;AAIA,EAAA,iBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAA,IAAA,EAAA,IAAA,EAAA,YAAA,EAAA;AACA,QAAA,IAAA,GAAA,IAAA;AACA,IAAA,IAAA,CAAA,IAAA,GAAA,IAAA;AACA,IAAA,IAAA,CAAA,YAAA,GAAA,YAAA,CAHA,CAIA;;AACA,WAAA,IAAA;AACA,GANA;;AAOA,EAAA,iBAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,UAAA,IAAA,EAAA,OAAA,EAAA,WAAA,EAAA,WAAA,EAAA;AACA;AACA,QAAA,WAAA,GAAA,IAAA,CAAA,IAAA,GAAA,IAAA,GAAA,IAAA;AACA,QAAA,yBAAA,GAAA,WAAA,GAAA,WAAA;;AACA,QAAA,yBAAA,GAAA,CAAA,EAAA;AACA;AACA,MAAA,yBAAA,GAAA,CAAA;AACA;;AACA,QAAA,yBAAA,GAAA,WAAA,IAAA,KAAA,WAAA,CAAA,IAAA,GAAA,IAAA,GAAA,IAAA,CAAA;;AACA,QAAA,yBAAA,GAAA,IAAA,EAAA;AACA;AACA,MAAA,yBAAA,GAAA,IAAA;AACA;;AACA,QAAA,UAAA,GAAA,CAAA;AACA,QAAA,aAAA,GAAA,IAAA,CAAA,GAAA,CAAA,yBAAA,GAAA,CAAA,IAAA,EAAA,IAAA,WAAA,GAAA,GAAA,IAAA,yBAAA;;AACA,QAAA,aAAA,GAAA,CAAA,EAAA;AACA,MAAA,aAAA,GAAA,CAAA;AACA;;AACA,QAAA,yBAAA,IAAA,CAAA,EAAA;AACA,MAAA,UAAA,GAAA,OAAA,GAAA,CAAA,yBAAA,GAAA,CAAA,IAAA,EAAA,GAAA,aAAA;AACA,KAFA,MAGA;AACA,MAAA,UAAA,GAAA,OAAA,GAAA,CAAA,IAAA,yBAAA,IAAA,EAAA,GAAA,aAAA;AACA;;AACA,QAAA,UAAA,GAAA,GAAA,EAAA;AACA;AACA,MAAA,UAAA,GAAA,OAAA,GAAA,CAAA,MAAA,OAAA,IAAA,CAAA;AACA;;AACA,QAAA,UAAA,GAAA,CAAA,EAAA;AACA;AACA,MAAA,UAAA,GAAA,OAAA,GAAA,OAAA,GAAA,CAAA;AACA;;AACA,WAAA,UAAA;AACA,GAjCA;;AAkCA,EAAA,iBAAA,CAAA,SAAA,CAAA,sBAAA,GAAA,UAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,WAAA,EAAA,WAAA,EAAA,UAAA,EAAA;AACA,QAAA,KAAA,GAAA,IAAA;;AACA,QAAA,MAAA,GAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AACA,UAAA,OAAA,KAAA,GAAA,IAAA,UAAA,IAAA,GAAA,EAAA;AACA;AACA;AACA,QAAA,MAAA,CAAA;AAAA,UAAA,cAAA,EAAA,KAAA,CAAA,WAAA;AAAA,UAAA,MAAA,EAAA,8DAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAAA,CAAA;AACA,OAJA,MAKA,IAAA,OAAA,GAAA,CAAA,IAAA,UAAA,GAAA,OAAA,EAAA;AACA;AACA;AACA,QAAA,MAAA,CAAA;AAAA,UAAA,cAAA,EAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA;AAAA,UAAA,MAAA,EAAA,qEAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAAA,CAAA;AACA,OAJA,MAKA,IAAA,UAAA,GAAA,OAAA,IAAA,IAAA,CAAA,KAAA,CAAA,OAAA,KAAA,IAAA,CAAA,KAAA,CAAA,UAAA,CAAA,EAAA;AACA;AACA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAA;AACA,OAJA,MAKA,IAAA,WAAA,GAAA,CAAA,IAAA,UAAA,GAAA,OAAA,IAAA,UAAA,GAAA,OAAA,GAAA,CAAA,EAAA;AACA;AACA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAA;AACA,OAJA,MAKA,IAAA,UAAA,GAAA,OAAA,IAAA,MAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,IAAA,CAAA,KAAA,CAAA,UAAA,KAAA,OAAA,EAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAA;AACA,OAVA,MAWA;AACA;AACA,YAAA,OAAA,GAAA,UAAA,IAAA,IAAA,CAAA,KAAA,CAAA,OAAA,KAAA,IAAA,CAAA,KAAA,CAAA,UAAA,CAAA,EAAA;AACA;AACA;AACA,UAAA,UAAA,GAAA,IAAA,CAAA,KAAA,CAAA,UAAA,IAAA,CAAA;AACA,SANA,CAOA;;;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,iBAAA,CAAA,GAAA,EAAA,UAAA,EAAA,WAAA,EAAA,WAAA,GAAA,CAAA,CAAA,CAAA;AACA;AACA,KA1CA,CAAA;AA2CA,WAAA,MAAA;AACA,GA9CA;;AA+CA,EAAA,iBAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAA,SAAA,EAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,MAAA,EAAA,CAAA,IAAA,CAAA,EAAA;AACA,UAAA,SAAA,CAAA,IAAA,CAAA,CAAA,GAAA,CAAA,MAAA,GAAA,EAAA;AACA,eAAA,IAAA;AACA;AACA;;AACA,WAAA,KAAA;AACA,GAPA;;AAQA,EAAA,iBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAA,gBAAA,EAAA;AACA,QAAA,gBAAA,EAAA;AACA,MAAA,OAAA,CAAA,IAAA,CAAA,kBAAA,EAAA,IAAA,IAAA,GAAA,OAAA,KAAA,KAAA,WAAA,GAAA,IAAA;AACA;AACA,GAJA;AAQA;;;AACA,EAAA,iBAAA,CAAA,cAAA,GAAA,YAAA;AAAA,WAAA,CACA;AAAA,MAAA,IAAA,EAAA,cAAA;AAAA,MAAA,UAAA,EAAA,CAAA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,IAAA,EAAA,CAAA,UAAA,CAAA,YAAA;AAAA,iBAAA,cAAA;AAAA,SAAA,CAAA;AAAA,OAAA;AAAA,KADA,CAAA;AAEA,GAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAES,G;;AACT,SAAA,iBAAA;AACA,CAlMA,EAAA;;AAmMA,SAAA,iBAAA","sourcesContent":["import { Injectable, Inject, forwardRef } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { ImgExifService } from './img-exif.service';\r\nvar MAX_STEPS = 15;\r\nvar ImgMaxSizeService = /** @class */ (function () {\r\n    function ImgMaxSizeService(imageExifService) {\r\n        this.imageExifService = imageExifService;\r\n    }\r\n    ImgMaxSizeService.prototype.compressImage = function (file, maxSizeInMB, ignoreAlpha, logExecutionTime) {\r\n        var _this = this;\r\n        if (ignoreAlpha === void 0) { ignoreAlpha = false; }\r\n        if (logExecutionTime === void 0) { logExecutionTime = false; }\r\n        var compressedFileSubject = new Subject();\r\n        this.timeAtStart = new Date().getTime();\r\n        this.initialFile = file;\r\n        if (file.type !== \"image/jpeg\" && file.type !== \"image/png\") {\r\n            //END OF COMPRESSION\r\n            setTimeout(function () {\r\n                compressedFileSubject.error({ compressedFile: file, reason: \"File provided is neither of type jpg nor of type png.\", error: \"INVALID_EXTENSION\" });\r\n            }, 0);\r\n            return compressedFileSubject.asObservable();\r\n        }\r\n        var oldFileSize = file.size / 1024 / 1024;\r\n        if (oldFileSize < maxSizeInMB) {\r\n            // END OF COMPRESSION\r\n            // FILE SIZE ALREADY BELOW MAX_SIZE -> no compression needed\r\n            setTimeout(function () { compressedFileSubject.next(file); }, 0);\r\n            return compressedFileSubject.asObservable();\r\n        }\r\n        var cvs = document.createElement('canvas');\r\n        var ctx = cvs.getContext('2d');\r\n        var img = new Image();\r\n        var self = this;\r\n        img.onload = function () {\r\n            _this.imageExifService.getOrientedImage(img).then(function (orientedImg) {\r\n                window.URL.revokeObjectURL(img.src);\r\n                cvs.width = orientedImg.width;\r\n                cvs.height = orientedImg.height;\r\n                ctx.drawImage(orientedImg, 0, 0);\r\n                var imageData = ctx.getImageData(0, 0, orientedImg.width, orientedImg.height);\r\n                if (file.type === \"image/png\" && _this.isImgUsingAlpha(imageData) && !ignoreAlpha) {\r\n                    //png image with alpha\r\n                    compressedFileSubject.error({ compressedFile: file, reason: \"File provided is a png image which uses the alpha channel. No compression possible.\", error: \"PNG_WITH_ALPHA\" });\r\n                }\r\n                ctx = cvs.getContext('2d', { 'alpha': false });\r\n                ctx.drawImage(orientedImg, 0, 0);\r\n                self.getCompressedFile(cvs, 50, maxSizeInMB, 1).then(function (compressedFile) {\r\n                    compressedFileSubject.next(compressedFile);\r\n                    self.logExecutionTime(logExecutionTime);\r\n                }).catch(function (error) {\r\n                    compressedFileSubject.error(error);\r\n                    self.logExecutionTime(logExecutionTime);\r\n                });\r\n            });\r\n        };\r\n        img.src = window.URL.createObjectURL(file);\r\n        return compressedFileSubject.asObservable();\r\n    };\r\n    ;\r\n    ImgMaxSizeService.prototype.getCompressedFile = function (cvs, quality, maxSizeInMB, currentStep) {\r\n        var _this = this;\r\n        var result = new Promise(function (resolve, reject) {\r\n            cvs.toBlob(function (blob) {\r\n                if (currentStep + 1 > MAX_STEPS) {\r\n                    //COMPRESSION END\r\n                    //maximal steps reached\r\n                    reject({ compressedFile: _this.getResultFile(blob), reason: \"Could not find the correct compression quality in \" + MAX_STEPS + \" steps.\", error: \"MAX_STEPS_EXCEEDED\" });\r\n                }\r\n                else {\r\n                    var newQuality = _this.getCalculatedQuality(blob, quality, maxSizeInMB, currentStep);\r\n                    _this.checkCompressionStatus(cvs, blob, quality, maxSizeInMB, currentStep, newQuality)\r\n                        .then(function (result) {\r\n                        resolve(result);\r\n                    })\r\n                        .catch(function (result) {\r\n                        reject(result);\r\n                    });\r\n                }\r\n            }, \"image/jpeg\", quality / 100);\r\n        });\r\n        return result;\r\n    };\r\n    ImgMaxSizeService.prototype.getResultFile = function (blob) {\r\n        return this.generateResultFile(blob, this.initialFile.name, this.initialFile.type, new Date().getTime());\r\n    };\r\n    ImgMaxSizeService.prototype.generateResultFile = function (blob, name, type, lastModified) {\r\n        var resultFile = new Blob([blob], { type: type });\r\n        return this.blobToFile(resultFile, name, lastModified);\r\n    };\r\n    ImgMaxSizeService.prototype.blobToFile = function (blob, name, lastModified) {\r\n        var file = blob;\r\n        file.name = name;\r\n        file.lastModified = lastModified;\r\n        //Cast to a File() type\r\n        return file;\r\n    };\r\n    ImgMaxSizeService.prototype.getCalculatedQuality = function (blob, quality, maxSizeInMB, currentStep) {\r\n        //CALCULATE NEW QUALITY\r\n        var currentSize = blob.size / 1024 / 1024;\r\n        var ratioMaxSizeToCurrentSize = maxSizeInMB / currentSize;\r\n        if (ratioMaxSizeToCurrentSize > 5) {\r\n            //max ratio to avoid extreme quality values\r\n            ratioMaxSizeToCurrentSize = 5;\r\n        }\r\n        var ratioMaxSizeToInitialSize = currentSize / (this.initialFile.size / 1024 / 1024);\r\n        if (ratioMaxSizeToInitialSize < 0.05) {\r\n            //min ratio to avoid extreme quality values\r\n            ratioMaxSizeToInitialSize = 0.05;\r\n        }\r\n        var newQuality = 0;\r\n        var multiplicator = Math.abs(ratioMaxSizeToInitialSize - 1) * 10 / (currentStep * 1.7) / ratioMaxSizeToCurrentSize;\r\n        if (multiplicator < 1) {\r\n            multiplicator = 1;\r\n        }\r\n        if (ratioMaxSizeToCurrentSize >= 1) {\r\n            newQuality = quality + (ratioMaxSizeToCurrentSize - 1) * 10 * multiplicator;\r\n        }\r\n        else {\r\n            newQuality = quality - (1 - ratioMaxSizeToCurrentSize) * 10 * multiplicator;\r\n        }\r\n        if (newQuality > 100) {\r\n            //max quality = 100, so let's set the new quality to the value in between the old quality and 100 in case of > 100\r\n            newQuality = quality + (100 - quality) / 2;\r\n        }\r\n        if (newQuality < 0) {\r\n            //min quality = 0, so let's set the new quality to the value in between the old quality and 0 in case of < 0\r\n            newQuality = quality - quality / 2;\r\n        }\r\n        return newQuality;\r\n    };\r\n    ImgMaxSizeService.prototype.checkCompressionStatus = function (cvs, blob, quality, maxSizeInMB, currentStep, newQuality) {\r\n        var _this = this;\r\n        var result = new Promise(function (resolve, reject) {\r\n            if (quality === 100 && newQuality >= 100) {\r\n                //COMPRESSION END\r\n                //Seems like quality 100 is max but file still too small, case that shouldn't exist as the compression shouldn't even have started in the first place\r\n                reject({ compressedFile: _this.initialFile, reason: \"Unfortunately there was an error while compressing the file.\", error: \"FILE_BIGGER_THAN_INITIAL_FILE\" });\r\n            }\r\n            else if ((quality < 1) && (newQuality < quality)) {\r\n                //COMPRESSION END\r\n                //File size still too big but can't compress further than quality=0\r\n                reject({ compressedFile: _this.getResultFile(blob), reason: \"Could not compress image enough to fit the maximal file size limit.\", error: \"UNABLE_TO_COMPRESS_ENOUGH\" });\r\n            }\r\n            else if ((newQuality > quality) && (Math.round(quality) == Math.round(newQuality))) {\r\n                //COMPRESSION END\r\n                //next steps quality would be the same quality but newQuality is slightly bigger than old one, means we most likely found the nearest quality to compress to maximal size\r\n                resolve(_this.getResultFile(blob));\r\n            }\r\n            else if (currentStep > 5 && (newQuality > quality) && (newQuality < quality + 2)) {\r\n                //COMPRESSION END\r\n                //for some rare occasions the algorithm might be stuck around e.g. 98.5 and 97.4 because of the maxQuality of 100, the current quality is the nearest possible quality in that case\r\n                resolve(_this.getResultFile(blob));\r\n            }\r\n            else if ((newQuality > quality) && Number.isInteger(quality) && (Math.floor(newQuality) == quality)) {\r\n                //COMPRESSION END\r\n                /*\r\n                    in the previous step if ((quality > newQuality) && (Math.round(quality) == Math.round(newQuality))) applied, so\r\n                    newQuality = Math.round(newQuality) - 1; this was done to reduce the quality at least a full integer down to not waste a step\r\n                    with the same compression rate quality as before. Now, the newQuality is still only in between the old quality (e.g. 93)\r\n                    and the newQuality (e.g. 94) which most likely means that the value for the newQuality (the bigger one) would make the filesize\r\n                    too big so we should just stick with the current, lower quality and return that file.\r\n                */\r\n                resolve(_this.getResultFile(blob));\r\n            }\r\n            else {\r\n                //CONTINUE COMPRESSION\r\n                if ((quality > newQuality) && (Math.round(quality) == Math.round(newQuality))) {\r\n                    //quality can only be an integer -> make sure difference between old quality and new one is at least a whole integer number\r\n                    // - it would be nonsense to compress again with the same quality\r\n                    newQuality = Math.round(newQuality) - 1;\r\n                }\r\n                //recursively call function again\r\n                resolve(_this.getCompressedFile(cvs, newQuality, maxSizeInMB, currentStep + 1));\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    ImgMaxSizeService.prototype.isImgUsingAlpha = function (imageData) {\r\n        for (var i = 0; i < imageData.data.length; i += 4) {\r\n            if (imageData.data[i + 3] !== 255) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    ImgMaxSizeService.prototype.logExecutionTime = function (logExecutionTime) {\r\n        if (logExecutionTime) {\r\n            console.info(\"Execution time: \", new Date().getTime() - this.timeAtStart + \"ms\");\r\n        }\r\n    };\r\n    ImgMaxSizeService.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    ImgMaxSizeService.ctorParameters = function () { return [\r\n        { type: ImgExifService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgExifService; }),] }] }\r\n    ]; };\r\n    return ImgMaxSizeService;\r\n}());\r\nexport { ImgMaxSizeService };\r\n"]},"metadata":{},"sourceType":"module"}