{"ast":null,"code":"import { Injectable, Inject, forwardRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport pica from 'pica/dist/pica';\nimport { ImgExifService } from './img-exif.service';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './img-exif.service';\n\nvar Ng2PicaService = function () {\n  function Ng2PicaService(imageExifService) {\n    this.imageExifService = imageExifService;\n  }\n\n  Ng2PicaService.prototype.resize = function (files, width, height, keepAspectRatio) {\n    if (keepAspectRatio === void 0) {\n      keepAspectRatio = false;\n    }\n\n    var resizedFile = new Subject();\n\n    for (var i = 0; i < files.length; i++) {\n      this.resizeFile(files[i], width, height, keepAspectRatio).then(function (returnedFile) {\n        resizedFile.next(returnedFile);\n      }).catch(function (error) {\n        resizedFile.error(error);\n      });\n    }\n\n    return resizedFile.asObservable();\n  };\n\n  Ng2PicaService.prototype.resizeCanvas = function (from, to, options) {\n    var result = new Promise(function (resolve, reject) {\n      var curPica = new pica();\n\n      if (!curPica || !curPica.resize) {\n        curPica = new window.pica();\n      }\n\n      curPica.resize(from, to, options).then(function (response) {\n        resolve(response);\n      }, function (error) {\n        reject(error);\n      });\n    });\n    return result;\n  };\n\n  Ng2PicaService.prototype.resizeBuffer = function (options) {\n    var result = new Promise(function (resolve, reject) {\n      var curPica = new pica();\n\n      if (!curPica || !curPica.resizeBuffer) {\n        curPica = new window.pica();\n      }\n\n      curPica.resizeBuffer(options).then(function (response) {\n        resolve(response);\n      }, function (error) {\n        reject(error);\n      });\n    });\n    return result;\n  };\n\n  Ng2PicaService.prototype.resizeFile = function (file, width, height, keepAspectRatio) {\n    var _this = this;\n\n    if (keepAspectRatio === void 0) {\n      keepAspectRatio = false;\n    }\n\n    var result = new Promise(function (resolve, reject) {\n      var fromCanvas = document.createElement('canvas');\n      var ctx = fromCanvas.getContext('2d');\n      var img = new Image();\n\n      img.onload = function () {\n        _this.imageExifService.getOrientedImage(img).then(function (orientedImg) {\n          window.URL.revokeObjectURL(img.src);\n          fromCanvas.width = orientedImg.width;\n          fromCanvas.height = orientedImg.height;\n          ctx.drawImage(orientedImg, 0, 0);\n          var imageData = ctx.getImageData(0, 0, orientedImg.width, orientedImg.height);\n\n          if (keepAspectRatio) {\n            var ratio = Math.min(width / imageData.width, height / imageData.height);\n            width = Math.round(imageData.width * ratio);\n            height = Math.round(imageData.height * ratio);\n          }\n\n          var useAlpha = true;\n\n          if (file.type === \"image/jpeg\" || file.type === \"image/png\" && !_this.isImgUsingAlpha(imageData)) {\n            //image without alpha\n            useAlpha = false;\n            ctx = fromCanvas.getContext('2d', {\n              'alpha': false\n            });\n            ctx.drawImage(orientedImg, 0, 0);\n          }\n\n          var toCanvas = document.createElement('canvas');\n          toCanvas.width = width;\n          toCanvas.height = height;\n\n          _this.resizeCanvas(fromCanvas, toCanvas, {\n            'alpha': useAlpha\n          }).then(function (resizedCanvas) {\n            resizedCanvas.toBlob(function (blob) {\n              var newFile = _this.generateResultFile(blob, file.name, file.type, new Date().getTime());\n\n              resolve(newFile);\n            }, file.type);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      };\n\n      img.src = window.URL.createObjectURL(file);\n    });\n    return result;\n  };\n\n  Ng2PicaService.prototype.isImgUsingAlpha = function (imageData) {\n    for (var i = 0; i < imageData.data.length; i += 4) {\n      if (imageData.data[i + 3] !== 255) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Ng2PicaService.prototype.generateResultFile = function (blob, name, type, lastModified) {\n    var resultFile = new Blob([blob], {\n      type: type\n    });\n    return this.blobToFile(resultFile, name, lastModified);\n  };\n\n  Ng2PicaService.prototype.blobToFile = function (blob, name, lastModified) {\n    var file = blob;\n    file.name = name;\n    file.lastModified = lastModified; //Cast to a File() type\n\n    return file;\n  };\n  /** @nocollapse */\n\n\n  Ng2PicaService.ctorParameters = function () {\n    return [{\n      type: ImgExifService,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return ImgExifService;\n        })]\n      }]\n    }];\n  };\n\n  Ng2PicaService.ɵfac = function Ng2PicaService_Factory(t) {\n    return new (t || Ng2PicaService)(ɵngcc0.ɵɵinject(forwardRef(function () {\n      return ImgExifService;\n    })));\n  };\n\n  Ng2PicaService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: Ng2PicaService,\n    factory: function factory(t) {\n      return Ng2PicaService.ɵfac(t);\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(Ng2PicaService, [{\n      type: Injectable\n    }], function () {\n      return [{\n        type: ɵngcc1.ImgExifService,\n        decorators: [{\n          type: Inject,\n          args: [forwardRef(function () {\n            return ImgExifService;\n          })]\n        }]\n      }];\n    }, null);\n  })();\n\n  return Ng2PicaService;\n}();\n\nexport { Ng2PicaService };","map":{"version":3,"sources":["ng2-pica.service.js"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, forwardRef } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport pica from 'pica/dist/pica';\r\nimport { ImgExifService } from './img-exif.service';\r\nvar Ng2PicaService = /** @class */ (function () {\r\n    function Ng2PicaService(imageExifService) {\r\n        this.imageExifService = imageExifService;\r\n    }\r\n    Ng2PicaService.prototype.resize = function (files, width, height, keepAspectRatio) {\r\n        if (keepAspectRatio === void 0) { keepAspectRatio = false; }\r\n        var resizedFile = new Subject();\r\n        for (var i = 0; i < files.length; i++) {\r\n            this.resizeFile(files[i], width, height, keepAspectRatio).then(function (returnedFile) {\r\n                resizedFile.next(returnedFile);\r\n            }).catch(function (error) {\r\n                resizedFile.error(error);\r\n            });\r\n        }\r\n        return resizedFile.asObservable();\r\n    };\r\n    Ng2PicaService.prototype.resizeCanvas = function (from, to, options) {\r\n        var result = new Promise(function (resolve, reject) {\r\n            var curPica = new pica();\r\n            if (!curPica || !curPica.resize) {\r\n                curPica = new window.pica();\r\n            }\r\n            curPica.resize(from, to, options)\r\n                .then(function (response) {\r\n                resolve(response);\r\n            }, function (error) {\r\n                reject(error);\r\n            });\r\n        });\r\n        return result;\r\n    };\r\n    Ng2PicaService.prototype.resizeBuffer = function (options) {\r\n        var result = new Promise(function (resolve, reject) {\r\n            var curPica = new pica();\r\n            if (!curPica || !curPica.resizeBuffer) {\r\n                curPica = new window.pica();\r\n            }\r\n            curPica.resizeBuffer(options)\r\n                .then(function (response) {\r\n                resolve(response);\r\n            }, function (error) {\r\n                reject(error);\r\n            });\r\n        });\r\n        return result;\r\n    };\r\n    Ng2PicaService.prototype.resizeFile = function (file, width, height, keepAspectRatio) {\r\n        var _this = this;\r\n        if (keepAspectRatio === void 0) { keepAspectRatio = false; }\r\n        var result = new Promise(function (resolve, reject) {\r\n            var fromCanvas = document.createElement('canvas');\r\n            var ctx = fromCanvas.getContext('2d');\r\n            var img = new Image();\r\n            img.onload = function () {\r\n                _this.imageExifService.getOrientedImage(img).then(function (orientedImg) {\r\n                    window.URL.revokeObjectURL(img.src);\r\n                    fromCanvas.width = orientedImg.width;\r\n                    fromCanvas.height = orientedImg.height;\r\n                    ctx.drawImage(orientedImg, 0, 0);\r\n                    var imageData = ctx.getImageData(0, 0, orientedImg.width, orientedImg.height);\r\n                    if (keepAspectRatio) {\r\n                        var ratio = Math.min(width / imageData.width, height / imageData.height);\r\n                        width = Math.round(imageData.width * ratio);\r\n                        height = Math.round(imageData.height * ratio);\r\n                    }\r\n                    var useAlpha = true;\r\n                    if (file.type === \"image/jpeg\" || (file.type === \"image/png\" && !_this.isImgUsingAlpha(imageData))) {\r\n                        //image without alpha\r\n                        useAlpha = false;\r\n                        ctx = fromCanvas.getContext('2d', { 'alpha': false });\r\n                        ctx.drawImage(orientedImg, 0, 0);\r\n                    }\r\n                    var toCanvas = document.createElement('canvas');\r\n                    toCanvas.width = width;\r\n                    toCanvas.height = height;\r\n                    _this.resizeCanvas(fromCanvas, toCanvas, { 'alpha': useAlpha })\r\n                        .then(function (resizedCanvas) {\r\n                        resizedCanvas.toBlob(function (blob) {\r\n                            var newFile = _this.generateResultFile(blob, file.name, file.type, new Date().getTime());\r\n                            resolve(newFile);\r\n                        }, file.type);\r\n                    })\r\n                        .catch(function (error) {\r\n                        reject(error);\r\n                    });\r\n                });\r\n            };\r\n            img.src = window.URL.createObjectURL(file);\r\n        });\r\n        return result;\r\n    };\r\n    Ng2PicaService.prototype.isImgUsingAlpha = function (imageData) {\r\n        for (var i = 0; i < imageData.data.length; i += 4) {\r\n            if (imageData.data[i + 3] !== 255) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Ng2PicaService.prototype.generateResultFile = function (blob, name, type, lastModified) {\r\n        var resultFile = new Blob([blob], { type: type });\r\n        return this.blobToFile(resultFile, name, lastModified);\r\n    };\r\n    Ng2PicaService.prototype.blobToFile = function (blob, name, lastModified) {\r\n        var file = blob;\r\n        file.name = name;\r\n        file.lastModified = lastModified;\r\n        //Cast to a File() type\r\n        return file;\r\n    };\r\n    Ng2PicaService.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    Ng2PicaService.ctorParameters = function () { return [\r\n        { type: ImgExifService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgExifService; }),] }] }\r\n    ]; };\r\n    return Ng2PicaService;\r\n}());\r\nexport { Ng2PicaService };\r\n"]},"metadata":{},"sourceType":"module"}