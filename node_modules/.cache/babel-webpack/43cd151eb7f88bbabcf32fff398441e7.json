{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport * as exifr from 'exifr/dist/mini.legacy.umd';\nimport * as ɵngcc0 from '@angular/core';\n\nvar ImgExifService = function () {\n  function ImgExifService() {}\n\n  ImgExifService.prototype.getOrientedImage = function (image) {\n    return new Promise(function (resolve) {\n      var img;\n      exifr.orientation(image).catch(function (err) {\n        return undefined;\n      }).then(function (orientation) {\n        if (orientation != 1) {\n          var canvas = document.createElement(\"canvas\"),\n              ctx = canvas.getContext(\"2d\"),\n              cw = image.width,\n              ch = image.height,\n              cx = 0,\n              cy = 0,\n              deg = 0;\n\n          switch (orientation) {\n            case 3:\n            case 4:\n              cx = -image.width;\n              cy = -image.height;\n              deg = 180;\n              break;\n\n            case 5:\n            case 6:\n              cw = image.height;\n              ch = image.width;\n              cy = -image.height;\n              deg = 90;\n              break;\n\n            case 7:\n            case 8:\n              cw = image.height;\n              ch = image.width;\n              cx = -image.width;\n              deg = 270;\n              break;\n\n            default:\n              break;\n          }\n\n          canvas.width = cw;\n          canvas.height = ch;\n\n          if ([2, 4, 5, 7].indexOf(orientation) > -1) {\n            //flip image\n            ctx.translate(cw, 0);\n            ctx.scale(-1, 1);\n          }\n\n          ctx.rotate(deg * Math.PI / 180);\n          ctx.drawImage(image, cx, cy);\n          img = document.createElement(\"img\");\n          img.width = cw;\n          img.height = ch;\n          img.addEventListener('load', function () {\n            resolve(img);\n          });\n          img.src = canvas.toDataURL(\"image/png\");\n        } else {\n          resolve(image);\n        }\n      });\n    });\n  };\n\n  ImgExifService.ɵfac = function ImgExifService_Factory(t) {\n    return new (t || ImgExifService)();\n  };\n\n  ImgExifService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: ImgExifService,\n    factory: function factory(t) {\n      return ImgExifService.ɵfac(t);\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(ImgExifService, [{\n      type: Injectable\n    }], function () {\n      return [];\n    }, null);\n  })();\n\n  return ImgExifService;\n}();\n\nexport { ImgExifService };","map":{"version":3,"sources":["img-exif.service.js"],"names":[],"mappings":"AAAA,SAAA,UAAA,QAAA,eAAA;AACA,OAAA,KAAA,KAAA,MAAA,4BAAA;;;AACA,IAAA,cAAA,GAAA,YAAA;AACA,WAAA,cAAA,GAAA,CACA;;AACA,EAAA,cAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAA,KAAA,EAAA;AACA,WAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,UAAA,GAAA;AACA,MAAA,KAAA,CAAA,WAAA,CAAA,KAAA,EAAA,KAAA,CAAA,UAAA,GAAA,EAAA;AAAA,eAAA,SAAA;AAAA,OAAA,EAAA,IAAA,CAAA,UAAA,WAAA,EAAA;AACA,YAAA,WAAA,IAAA,CAAA,EAAA;AACA,cAAA,MAAA,GAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA;AAAA,cAAA,GAAA,GAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AAAA,cAAA,EAAA,GAAA,KAAA,CAAA,KAAA;AAAA,cAAA,EAAA,GAAA,KAAA,CAAA,MAAA;AAAA,cAAA,EAAA,GAAA,CAAA;AAAA,cAAA,EAAA,GAAA,CAAA;AAAA,cAAA,GAAA,GAAA,CAAA;;AACA,kBAAA,WAAA;AACA,iBAAA,CAAA;AACA,iBAAA,CAAA;AACA,cAAA,EAAA,GAAA,CAAA,KAAA,CAAA,KAAA;AACA,cAAA,EAAA,GAAA,CAAA,KAAA,CAAA,MAAA;AACA,cAAA,GAAA,GAAA,GAAA;AACA;;AACA,iBAAA,CAAA;AACA,iBAAA,CAAA;AACA,cAAA,EAAA,GAAA,KAAA,CAAA,MAAA;AACA,cAAA,EAAA,GAAA,KAAA,CAAA,KAAA;AACA,cAAA,EAAA,GAAA,CAAA,KAAA,CAAA,MAAA;AACA,cAAA,GAAA,GAAA,EAAA;AACA;;AACA,iBAAA,CAAA;AACA,iBAAA,CAAA;AACA,cAAA,EAAA,GAAA,KAAA,CAAA,MAAA;AACA,cAAA,EAAA,GAAA,KAAA,CAAA,KAAA;AACA,cAAA,EAAA,GAAA,CAAA,KAAA,CAAA,KAAA;AACA,cAAA,GAAA,GAAA,GAAA;AACA;;AACA;AACA;AAtBA;;AAwBA,UAAA,MAAA,CAAA,KAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,MAAA,GAAA,EAAA;;AACA,cAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,OAAA,CAAA,WAAA,IAAA,CAAA,CAAA,EAAA;AACA;AACA,YAAA,GAAA,CAAA,SAAA,CAAA,EAAA,EAAA,CAAA;AACA,YAAA,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA;AACA;;AACA,UAAA,GAAA,CAAA,MAAA,CAAA,GAAA,GAAA,IAAA,CAAA,EAAA,GAAA,GAAA;AACA,UAAA,GAAA,CAAA,SAAA,CAAA,KAAA,EAAA,EAAA,EAAA,EAAA;AACA,UAAA,GAAA,GAAA,QAAA,CAAA,aAAA,CAAA,KAAA,CAAA;AACA,UAAA,GAAA,CAAA,KAAA,GAAA,EAAA;AACA,UAAA,GAAA,CAAA,MAAA,GAAA,EAAA;AACA,UAAA,GAAA,CAAA,gBAAA,CAAA,MAAA,EAAA,YAAA;AACA,YAAA,OAAA,CAAA,GAAA,CAAA;AACA,WAFA;AAGA,UAAA,GAAA,CAAA,GAAA,GAAA,MAAA,CAAA,SAAA,CAAA,WAAA,CAAA;AACA,SA1CA,MA2CA;AACA,UAAA,OAAA,CAAA,KAAA,CAAA;AACA;AACA,OA/CA;AAgDA,KAlDA,CAAA;AAmDA,GApDA;;;;;;;;;;;;;;;;;;;;AAuDM,G;;AACN,SAAA,cAAA;AACA,CA5DA,EAAA;;AA6DA,SAAA,cAAA","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport * as exifr from 'exifr/dist/mini.legacy.umd';\r\nvar ImgExifService = /** @class */ (function () {\r\n    function ImgExifService() {\r\n    }\r\n    ImgExifService.prototype.getOrientedImage = function (image) {\r\n        return new Promise(function (resolve) {\r\n            var img;\r\n            exifr.orientation(image).catch(function (err) { return undefined; }).then(function (orientation) {\r\n                if (orientation != 1) {\r\n                    var canvas = document.createElement(\"canvas\"), ctx = canvas.getContext(\"2d\"), cw = image.width, ch = image.height, cx = 0, cy = 0, deg = 0;\r\n                    switch (orientation) {\r\n                        case 3:\r\n                        case 4:\r\n                            cx = -image.width;\r\n                            cy = -image.height;\r\n                            deg = 180;\r\n                            break;\r\n                        case 5:\r\n                        case 6:\r\n                            cw = image.height;\r\n                            ch = image.width;\r\n                            cy = -image.height;\r\n                            deg = 90;\r\n                            break;\r\n                        case 7:\r\n                        case 8:\r\n                            cw = image.height;\r\n                            ch = image.width;\r\n                            cx = -image.width;\r\n                            deg = 270;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    canvas.width = cw;\r\n                    canvas.height = ch;\r\n                    if ([2, 4, 5, 7].indexOf(orientation) > -1) {\r\n                        //flip image\r\n                        ctx.translate(cw, 0);\r\n                        ctx.scale(-1, 1);\r\n                    }\r\n                    ctx.rotate(deg * Math.PI / 180);\r\n                    ctx.drawImage(image, cx, cy);\r\n                    img = document.createElement(\"img\");\r\n                    img.width = cw;\r\n                    img.height = ch;\r\n                    img.addEventListener('load', function () {\r\n                        resolve(img);\r\n                    });\r\n                    img.src = canvas.toDataURL(\"image/png\");\r\n                }\r\n                else {\r\n                    resolve(image);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ImgExifService.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return ImgExifService;\r\n}());\r\nexport { ImgExifService };\r\n"]},"metadata":{},"sourceType":"module"}