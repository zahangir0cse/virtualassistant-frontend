{"ast":null,"code":"import { Injectable, Inject, forwardRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport pica from 'pica/dist/pica';\nimport { ImgExifService } from './img-exif.service';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './img-exif.service';\n\nvar Ng2PicaService = function () {\n  function Ng2PicaService(imageExifService) {\n    this.imageExifService = imageExifService;\n  }\n\n  Ng2PicaService.prototype.resize = function (files, width, height, keepAspectRatio) {\n    if (keepAspectRatio === void 0) {\n      keepAspectRatio = false;\n    }\n\n    var resizedFile = new Subject();\n\n    for (var i = 0; i < files.length; i++) {\n      this.resizeFile(files[i], width, height, keepAspectRatio).then(function (returnedFile) {\n        resizedFile.next(returnedFile);\n      }).catch(function (error) {\n        resizedFile.error(error);\n      });\n    }\n\n    return resizedFile.asObservable();\n  };\n\n  Ng2PicaService.prototype.resizeCanvas = function (from, to, options) {\n    var result = new Promise(function (resolve, reject) {\n      var curPica = new pica();\n\n      if (!curPica || !curPica.resize) {\n        curPica = new window.pica();\n      }\n\n      curPica.resize(from, to, options).then(function (response) {\n        resolve(response);\n      }, function (error) {\n        reject(error);\n      });\n    });\n    return result;\n  };\n\n  Ng2PicaService.prototype.resizeBuffer = function (options) {\n    var result = new Promise(function (resolve, reject) {\n      var curPica = new pica();\n\n      if (!curPica || !curPica.resizeBuffer) {\n        curPica = new window.pica();\n      }\n\n      curPica.resizeBuffer(options).then(function (response) {\n        resolve(response);\n      }, function (error) {\n        reject(error);\n      });\n    });\n    return result;\n  };\n\n  Ng2PicaService.prototype.resizeFile = function (file, width, height, keepAspectRatio) {\n    var _this = this;\n\n    if (keepAspectRatio === void 0) {\n      keepAspectRatio = false;\n    }\n\n    var result = new Promise(function (resolve, reject) {\n      var fromCanvas = document.createElement('canvas');\n      var ctx = fromCanvas.getContext('2d');\n      var img = new Image();\n\n      img.onload = function () {\n        _this.imageExifService.getOrientedImage(img).then(function (orientedImg) {\n          window.URL.revokeObjectURL(img.src);\n          fromCanvas.width = orientedImg.width;\n          fromCanvas.height = orientedImg.height;\n          ctx.drawImage(orientedImg, 0, 0);\n          var imageData = ctx.getImageData(0, 0, orientedImg.width, orientedImg.height);\n\n          if (keepAspectRatio) {\n            var ratio = Math.min(width / imageData.width, height / imageData.height);\n            width = Math.round(imageData.width * ratio);\n            height = Math.round(imageData.height * ratio);\n          }\n\n          var useAlpha = true;\n\n          if (file.type === \"image/jpeg\" || file.type === \"image/png\" && !_this.isImgUsingAlpha(imageData)) {\n            //image without alpha\n            useAlpha = false;\n            ctx = fromCanvas.getContext('2d', {\n              'alpha': false\n            });\n            ctx.drawImage(orientedImg, 0, 0);\n          }\n\n          var toCanvas = document.createElement('canvas');\n          toCanvas.width = width;\n          toCanvas.height = height;\n\n          _this.resizeCanvas(fromCanvas, toCanvas, {\n            'alpha': useAlpha\n          }).then(function (resizedCanvas) {\n            resizedCanvas.toBlob(function (blob) {\n              var newFile = _this.generateResultFile(blob, file.name, file.type, new Date().getTime());\n\n              resolve(newFile);\n            }, file.type);\n          }).catch(function (error) {\n            reject(error);\n          });\n        });\n      };\n\n      img.src = window.URL.createObjectURL(file);\n    });\n    return result;\n  };\n\n  Ng2PicaService.prototype.isImgUsingAlpha = function (imageData) {\n    for (var i = 0; i < imageData.data.length; i += 4) {\n      if (imageData.data[i + 3] !== 255) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Ng2PicaService.prototype.generateResultFile = function (blob, name, type, lastModified) {\n    var resultFile = new Blob([blob], {\n      type: type\n    });\n    return this.blobToFile(resultFile, name, lastModified);\n  };\n\n  Ng2PicaService.prototype.blobToFile = function (blob, name, lastModified) {\n    var file = blob;\n    file.name = name;\n    file.lastModified = lastModified; //Cast to a File() type\n\n    return file;\n  };\n\n  Ng2PicaService.ɵfac = function Ng2PicaService_Factory(t) {\n    return new (t || Ng2PicaService)(ɵngcc0.ɵɵinject(forwardRef(function () {\n      return ImgExifService;\n    })));\n  };\n\n  Ng2PicaService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: Ng2PicaService,\n    factory: function factory(t) {\n      return Ng2PicaService.ɵfac(t);\n    }\n  });\n  return Ng2PicaService;\n}();\n\nexport { Ng2PicaService };","map":null,"metadata":{},"sourceType":"module"}