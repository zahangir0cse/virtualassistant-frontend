/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';
import { CookieService } from './cookie.service';
import { CookieOptionsProvider } from './cookie-options-provider';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './cookie-options-provider';
var CookieBackendService = /** @class */ (function (_super) {
    tslib_1.__extends(CookieBackendService, _super);
    function CookieBackendService(request, response, _optionsProvider) {
        var _this = _super.call(this, _optionsProvider) || this;
        _this.request = request;
        _this.response = response;
        return _this;
    }
    Object.defineProperty(CookieBackendService.prototype, "cookieString", {
        get: /**
         * @return {?}
         */
        function () {
            return this.request.cookie || '';
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.request.cookie = val;
            this.response.cookie = val;
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    CookieBackendService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [REQUEST,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [RESPONSE,] }] },
        { type: CookieOptionsProvider }
    ]; };
CookieBackendService.ɵfac = function CookieBackendService_Factory(t) { return new (t || CookieBackendService)(ɵngcc0.ɵɵinject(REQUEST), ɵngcc0.ɵɵinject(RESPONSE), ɵngcc0.ɵɵinject(ɵngcc1.CookieOptionsProvider)); };
CookieBackendService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CookieBackendService, factory: function (t) { return CookieBackendService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieBackendService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [REQUEST]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [RESPONSE]
            }] }, { type: ɵngcc1.CookieOptionsProvider }]; }, null); })();
    return CookieBackendService;
}(CookieService));
export { CookieBackendService };
if (false) {
    /** @type {?} */
    CookieBackendService.prototype.request;
    /** @type {?} */
    CookieBackendService.prototype.response;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLWJhY2tlbmQuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmd4LWNvb2tpZS9saWIvY29va2llLWJhY2tlbmQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFdkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7QUFFbEU7QUFDZ0QsSUFBTixnREFBYTtBQUFDLElBRXRELDhCQUFxQyxPQUFZLEVBQ1gsUUFBYSxFQUN2QyxnQkFBdUM7QUFDckQsUUFIRSxZQUdFLGtCQUFNLGdCQUFnQixDQUFDLFNBQ3hCO0FBQ0gsUUFMdUMsYUFBTyxHQUFQLE9BQU8sQ0FBSztBQUFDLFFBQ1osY0FBUSxHQUFSLFFBQVEsQ0FBSztBQUFDO0FBQ2pDLElBRW5CLENBQUM7QUFDSCxJQUNFLHNCQUFjLDhDQUFZO0FBQUk7QUFDeEI7QUFBdUI7QUFHL0IsUUFKRTtBQUFjLFlBQ1osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7QUFDckMsUUFBRSxDQUFDO0FBRUg7QUFBaUI7QUFBMEI7QUFDckI7QUFDbkIsUUFGRCxVQUEyQixHQUFXO0FBQ3hDLFlBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO0FBQzlCLFlBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO0FBQy9CLFFBQUUsQ0FBQztBQUNGO0FBQ3dCO0FBQTJCLE9BUGpELEFBVkc7QUFBQztpQ0FETixVQUFVLDNDQUNtQjtBQUVNLGdEQUFyQixNQUFNLFNBQUMsT0FBTztBQUFTLGdEQUN2QixNQUFNLFNBQUMsUUFBUTtBQUFTLGdCQU45QixxQkFBcUI7QUFBRzs7Ozs7Ozs7Ozs7MEVBQVM7QUFBQyxJQW1CM0MsMkJBQUM7QUFDQSxDQURBLEFBakJELENBQzBDLGFBQWEsR0FnQnREO0FBQ0QsU0FqQmEsb0JBQW9CO0FBQUk7QUFBYTtBQUV0QyxJQUFFLHVDQUFxQztBQUFDO0FBQ2hDLElBQU4sd0NBQXVDO0FBQUM7QUFDckQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJFUVVFU1QsIFJFU1BPTlNFIH0gZnJvbSAnQG5ndW5pdmVyc2FsL2V4cHJlc3MtZW5naW5lL3Rva2Vucyc7XG5cbmltcG9ydCB7IENvb2tpZVNlcnZpY2UgfSBmcm9tICcuL2Nvb2tpZS5zZXJ2aWNlJztcbmltcG9ydCB7IENvb2tpZU9wdGlvbnNQcm92aWRlciB9IGZyb20gJy4vY29va2llLW9wdGlvbnMtcHJvdmlkZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29va2llQmFja2VuZFNlcnZpY2UgZXh0ZW5kcyBDb29raWVTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KFJFUVVFU1QpIHByaXZhdGUgcmVxdWVzdDogYW55LFxuICAgICAgICAgICAgICBASW5qZWN0KFJFU1BPTlNFKSBwcml2YXRlIHJlc3BvbnNlOiBhbnksXG4gICAgICAgICAgICAgIF9vcHRpb25zUHJvdmlkZXI6IENvb2tpZU9wdGlvbnNQcm92aWRlcikge1xuICAgIHN1cGVyKF9vcHRpb25zUHJvdmlkZXIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldCBjb29raWVTdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LmNvb2tpZSB8fCAnJztcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXQgY29va2llU3RyaW5nKHZhbDogc3RyaW5nKSB7XG4gICAgdGhpcy5yZXF1ZXN0LmNvb2tpZSA9IHZhbDtcbiAgICB0aGlzLnJlc3BvbnNlLmNvb2tpZSA9IHZhbDtcbiAgfVxufVxuIl19