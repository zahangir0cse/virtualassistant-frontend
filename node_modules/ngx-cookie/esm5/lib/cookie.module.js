/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CookieOptionsProvider, COOKIE_OPTIONS } from './cookie-options-provider';
import { CookieService } from './cookie.service';
import { cookieServiceFactory } from './cookie.factory';
import * as ɵngcc0 from '@angular/core';
var CookieModule = /** @class */ (function () {
    function CookieModule() {
    }
    /**
     * Use this method in your root module to provide the CookieService
     */
    /**
     * Use this method in your root module to provide the CookieService
     * @param {?=} options
     * @return {?}
     */
    CookieModule.forRoot = /**
     * Use this method in your root module to provide the CookieService
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = {}; }
        return {
            ngModule: CookieModule,
            providers: [
                { provide: COOKIE_OPTIONS, useValue: options },
                { provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider] }
            ]
        };
    };
    /**
     * Use this method in your other (non root) modules to import the directive/pipe
     */
    /**
     * Use this method in your other (non root) modules to import the directive/pipe
     * @param {?=} options
     * @return {?}
     */
    CookieModule.forChild = /**
     * Use this method in your other (non root) modules to import the directive/pipe
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = {}; }
        return {
            ngModule: CookieModule,
            providers: [
                { provide: COOKIE_OPTIONS, useValue: options },
                { provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider] }
            ]
        };
    };
CookieModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CookieModule });
CookieModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CookieModule_Factory(t) { return new (t || CookieModule)(); }, providers: [CookieOptionsProvider] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieModule, [{
        type: NgModule,
        args: [{
                providers: [CookieOptionsProvider]
            }]
    }], function () { return []; }, null); })();
    return CookieModule;
}());
export { CookieModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmd4LWNvb2tpZS9saWIvY29va2llLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFFOUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFFeEQ7QUFDb0MsSUFEcEM7QUFDYyxJQTRCZCxDQUFDO0FBQ0QsSUExQkU7QUFDRjtBQUNFLE9BQUc7QUFDTDtBQUFRO0FBQ0c7QUFDYztBQUNYO0FBQ1gsSUFKTSxvQkFBTztBQUFPO0FBRVY7QUFDSDtBQUNBO0FBQVEsSUFKaEIsVUFBZSxPQUEyQjtBQUFJLFFBQS9CLHdCQUFBLEVBQUEsWUFBMkI7QUFBSSxRQUM1QyxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsWUFBWTtBQUM1QixZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUSxFQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBQztBQUNwRCxnQkFBUSxFQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSxDQUFDLHFCQUFxQixDQUFDLEVBQUM7QUFDakcsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUVILElBQUU7QUFDRjtBQUNFLE9BQUc7QUFDTDtBQUFRO0FBRUU7QUFDSDtBQUNBO0FBQVEsSUFKTixxQkFBUTtBQUFPO0FBRUU7QUFFdEI7QUFBbUI7QUFBUSxJQUo3QixVQUFnQixPQUEyQjtBQUFJLFFBQS9CLHdCQUFBLEVBQUEsWUFBMkI7QUFBSSxRQUM3QyxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsWUFBWTtBQUM1QixZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUSxFQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBQztBQUNwRCxnQkFBUSxFQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSxDQUFDLHFCQUFxQixDQUFDLEVBQUM7QUFDakcsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztnREE1QkYsUUFBUSxTQUFDO2tCQUNSLFNBQVMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLGtCQUNuQzs7Ozs7O2dEQUNRO0FBQUMsSUEwQlYsbUJBQUM7QUFDQSxDQURBLEFBN0JELElBNkJDO0FBQ0QsU0EzQmEsWUFBWTtBQUN4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvb2tpZU9wdGlvbnNQcm92aWRlciwgQ09PS0lFX09QVElPTlMgfSBmcm9tICcuL2Nvb2tpZS1vcHRpb25zLXByb3ZpZGVyJztcbmltcG9ydCB7IENvb2tpZVNlcnZpY2UgfSBmcm9tICcuL2Nvb2tpZS5zZXJ2aWNlJztcbmltcG9ydCB7IENvb2tpZU9wdGlvbnMgfSBmcm9tICcuL2Nvb2tpZS1vcHRpb25zLm1vZGVsJztcbmltcG9ydCB7IGNvb2tpZVNlcnZpY2VGYWN0b3J5IH0gZnJvbSAnLi9jb29raWUuZmFjdG9yeSc7XG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW0Nvb2tpZU9wdGlvbnNQcm92aWRlcl1cbn0pXG5leHBvcnQgY2xhc3MgQ29va2llTW9kdWxlIHtcbiAgLyoqXG4gICAqIFVzZSB0aGlzIG1ldGhvZCBpbiB5b3VyIHJvb3QgbW9kdWxlIHRvIHByb3ZpZGUgdGhlIENvb2tpZVNlcnZpY2VcbiAgICovXG4gIHN0YXRpYyBmb3JSb290KG9wdGlvbnM6IENvb2tpZU9wdGlvbnMgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQ29va2llTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtwcm92aWRlOiBDT09LSUVfT1BUSU9OUywgdXNlVmFsdWU6IG9wdGlvbnN9LFxuICAgICAgICB7cHJvdmlkZTogQ29va2llU2VydmljZSwgdXNlRmFjdG9yeTogY29va2llU2VydmljZUZhY3RvcnksIGRlcHM6IFtDb29raWVPcHRpb25zUHJvdmlkZXJdfVxuICAgICAgXVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVXNlIHRoaXMgbWV0aG9kIGluIHlvdXIgb3RoZXIgKG5vbiByb290KSBtb2R1bGVzIHRvIGltcG9ydCB0aGUgZGlyZWN0aXZlL3BpcGVcbiAgICovXG4gIHN0YXRpYyBmb3JDaGlsZChvcHRpb25zOiBDb29raWVPcHRpb25zID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IENvb2tpZU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7cHJvdmlkZTogQ09PS0lFX09QVElPTlMsIHVzZVZhbHVlOiBvcHRpb25zfSxcbiAgICAgICAge3Byb3ZpZGU6IENvb2tpZVNlcnZpY2UsIHVzZUZhY3Rvcnk6IGNvb2tpZVNlcnZpY2VGYWN0b3J5LCBkZXBzOiBbQ29va2llT3B0aW9uc1Byb3ZpZGVyXX1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=