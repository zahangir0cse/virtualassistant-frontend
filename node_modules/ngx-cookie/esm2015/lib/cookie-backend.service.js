/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';
import { CookieService } from './cookie.service';
import { CookieOptionsProvider } from './cookie-options-provider';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './cookie-options-provider';
export class CookieBackendService extends CookieService {
    /**
     * @param {?} request
     * @param {?} response
     * @param {?} _optionsProvider
     */
    constructor(request, response, _optionsProvider) {
        super(_optionsProvider);
        this.request = request;
        this.response = response;
    }
    /**
     * @return {?}
     */
    get cookieString() {
        return this.request.cookie || '';
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set cookieString(val) {
        this.request.cookie = val;
        this.response.cookie = val;
    }
}
CookieBackendService.ɵfac = function CookieBackendService_Factory(t) { return new (t || CookieBackendService)(ɵngcc0.ɵɵinject(REQUEST), ɵngcc0.ɵɵinject(RESPONSE), ɵngcc0.ɵɵinject(ɵngcc1.CookieOptionsProvider)); };
CookieBackendService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CookieBackendService, factory: CookieBackendService.ɵfac });
/** @nocollapse */
CookieBackendService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [REQUEST,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [RESPONSE,] }] },
    { type: CookieOptionsProvider }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieBackendService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [REQUEST]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [RESPONSE]
            }] }, { type: ɵngcc1.CookieOptionsProvider }]; }, null); })();
if (false) {
    /** @type {?} */
    CookieBackendService.prototype.request;
    /** @type {?} */
    CookieBackendService.prototype.response;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLWJhY2tlbmQuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmd4LWNvb2tpZS9saWIvY29va2llLWJhY2tlbmQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUV2RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7OztBQUdsRSxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsYUFBYTtBQUN2RDtBQUNPO0FBQTBCO0FBQzFCO0FBQW1DO0FBQVEsSUFEaEQsWUFBcUMsT0FBWSxFQUNYLFFBQWEsRUFDdkMsZ0JBQXVDO0FBQ3JELFFBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDNUIsUUFKdUMsWUFBTyxHQUFQLE9BQU8sQ0FBSztBQUFDLFFBQ1osYUFBUSxHQUFSLFFBQVEsQ0FBSztBQUFDLElBR3BELENBQUM7QUFDSDtBQUNPO0FBQW1CO0FBQVEsSUFBaEMsSUFBYyxZQUFZO0FBQUssUUFDN0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7QUFDckMsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUFzQjtBQUN6QjtBQUFRLElBRFYsSUFBYyxZQUFZLENBQUMsR0FBVztBQUN4QyxRQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztBQUM5QixRQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztBQUMvQixJQUFFLENBQUM7QUFDSDtnREFqQkMsVUFBVTs0SEFDVDtBQUFDO0FBQW1CO0FBRWIsNENBQU0sTUFBTSxTQUFDLE9BQU87QUFBUyw0Q0FDdkIsTUFBTSxTQUFDLFFBQVE7QUFBUyxZQU45QixxQkFBcUI7QUFBRzs7Ozs7Ozs7OzBFQUFFO0FBQUM7QUFBYTtBQUUvQyxJQUdZLHVDQUFxQztBQUFDO0FBQ2hDLElBQU4sd0NBQXVDO0FBQUM7QUFDckQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJFUVVFU1QsIFJFU1BPTlNFIH0gZnJvbSAnQG5ndW5pdmVyc2FsL2V4cHJlc3MtZW5naW5lL3Rva2Vucyc7XG5cbmltcG9ydCB7IENvb2tpZVNlcnZpY2UgfSBmcm9tICcuL2Nvb2tpZS5zZXJ2aWNlJztcbmltcG9ydCB7IENvb2tpZU9wdGlvbnNQcm92aWRlciB9IGZyb20gJy4vY29va2llLW9wdGlvbnMtcHJvdmlkZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29va2llQmFja2VuZFNlcnZpY2UgZXh0ZW5kcyBDb29raWVTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KFJFUVVFU1QpIHByaXZhdGUgcmVxdWVzdDogYW55LFxuICAgICAgICAgICAgICBASW5qZWN0KFJFU1BPTlNFKSBwcml2YXRlIHJlc3BvbnNlOiBhbnksXG4gICAgICAgICAgICAgIF9vcHRpb25zUHJvdmlkZXI6IENvb2tpZU9wdGlvbnNQcm92aWRlcikge1xuICAgIHN1cGVyKF9vcHRpb25zUHJvdmlkZXIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldCBjb29raWVTdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LmNvb2tpZSB8fCAnJztcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXQgY29va2llU3RyaW5nKHZhbDogc3RyaW5nKSB7XG4gICAgdGhpcy5yZXF1ZXN0LmNvb2tpZSA9IHZhbDtcbiAgICB0aGlzLnJlc3BvbnNlLmNvb2tpZSA9IHZhbDtcbiAgfVxufVxuIl19