/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, Injector } from '@angular/core';
import { APP_BASE_HREF } from '@angular/common';
import { mergeOptions } from './utils';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
export const COOKIE_OPTIONS = new InjectionToken('COOKIE_OPTIONS');
export class CookieOptionsProvider {
    /**
     * @param {?=} options
     * @param {?=} _injector
     */
    constructor(options = {}, _injector) {
        this._injector = _injector;
        this.defaultOptions = {
            path: this._injector.get(APP_BASE_HREF, '/'),
            domain: null,
            expires: null,
            secure: false,
            httpOnly: false
        };
        this._options = mergeOptions(this.defaultOptions, options);
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
}
CookieOptionsProvider.ɵfac = function CookieOptionsProvider_Factory(t) { return new (t || CookieOptionsProvider)(ɵngcc0.ɵɵinject(COOKIE_OPTIONS), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
CookieOptionsProvider.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CookieOptionsProvider, factory: CookieOptionsProvider.ɵfac });
/** @nocollapse */
CookieOptionsProvider.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [COOKIE_OPTIONS,] }] },
    { type: Injector }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieOptionsProvider, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [COOKIE_OPTIONS]
            }] }, { type: ɵngcc0.Injector }]; }, null); })();
if (false) {
    /** @type {?} */
    CookieOptionsProvider.prototype.defaultOptions;
    /** @type {?} */
    CookieOptionsProvider.prototype._options;
    /** @type {?} */
    CookieOptionsProvider.prototype._injector;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLW9wdGlvbnMtcHJvdmlkZXIuanMiLCJzb3VyY2VzIjpbIm5neC1jb29raWUvbGliL2Nvb2tpZS1vcHRpb25zLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUdoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3ZDOztBQUNBLE1BQU0sT0FBTyxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQWdCLGdCQUFnQixDQUFDO0FBR2pGLE1BQU0sT0FBTyxxQkFBcUI7QUFDbEM7QUFDTztBQUEyQjtBQUNaO0FBQVEsSUFFNUIsWUFBb0MsVUFBeUIsRUFBRSxFQUMzQyxTQUFtQjtBQUN6QyxRQURzQixjQUFTLEdBQVQsU0FBUyxDQUFVO0FBQUMsUUFDdEMsSUFBSSxDQUFDLGNBQWMsR0FBRztBQUMxQixZQUFNLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDO0FBQ2xELFlBQU0sTUFBTSxFQUFFLElBQUk7QUFDbEIsWUFBTSxPQUFPLEVBQUUsSUFBSTtBQUNuQixZQUFNLE1BQU0sRUFBRSxLQUFLO0FBQ25CLFlBQU0sUUFBUSxFQUFFLEtBQUs7QUFDckIsU0FBSyxDQUFDO0FBQ04sUUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9ELElBQUUsQ0FBQztBQUNIO0FBQ087QUFBbUI7QUFDekIsSUFEQyxJQUFJLE9BQU87QUFBSyxRQUNkLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN6QixJQUFFLENBQUM7QUFDSDtpREFyQkMsVUFBVTsrSEFDVDtBQUFDO0FBQW1CO0FBRVMsNENBR2hCLE1BQU0sU0FBQyxjQUFjO0FBQVMsWUFkQSxRQUFRO0FBQUc7Ozs7Ozs2REFBRTtBQUFDO0FBQWE7QUFDekQsSUFVYiwrQ0FBc0M7QUFDeEM7QUFBcUIsSUFBbkIseUNBQWdDO0FBQ2xDO0FBQ29CLElBQ04sMENBQTJCO0FBQUM7QUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBUFBfQkFTRV9IUkVGIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgQ29va2llT3B0aW9ucyB9IGZyb20gJy4vY29va2llLW9wdGlvbnMubW9kZWwnO1xuaW1wb3J0IHsgbWVyZ2VPcHRpb25zIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBDT09LSUVfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxDb29raWVPcHRpb25zPignQ09PS0lFX09QVElPTlMnKTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvb2tpZU9wdGlvbnNQcm92aWRlciB7XG5cbiAgcHJpdmF0ZSBkZWZhdWx0T3B0aW9uczogQ29va2llT3B0aW9ucztcbiAgcHJpdmF0ZSBfb3B0aW9uczogQ29va2llT3B0aW9ucztcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KENPT0tJRV9PUFRJT05TKSBvcHRpb25zOiBDb29raWVPcHRpb25zID0ge30sXG4gICAgICAgICAgICAgIHByaXZhdGUgX2luamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiB0aGlzLl9pbmplY3Rvci5nZXQoQVBQX0JBU0VfSFJFRiwgJy8nKSxcbiAgICAgIGRvbWFpbjogbnVsbCxcbiAgICAgIGV4cGlyZXM6IG51bGwsXG4gICAgICBzZWN1cmU6IGZhbHNlLFxuICAgICAgaHR0cE9ubHk6IGZhbHNlXG4gICAgfTtcbiAgICB0aGlzLl9vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICB9XG5cbiAgZ2V0IG9wdGlvbnMoKTogQ29va2llT3B0aW9ucyB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gIH1cbn1cbiJdfQ==