{"version":3,"file":"img-maxpx-size.service.js","sources":["img-maxpx-size.service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAGM;AACN;AACA;AACA;AACA;AACA;;;;;;;;;;;kCAAS;AACT;AACA;AACA;AACA","sourcesContent":["import { Injectable, Inject, forwardRef } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Ng2PicaService } from 'ng2-pica';\r\nimport { ImgExifService } from './img-exif.service';\r\nvar ImgMaxPXSizeService = /** @class */ (function () {\r\n    function ImgMaxPXSizeService(ng2PicaService, imageExifService) {\r\n        this.ng2PicaService = ng2PicaService;\r\n        this.imageExifService = imageExifService;\r\n    }\r\n    ImgMaxPXSizeService.prototype.resizeImage = function (file, maxWidth, maxHeight, logExecutionTime) {\r\n        var _this = this;\r\n        if (logExecutionTime === void 0) { logExecutionTime = false; }\r\n        var resizedFileSubject = new Subject();\r\n        this.timeAtStart = new Date().getTime();\r\n        if (file.type !== \"image/jpeg\" && file.type !== \"image/png\") {\r\n            //END OF RESIZE\r\n            setTimeout(function () {\r\n                resizedFileSubject.error({ resizedFile: file, reason: \"The provided File is neither of type jpg nor of type png.\", error: \"INVALID_EXTENSION\" });\r\n            }, 0);\r\n            return resizedFileSubject.asObservable();\r\n        }\r\n        var img = new Image();\r\n        var self = this;\r\n        img.onload = function () {\r\n            _this.imageExifService.getOrientedImage(img).then(function (orientedImg) {\r\n                window.URL.revokeObjectURL(img.src);\r\n                var currentWidth = orientedImg.width;\r\n                var currentHeight = orientedImg.height;\r\n                var newWidth = currentWidth;\r\n                var newHeight = currentHeight;\r\n                if (newWidth > maxWidth) {\r\n                    newWidth = maxWidth;\r\n                    //resize height proportionally\r\n                    var ratio = maxWidth / currentWidth; //is gonna be <1\r\n                    newHeight = newHeight * ratio;\r\n                }\r\n                currentHeight = newHeight;\r\n                if (newHeight > maxHeight) {\r\n                    newHeight = maxHeight;\r\n                    //resize width proportionally\r\n                    var ratio = maxHeight / currentHeight; //is gonna be <1\r\n                    newWidth = newWidth * ratio;\r\n                }\r\n                if (newHeight === orientedImg.height && newWidth === orientedImg.width) {\r\n                    //no resizing necessary\r\n                    resizedFileSubject.next(file);\r\n                    self.logExecutionTime(logExecutionTime);\r\n                }\r\n                else {\r\n                    self.ng2PicaService.resize([file], newWidth, newHeight).subscribe(function (result) {\r\n                        //all good, result is a file\r\n                        resizedFileSubject.next(result);\r\n                        self.logExecutionTime(logExecutionTime);\r\n                    }, function (error) {\r\n                        //something went wrong \r\n                        resizedFileSubject.error({ resizedFile: file, reason: error, error: \"PICA_ERROR\" });\r\n                        self.logExecutionTime(logExecutionTime);\r\n                    });\r\n                }\r\n            });\r\n        };\r\n        img.src = window.URL.createObjectURL(file);\r\n        return resizedFileSubject.asObservable();\r\n    };\r\n    ;\r\n    ImgMaxPXSizeService.prototype.logExecutionTime = function (logExecutionTime) {\r\n        if (logExecutionTime) {\r\n            console.info(\"Execution time: \", new Date().getTime() - this.timeAtStart + \"ms\");\r\n        }\r\n    };\r\n    ImgMaxPXSizeService.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    ImgMaxPXSizeService.ctorParameters = function () { return [\r\n        { type: Ng2PicaService, decorators: [{ type: Inject, args: [forwardRef(function () { return Ng2PicaService; }),] }] },\r\n        { type: ImgExifService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgExifService; }),] }] }\r\n    ]; };\r\n    return ImgMaxPXSizeService;\r\n}());\r\nexport { ImgMaxPXSizeService };\r\n"]}