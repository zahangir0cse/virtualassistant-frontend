{"version":3,"file":"ng2-img-max.service.js","sources":["ng2-img-max.service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAGM;AACN;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;kCAAS;AACT;AACA;AACA;AACA","sourcesContent":["import { Injectable, Inject, forwardRef } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { ImgMaxSizeService } from './img-max-size.service';\r\nimport { ImgMaxPXSizeService } from './img-maxpx-size.service';\r\nimport { ImgExifService } from './img-exif.service';\r\nvar Ng2ImgMaxService = /** @class */ (function () {\r\n    function Ng2ImgMaxService(imgMaxSizeService, imgMaxPXSizeService, imageExifService) {\r\n        this.imgMaxSizeService = imgMaxSizeService;\r\n        this.imgMaxPXSizeService = imgMaxPXSizeService;\r\n        this.imageExifService = imageExifService;\r\n    }\r\n    Ng2ImgMaxService.prototype.compress = function (files, maxSizeInMB, ignoreAlpha, logExecutionTime) {\r\n        var _this = this;\r\n        if (ignoreAlpha === void 0) { ignoreAlpha = false; }\r\n        if (logExecutionTime === void 0) { logExecutionTime = false; }\r\n        var compressedFileSubject = new Subject();\r\n        files.forEach(function (file) {\r\n            _this.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime).subscribe(function (value) {\r\n                compressedFileSubject.next(value);\r\n            }, function (error) {\r\n                compressedFileSubject.error(error);\r\n            });\r\n        });\r\n        return compressedFileSubject.asObservable();\r\n    };\r\n    Ng2ImgMaxService.prototype.resize = function (files, maxWidth, maxHeight, logExecutionTime) {\r\n        var _this = this;\r\n        if (logExecutionTime === void 0) { logExecutionTime = false; }\r\n        var resizedFileSubject = new Subject();\r\n        files.forEach(function (file) {\r\n            _this.resizeImage(file, maxWidth, maxHeight, logExecutionTime).subscribe(function (value) {\r\n                resizedFileSubject.next(value);\r\n            }, function (error) {\r\n                resizedFileSubject.error(error);\r\n            });\r\n        });\r\n        return resizedFileSubject.asObservable();\r\n    };\r\n    Ng2ImgMaxService.prototype.compressImage = function (file, maxSizeInMB, ignoreAlpha, logExecutionTime) {\r\n        if (ignoreAlpha === void 0) { ignoreAlpha = false; }\r\n        if (logExecutionTime === void 0) { logExecutionTime = false; }\r\n        return this.imgMaxSizeService.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime);\r\n    };\r\n    Ng2ImgMaxService.prototype.resizeImage = function (file, maxWidth, maxHeight, logExecutionTime) {\r\n        if (logExecutionTime === void 0) { logExecutionTime = false; }\r\n        return this.imgMaxPXSizeService.resizeImage(file, maxWidth, maxHeight, logExecutionTime);\r\n    };\r\n    Ng2ImgMaxService.prototype.getEXIFOrientedImage = function (image) {\r\n        return this.imageExifService.getOrientedImage(image);\r\n    };\r\n    Ng2ImgMaxService.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    Ng2ImgMaxService.ctorParameters = function () { return [\r\n        { type: ImgMaxSizeService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgMaxSizeService; }),] }] },\r\n        { type: ImgMaxPXSizeService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgMaxPXSizeService; }),] }] },\r\n        { type: ImgExifService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgExifService; }),] }] }\r\n    ]; };\r\n    return Ng2ImgMaxService;\r\n}());\r\nexport { Ng2ImgMaxService };\r\n"]}